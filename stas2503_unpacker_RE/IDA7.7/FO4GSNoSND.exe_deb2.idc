//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 1);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLG, SCF_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_CMT_INDENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("mssdk64_win7");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);
	set_selector(0X5,0);
	set_selector(0X6,0);

	add_segm_ex(0X140001000,0X140007000,0X1,2,3,2,ADDSEG_NOSREG);
	SegRename(0X140001000,".code");
	SegClass (0X140001000,"CODE");
	SegDefReg(0x140001000,"es",0x0);
	SegDefReg(0x140001000,"ss",0x0);
	SegDefReg(0x140001000,"ds",0x5);
	set_segm_type(0X140001000,2);
	add_segm_ex(0X140007000,0X140018000,0X2,2,3,2,ADDSEG_NOSREG);
	SegRename(0X140007000,".text");
	SegClass (0X140007000,"CODE");
	SegDefReg(0x140007000,"es",0x0);
	SegDefReg(0x140007000,"ss",0x0);
	SegDefReg(0x140007000,"ds",0x5);
	set_segm_type(0X140007000,2);
	add_segm_ex(0X140018000,0X14001D000,0X3,2,3,2,ADDSEG_NOSREG);
	SegRename(0X140018000,".rdata");
	SegClass (0X140018000,"DATA");
	SegDefReg(0x140018000,"es",0x0);
	SegDefReg(0x140018000,"ss",0x0);
	SegDefReg(0x140018000,"ds",0x5);
	set_segm_type(0X140018000,3);
	add_segm_ex(0X14001D000,0X14001F000,0X4,2,3,2,ADDSEG_NOSREG);
	SegRename(0X14001D000,".pdata");
	SegClass (0X14001D000,"DATA");
	SegDefReg(0x14001D000,"es",0x0);
	SegDefReg(0x14001D000,"ss",0x0);
	SegDefReg(0x14001D000,"ds",0x5);
	set_segm_type(0X14001D000,3);
	add_segm_ex(0X14001F000,0X14001F6A8,0X5,2,3,2,ADDSEG_NOSREG);
	SegRename(0X14001F000,".data");
	SegClass (0X14001F000,"DATA");
	SegDefReg(0x14001F000,"es",0x0);
	SegDefReg(0x14001F000,"ss",0x0);
	SegDefReg(0x14001F000,"ds",0x5);
	set_segm_type(0X14001F000,3);
	add_segm_ex(0X14001F6A8,0X14001FAF0,0X6,2,3,2,ADDSEG_NOSREG);
	SegRename(0X14001F6A8,".idata");
	SegClass (0X14001F6A8,"XTRN");
	SegDefReg(0x14001F6A8,"es",0x0);
	SegDefReg(0x14001F6A8,"ss",0x0);
	SegDefReg(0x14001F6A8,"ds",0x5);
	set_segm_type(0X14001F6A8,1);
	add_segm_ex(0X14001FAF0,0X140022000,0X5,2,3,2,ADDSEG_NOSREG);
	SegRename(0X14001FAF0,".data");
	SegClass (0X14001FAF0,"DATA");
	SegDefReg(0x14001FAF0,"es",0x0);
	SegDefReg(0x14001FAF0,"ss",0x0);
	SegDefReg(0x14001FAF0,"ds",0x5);
	set_segm_type(0X14001FAF0,3);
	set_inf_attr(INF_LOW_OFF, 0x10000);
	set_inf_attr(INF_HIGH_OFF, 0x7FFDA3E50000);
}

static Enums_0(id) {

	id = add_enum(-1,"z_err",0x1100000);
	add_enum_member(id,"Z_OK",	0,	-1);
	add_enum_member(id,"Z_STREAM_END",	0X1,	-1);
	add_enum_member(id,"Z_NEED_DICT",	0X2,	-1);
	add_enum_member(id,"Z_VERSION_ERROR",	0XFFFFFFFA,	-1);
	add_enum_member(id,"Z_BUF_ERROR",	0XFFFFFFFB,	-1);
	add_enum_member(id,"Z_MEM_ERROR",	0XFFFFFFFC,	-1);
	add_enum_member(id,"Z_DATA_ERROR",	0XFFFFFFFD,	-1);
	add_enum_member(id,"Z_STREAM_ERROR",	0XFFFFFFFE,	-1);
	add_enum_member(id,"Z_ERRNO",	0XFFFFFFFF,	-1);
	id = add_enum(-1,"$7AB06249D41A392A5B80A7864636B0B6",0x1100000);
	add_enum_member(id,"HEAD",	0X3F34,	-1);
	add_enum_member(id,"FLAGS",	0X3F35,	-1);
	add_enum_member(id,"TIME",	0X3F36,	-1);
	add_enum_member(id,"OS",	0X3F37,	-1);
	add_enum_member(id,"EXLEN",	0X3F38,	-1);
	add_enum_member(id,"EXTRA",	0X3F39,	-1);
	add_enum_member(id,"NAME",	0X3F3A,	-1);
	add_enum_member(id,"COMMENT",	0X3F3B,	-1);
	add_enum_member(id,"HCRC",	0X3F3C,	-1);
	add_enum_member(id,"DICTID",	0X3F3D,	-1);
	add_enum_member(id,"DICT",	0X3F3E,	-1);
	add_enum_member(id,"TYPE",	0X3F3F,	-1);
	add_enum_member(id,"TYPEDO",	0X3F40,	-1);
	add_enum_member(id,"STORED",	0X3F41,	-1);
	add_enum_member(id,"COPY_",	0X3F42,	-1);
	add_enum_member(id,"COPY",	0X3F43,	-1);
	add_enum_member(id,"TABLE",	0X3F44,	-1);
	add_enum_member(id,"LENLENS",	0X3F45,	-1);
	add_enum_member(id,"CODELENS",	0X3F46,	-1);
	add_enum_member(id,"LEN_",	0X3F47,	-1);
	add_enum_member(id,"LEN",	0X3F48,	-1);
	add_enum_member(id,"LENEXT",	0X3F49,	-1);
	add_enum_member(id,"DIST",	0X3F4A,	-1);
	add_enum_member(id,"DISTEXT",	0X3F4B,	-1);
	add_enum_member(id,"MATCH",	0X3F4C,	-1);
	add_enum_member(id,"LIT",	0X3F4D,	-1);
	add_enum_member(id,"CHECK",	0X3F4E,	-1);
	add_enum_member(id,"LENGTH",	0X3F4F,	-1);
	add_enum_member(id,"DONE",	0X3F50,	-1);
	add_enum_member(id,"BAD",	0X3F51,	-1);
	add_enum_member(id,"MEM",	0X3F52,	-1);
	add_enum_member(id,"SYNC",	0X3F53,	-1);
	id = add_enum(-1,"inflate_mode",0x1100000);
	set_enum_bf(id,1);
	id = add_enum(-1,"MACRO_STD",0x2220000);
	add_enum_member(id,"STD_ERROR_HANDLE",	0XFFFFFFF4,	-1);
	add_enum_member(id,"STD_OUTPUT_HANDLE",	0XFFFFFFF5,	-1);
	add_enum_member(id,"STD_INPUT_HANDLE",	0XFFFFFFF6,	-1);
	id = add_enum(-1,"MACRO_RT",0x2220000);
	add_enum_member(id,"RT_CURSOR",	0X1,	-1);
	add_enum_member(id,"RT_BITMAP",	0X2,	-1);
	add_enum_member(id,"RT_ICON",	0X3,	-1);
	add_enum_member(id,"RT_MENU",	0X4,	-1);
	add_enum_member(id,"RT_DIALOG",	0X5,	-1);
	add_enum_member(id,"RT_STRING",	0X6,	-1);
	add_enum_member(id,"RT_FONTDIR",	0X7,	-1);
	add_enum_member(id,"RT_FONT",	0X8,	-1);
	add_enum_member(id,"RT_ACCELERATOR",	0X9,	-1);
	add_enum_member(id,"RT_RCDATA",	0XA,	-1);
	add_enum_member(id,"RT_MESSAGETABLE",	0XB,	-1);
	id = add_enum(-1,"MACRO_WT",0x1100000);
	add_enum_member(id,"WT_EXECUTEDEFAULT",	0,	-1);
	add_enum_member(id,"WT_EXECUTEINIOTHREAD",	0X1,	-1);
	add_enum_member(id,"WT_EXECUTEINUITHREAD",	0X2,	-1);
	add_enum_member(id,"WT_EXECUTEINWAITTHREAD",	0X4,	-1);
	add_enum_member(id,"WT_EXECUTEONLYONCE",	0X8,	-1);
	add_enum_member(id,"WT_EXECUTEDELETEWAIT",	0X8,	-1);
	add_enum_member(id,"WT_EXECUTELONGFUNCTION",	0X10,	-1);
	add_enum_member(id,"WT_EXECUTEINLONGTHREAD",	0X10,	-1);
	add_enum_member(id,"WT_EXECUTEINTIMERTHREAD",	0X20,	-1);
	add_enum_member(id,"WT_EXECUTEINPERSISTENTIOTHREAD",	0X40,	-1);
	add_enum_member(id,"WT_EXECUTEINPERSISTENTTHREAD",	0X80,	-1);
	add_enum_member(id,"WT_TRANSFER_IMPERSONATION",	0X100,	-1);
	id = add_enum(-1,"MACRO_GENERIC",0x1100000);
	set_enum_bf(id,1);
	add_enum_member(id,"GENERIC_ALL",	0X10000000,	0x10000000);
	add_enum_member(id,"GENERIC_EXECUTE",	0X20000000,	0x20000000);
	add_enum_member(id,"GENERIC_WRITE",	0X40000000,	0x40000000);
	add_enum_member(id,"GENERIC_READ",	0X80000000,	0x80000000);
	id = add_enum(-1,"MACRO_CREATE_NEW",0x2220000);
	set_enum_bf(id,1);
	add_enum_member(id,"CREATE_NEW",	0X1,	0x1);
	add_enum_member(id,"CREATE_ALWAYS",	0X2,	0x2);
	id = add_enum(-1,"MACRO_OPEN",0x2220000);
	set_enum_bf(id,1);
	add_enum_member(id,"OPEN_EXISTING",	0X3,	0x3);
	add_enum_member(id,"OPEN_ALWAYS",	0X4,	0x4);
	id = add_enum(-1,"MACRO_FILE",0x1100000);
	add_enum_member(id,"FILE_READ_DATA",	0X1,	-1);
	add_enum_member(id,"FILE_LIST_DIRECTORY",	0X1,	-1);
	add_enum_member(id,"FILE_SHARE_READ",	0X1,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_READONLY",	0X1,	-1);
	add_enum_member(id,"FILE_WRITE_DATA",	0X2,	-1);
	add_enum_member(id,"FILE_ADD_FILE",	0X2,	-1);
	add_enum_member(id,"FILE_SHARE_WRITE",	0X2,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_HIDDEN",	0X2,	-1);
	add_enum_member(id,"FILE_APPEND_DATA",	0X4,	-1);
	add_enum_member(id,"FILE_ADD_SUBDIRECTORY",	0X4,	-1);
	add_enum_member(id,"FILE_CREATE_PIPE_INSTANCE",	0X4,	-1);
	add_enum_member(id,"FILE_SHARE_DELETE",	0X4,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_SYSTEM",	0X4,	-1);
	add_enum_member(id,"FILE_READ_EA",	0X8,	-1);
	add_enum_member(id,"FILE_WRITE_EA",	0X10,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_DIRECTORY",	0X10,	-1);
	add_enum_member(id,"FILE_EXECUTE",	0X20,	-1);
	add_enum_member(id,"FILE_TRAVERSE",	0X20,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_ARCHIVE",	0X20,	-1);
	add_enum_member(id,"FILE_DELETE_CHILD",	0X40,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_DEVICE",	0X40,	-1);
	add_enum_member(id,"FILE_READ_ATTRIBUTES",	0X80,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NORMAL",	0X80,	-1);
	add_enum_member(id,"FILE_WRITE_ATTRIBUTES",	0X100,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_TEMPORARY",	0X100,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_SPARSE_FILE",	0X200,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_REPARSE_POINT",	0X400,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_COMPRESSED",	0X800,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_OFFLINE",	0X1000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",	0X2000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_ENCRYPTED",	0X4000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_INTEGRITY_STREAM",	0X8000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_VIRTUAL",	0X10000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_NO_SCRUB_DATA",	0X20000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_EA",	0X40000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_RECALL_ON_OPEN",	0X40000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_PINNED",	0X80000,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_UNPINNED",	0X100000,	-1);
	add_enum_member(id,"FILE_GENERIC_READ",	0X120089,	-1);
	add_enum_member(id,"FILE_GENERIC_EXECUTE",	0X1200A0,	-1);
	add_enum_member(id,"FILE_GENERIC_WRITE",	0X120116,	-1);
	add_enum_member(id,"FILE_ALL_ACCESS",	0X1F01FF,	-1);
	add_enum_member(id,"FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS",	0X400000,	-1);
	id = add_enum(-1,"MACRO_HEAP",0x1100000);
	add_enum_member(id,"HEAP_NO_SERIALIZE",	0X1,	-1);
	add_enum_member(id,"HEAP_GROWABLE",	0X2,	-1);
	add_enum_member(id,"HEAP_GENERATE_EXCEPTIONS",	0X4,	-1);
	add_enum_member(id,"HEAP_ZERO_MEMORY",	0X8,	-1);
	add_enum_member(id,"HEAP_REALLOC_IN_PLACE_ONLY",	0X10,	-1);
	add_enum_member(id,"HEAP_TAG_SHIFT",	0X12,	-1);
	add_enum_member(id,"HEAP_TAIL_CHECKING_ENABLED",	0X20,	-1);
	add_enum_member(id,"HEAP_FREE_CHECKING_ENABLED",	0X40,	-1);
	add_enum_member(id,"HEAP_DISABLE_COALESCE_ON_FREE",	0X80,	-1);
	add_enum_member(id,"HEAP_CREATE_SEGMENT_HEAP",	0X100,	-1);
	add_enum_member(id,"HEAP_CREATE_HARDENED",	0X200,	-1);
	add_enum_member(id,"HEAP_MAXIMUM_TAG",	0XFFF,	-1);
	add_enum_member(id,"HEAP_PSEUDO_TAG_FLAG",	0X8000,	-1);
	add_enum_member(id,"HEAP_CREATE_ALIGN_16",	0X10000,	-1);
	add_enum_member(id,"HEAP_CREATE_ENABLE_TRACING",	0X20000,	-1);
	add_enum_member(id,"HEAP_CREATE_ENABLE_EXECUTE",	0X40000,	-1);
	id = add_enum(-1,"MACRO_EXCEPTION",0x2220000);
	add_enum_member(id,"EXCEPTION_CONTINUE_SEARCH",	0,	-1);
	add_enum_member(id,"EXCEPTION_EXECUTE_HANDLER",	0X1,	-1);
	add_enum_member(id,"EXCEPTION_CONTINUE_EXECUTION",	0XFFFFFFFFFFFFFFFF,	-1);
	id = add_enum(-1,"MACRO_SYSTEM_FIXED",0x2220000);
	add_enum_member(id,"SYSTEM_FIXED_FONT",	0X10,	-1);
	add_enum_member(id,"DEFAULT_GUI_FONT",	0X11,	-1);
	id = add_enum(-1,"MACRO_GWL",0x2220000);
	add_enum_member(id,"GWL_EXSTYLE",	0XFFFFFFFFFFFFFFEC,	-1);
	add_enum_member(id,"GWL_STYLE",	0XFFFFFFFFFFFFFFF0,	-1);
	add_enum_member(id,"GWL_ID",	0XFFFFFFFFFFFFFFF4,	-1);
	id = add_enum(-1,"MACRO_WS",0x1100000);
	add_enum_member(id,"WS_OVERLAPPED",	0,	-1);
	add_enum_member(id,"WS_TILED",	0,	-1);
	add_enum_member(id,"WS_EX_LEFT",	0,	-1);
	add_enum_member(id,"WS_EX_LTRREADING",	0,	-1);
	add_enum_member(id,"WS_EX_RIGHTSCROLLBAR",	0,	-1);
	add_enum_member(id,"WS_EX_DLGMODALFRAME",	0X1,	-1);
	add_enum_member(id,"WS_EX_NOPARENTNOTIFY",	0X4,	-1);
	add_enum_member(id,"WS_EX_TOPMOST",	0X8,	-1);
	add_enum_member(id,"WS_EX_ACCEPTFILES",	0X10,	-1);
	add_enum_member(id,"WS_EX_TRANSPARENT",	0X20,	-1);
	add_enum_member(id,"WS_EX_MDICHILD",	0X40,	-1);
	add_enum_member(id,"WS_EX_TOOLWINDOW",	0X80,	-1);
	add_enum_member(id,"WS_EX_WINDOWEDGE",	0X100,	-1);
	add_enum_member(id,"WS_EX_PALETTEWINDOW",	0X188,	-1);
	add_enum_member(id,"WS_EX_CLIENTEDGE",	0X200,	-1);
	add_enum_member(id,"WS_EX_OVERLAPPEDWINDOW",	0X300,	-1);
	add_enum_member(id,"WS_EX_CONTEXTHELP",	0X400,	-1);
	add_enum_member(id,"WS_EX_RIGHT",	0X1000,	-1);
	add_enum_member(id,"WS_EX_RTLREADING",	0X2000,	-1);
	add_enum_member(id,"WS_EX_LEFTSCROLLBAR",	0X4000,	-1);
	add_enum_member(id,"WS_TABSTOP",	0X10000,	-1);
	add_enum_member(id,"WS_MAXIMIZEBOX",	0X10000,	-1);
	add_enum_member(id,"WS_EX_CONTROLPARENT",	0X10000,	-1);
	add_enum_member(id,"WS_GROUP",	0X20000,	-1);
	add_enum_member(id,"WS_MINIMIZEBOX",	0X20000,	-1);
	add_enum_member(id,"WS_EX_STATICEDGE",	0X20000,	-1);
	add_enum_member(id,"WS_THICKFRAME",	0X40000,	-1);
	add_enum_member(id,"WS_SIZEBOX",	0X40000,	-1);
	add_enum_member(id,"WS_EX_APPWINDOW",	0X40000,	-1);
	add_enum_member(id,"WS_SYSMENU",	0X80000,	-1);
	add_enum_member(id,"WS_EX_LAYERED",	0X80000,	-1);
	add_enum_member(id,"WS_HSCROLL",	0X100000,	-1);
	add_enum_member(id,"WS_EX_NOINHERITLAYOUT",	0X100000,	-1);
	add_enum_member(id,"WS_VSCROLL",	0X200000,	-1);
	add_enum_member(id,"WS_DLGFRAME",	0X400000,	-1);
	add_enum_member(id,"WS_EX_LAYOUTRTL",	0X400000,	-1);
	add_enum_member(id,"WS_BORDER",	0X800000,	-1);
	add_enum_member(id,"WS_CAPTION",	0XC00000,	-1);
	add_enum_member(id,"WS_OVERLAPPEDWINDOW",	0XCF0000,	-1);
	add_enum_member(id,"WS_MAXIMIZE",	0X1000000,	-1);
	add_enum_member(id,"WS_CLIPCHILDREN",	0X2000000,	-1);
	add_enum_member(id,"WS_EX_COMPOSITED",	0X2000000,	-1);
	add_enum_member(id,"WS_CLIPSIBLINGS",	0X4000000,	-1);
	add_enum_member(id,"WS_DISABLED",	0X8000000,	-1);
	add_enum_member(id,"WS_EX_NOACTIVATE",	0X8000000,	-1);
	add_enum_member(id,"WS_VISIBLE",	0X10000000,	-1);
	add_enum_member(id,"WS_MINIMIZE",	0X20000000,	-1);
	add_enum_member(id,"WS_ICONIC",	0X20000000,	-1);
	add_enum_member(id,"WS_CHILD",	0X40000000,	-1);
	add_enum_member(id,"WS_CHILDWINDOW",	0X40000000,	-1);
	add_enum_member(id,"WS_POPUP",	0X80000000,	-1);
	add_enum_member(id,"WS_POPUPWINDOW",	0X80880000,	-1);
	id = add_enum(-1,"MACRO_HWND_TOP",0x2220000);
	add_enum_member(id,"HWND_TOP",	0,	-1);
	add_enum_member(id,"HWND_BOTTOM",	0X1,	-1);
	add_enum_member(id,"HWND_NOTOPMOST",	0XFFFFFFFFFFFFFFFE,	-1);
	add_enum_member(id,"HWND_TOPMOST",	0XFFFFFFFFFFFFFFFF,	-1);
	id = add_enum(-1,"MACRO_SM",0x2220000);
	add_enum_member(id,"SM_CXSCREEN",	0,	-1);
	add_enum_member(id,"SM_CYSCREEN",	0X1,	-1);
	add_enum_member(id,"SM_CXVSCROLL",	0X2,	-1);
	add_enum_member(id,"SM_CYHSCROLL",	0X3,	-1);
	add_enum_member(id,"SM_CYCAPTION",	0X4,	-1);
	add_enum_member(id,"SM_CXBORDER",	0X5,	-1);
	add_enum_member(id,"SM_CYBORDER",	0X6,	-1);
	add_enum_member(id,"SM_CXDLGFRAME",	0X7,	-1);
	add_enum_member(id,"SM_CXFIXEDFRAME",	0X7,	-1);
	add_enum_member(id,"SM_CYDLGFRAME",	0X8,	-1);
	add_enum_member(id,"SM_CYFIXEDFRAME",	0X8,	-1);
	add_enum_member(id,"SM_CYVTHUMB",	0X9,	-1);
	add_enum_member(id,"SM_CXHTHUMB",	0XA,	-1);
	add_enum_member(id,"SM_CXICON",	0XB,	-1);
	add_enum_member(id,"SM_CYICON",	0XC,	-1);
	add_enum_member(id,"SM_CXCURSOR",	0XD,	-1);
	add_enum_member(id,"SM_CYCURSOR",	0XE,	-1);
	add_enum_member(id,"SM_CYMENU",	0XF,	-1);
	add_enum_member(id,"SM_CXFULLSCREEN",	0X10,	-1);
	add_enum_member(id,"SM_CYFULLSCREEN",	0X11,	-1);
	add_enum_member(id,"SM_CYKANJIWINDOW",	0X12,	-1);
	add_enum_member(id,"SM_MOUSEPRESENT",	0X13,	-1);
	add_enum_member(id,"SM_CYVSCROLL",	0X14,	-1);
	add_enum_member(id,"SM_CXHSCROLL",	0X15,	-1);
	add_enum_member(id,"SM_DEBUG",	0X16,	-1);
	add_enum_member(id,"SM_SWAPBUTTON",	0X17,	-1);
	add_enum_member(id,"SM_RESERVED1",	0X18,	-1);
	add_enum_member(id,"SM_RESERVED2",	0X19,	-1);
	add_enum_member(id,"SM_RESERVED3",	0X1A,	-1);
	add_enum_member(id,"SM_RESERVED4",	0X1B,	-1);
	add_enum_member(id,"SM_CXMIN",	0X1C,	-1);
	add_enum_member(id,"SM_CYMIN",	0X1D,	-1);
	add_enum_member(id,"SM_CXSIZE",	0X1E,	-1);
	add_enum_member(id,"SM_CYSIZE",	0X1F,	-1);
	add_enum_member(id,"SM_CXFRAME",	0X20,	-1);
	add_enum_member(id,"SM_CXSIZEFRAME",	0X20,	-1);
	add_enum_member(id,"SM_CYFRAME",	0X21,	-1);
	add_enum_member(id,"SM_CYSIZEFRAME",	0X21,	-1);
	add_enum_member(id,"SM_CXMINTRACK",	0X22,	-1);
	add_enum_member(id,"SM_CYMINTRACK",	0X23,	-1);
	add_enum_member(id,"SM_CXDOUBLECLK",	0X24,	-1);
	add_enum_member(id,"SM_CYDOUBLECLK",	0X25,	-1);
	add_enum_member(id,"SM_CXICONSPACING",	0X26,	-1);
	add_enum_member(id,"SM_CYICONSPACING",	0X27,	-1);
	add_enum_member(id,"SM_MENUDROPALIGNMENT",	0X28,	-1);
	add_enum_member(id,"SM_PENWINDOWS",	0X29,	-1);
	add_enum_member(id,"SM_DBCSENABLED",	0X2A,	-1);
	add_enum_member(id,"SM_CMOUSEBUTTONS",	0X2B,	-1);
	add_enum_member(id,"SM_SECURE",	0X2C,	-1);
	add_enum_member(id,"SM_CXEDGE",	0X2D,	-1);
	add_enum_member(id,"SM_CYEDGE",	0X2E,	-1);
	add_enum_member(id,"SM_CXMINSPACING",	0X2F,	-1);
	add_enum_member(id,"SM_CYMINSPACING",	0X30,	-1);
	add_enum_member(id,"SM_CXSMICON",	0X31,	-1);
	add_enum_member(id,"SM_CYSMICON",	0X32,	-1);
	add_enum_member(id,"SM_CYSMCAPTION",	0X33,	-1);
	add_enum_member(id,"SM_CXSMSIZE",	0X34,	-1);
	add_enum_member(id,"SM_CYSMSIZE",	0X35,	-1);
	add_enum_member(id,"SM_CXMENUSIZE",	0X36,	-1);
	add_enum_member(id,"SM_CYMENUSIZE",	0X37,	-1);
	add_enum_member(id,"SM_ARRANGE",	0X38,	-1);
	add_enum_member(id,"SM_CXMINIMIZED",	0X39,	-1);
	add_enum_member(id,"SM_CYMINIMIZED",	0X3A,	-1);
	add_enum_member(id,"SM_CXMAXTRACK",	0X3B,	-1);
	add_enum_member(id,"SM_CYMAXTRACK",	0X3C,	-1);
	add_enum_member(id,"SM_CXMAXIMIZED",	0X3D,	-1);
	add_enum_member(id,"SM_CYMAXIMIZED",	0X3E,	-1);
	add_enum_member(id,"SM_NETWORK",	0X3F,	-1);
	add_enum_member(id,"SM_CLEANBOOT",	0X43,	-1);
	add_enum_member(id,"SM_CXDRAG",	0X44,	-1);
	add_enum_member(id,"SM_CYDRAG",	0X45,	-1);
	add_enum_member(id,"SM_SHOWSOUNDS",	0X46,	-1);
	add_enum_member(id,"SM_CXMENUCHECK",	0X47,	-1);
	add_enum_member(id,"SM_CYMENUCHECK",	0X48,	-1);
	add_enum_member(id,"SM_SLOWMACHINE",	0X49,	-1);
	add_enum_member(id,"SM_MIDEASTENABLED",	0X4A,	-1);
	add_enum_member(id,"SM_MOUSEWHEELPRESENT",	0X4B,	-1);
	add_enum_member(id,"SM_XVIRTUALSCREEN",	0X4C,	-1);
	add_enum_member(id,"SM_YVIRTUALSCREEN",	0X4D,	-1);
	add_enum_member(id,"SM_CXVIRTUALSCREEN",	0X4E,	-1);
	add_enum_member(id,"SM_CYVIRTUALSCREEN",	0X4F,	-1);
	add_enum_member(id,"SM_CMONITORS",	0X50,	-1);
	add_enum_member(id,"SM_SAMEDISPLAYFORMAT",	0X51,	-1);
	add_enum_member(id,"SM_IMMENABLED",	0X52,	-1);
	add_enum_member(id,"SM_CXFOCUSBORDER",	0X53,	-1);
	add_enum_member(id,"SM_CYFOCUSBORDER",	0X54,	-1);
	add_enum_member(id,"SM_TABLETPC",	0X56,	-1);
	add_enum_member(id,"SM_MEDIACENTER",	0X57,	-1);
	add_enum_member(id,"SM_STARTER",	0X58,	-1);
	add_enum_member(id,"SM_SERVERR2",	0X59,	-1);
	add_enum_member(id,"SM_MOUSEHORIZONTALWHEELPRESENT",	0X5B,	-1);
	add_enum_member(id,"SM_CXPADDEDBORDER",	0X5C,	-1);
	add_enum_member(id,"SM_DIGITIZER",	0X5E,	-1);
	add_enum_member(id,"SM_MAXIMUMTOUCHES",	0X5F,	-1);
	add_enum_member(id,"SM_CMETRICS",	0X61,	-1);
	add_enum_member(id,"SM_REMOTESESSION",	0X1000,	-1);
	add_enum_member(id,"SM_SHUTTINGDOWN",	0X2000,	-1);
	add_enum_member(id,"SM_REMOTECONTROL",	0X2001,	-1);
	add_enum_member(id,"SM_CARETBLINKINGENABLED",	0X2002,	-1);
	id = add_enum(-1,"MACRO_WM",0x1100000);
	add_enum_member(id,"WM_NULL",	0,	-1);
	add_enum_member(id,"WM_CREATE",	0X1,	-1);
	add_enum_member(id,"WM_DESTROY",	0X2,	-1);
	add_enum_member(id,"WM_MOVE",	0X3,	-1);
	add_enum_member(id,"WM_SIZEWAIT",	0X4,	-1);
	add_enum_member(id,"WM_SIZE",	0X5,	-1);
	add_enum_member(id,"WM_ACTIVATE",	0X6,	-1);
	add_enum_member(id,"WM_SETFOCUS",	0X7,	-1);
	add_enum_member(id,"WM_KILLFOCUS",	0X8,	-1);
	add_enum_member(id,"WM_SETVISIBLE",	0X9,	-1);
	add_enum_member(id,"WM_ENABLE",	0XA,	-1);
	add_enum_member(id,"WM_SETREDRAW",	0XB,	-1);
	add_enum_member(id,"WM_SETTEXT",	0XC,	-1);
	add_enum_member(id,"WM_GETTEXT",	0XD,	-1);
	add_enum_member(id,"WM_GETTEXTLENGTH",	0XE,	-1);
	add_enum_member(id,"WM_PAINT",	0XF,	-1);
	add_enum_member(id,"WM_CLOSE",	0X10,	-1);
	add_enum_member(id,"WM_QUERYENDSESSION",	0X11,	-1);
	add_enum_member(id,"WM_QUIT",	0X12,	-1);
	add_enum_member(id,"WM_QUERYOPEN",	0X13,	-1);
	add_enum_member(id,"WM_ERASEBKGND",	0X14,	-1);
	add_enum_member(id,"WM_SYSCOLORCHANGE",	0X15,	-1);
	add_enum_member(id,"WM_ENDSESSION",	0X16,	-1);
	add_enum_member(id,"WM_SYSTEMERROR",	0X17,	-1);
	add_enum_member(id,"WM_SHOWWINDOW",	0X18,	-1);
	add_enum_member(id,"WM_CTLCOLOR",	0X19,	-1);
	add_enum_member(id,"WM_SETTINGCHANGE",	0X1A,	-1);
	add_enum_member(id,"WM_WININICHANGE",	0X1A,	-1);
	add_enum_member(id,"WM_DEVMODECHANGE",	0X1B,	-1);
	add_enum_member(id,"WM_ACTIVATEAPP",	0X1C,	-1);
	add_enum_member(id,"WM_FONTCHANGE",	0X1D,	-1);
	add_enum_member(id,"WM_TIMECHANGE",	0X1E,	-1);
	add_enum_member(id,"WM_CANCELMODE",	0X1F,	-1);
	add_enum_member(id,"WM_SETCURSOR",	0X20,	-1);
	add_enum_member(id,"WM_MOUSEACTIVATE",	0X21,	-1);
	add_enum_member(id,"WM_CHILDACTIVATE",	0X22,	-1);
	add_enum_member(id,"WM_QUEUESYNC",	0X23,	-1);
	add_enum_member(id,"WM_GETMINMAXINFO",	0X24,	-1);
	add_enum_member(id,"WM_LOGOFF",	0X25,	-1);
	add_enum_member(id,"WM_PAINTICON",	0X26,	-1);
	add_enum_member(id,"WM_ICONERASEBKGND",	0X27,	-1);
	add_enum_member(id,"WM_NEXTDLGCTL",	0X28,	-1);
	add_enum_member(id,"WM_ALTTABACTIVE",	0X29,	-1);
	add_enum_member(id,"WM_SPOOLERSTATUS",	0X2A,	-1);
	add_enum_member(id,"WM_DRAWITEM",	0X2B,	-1);
	add_enum_member(id,"WM_MEASUREITEM",	0X2C,	-1);
	add_enum_member(id,"WM_DELETEITEM",	0X2D,	-1);
	add_enum_member(id,"WM_VKEYTOITEM",	0X2E,	-1);
	add_enum_member(id,"WM_CHARTOITEM",	0X2F,	-1);
	add_enum_member(id,"WM_SETFONT",	0X30,	-1);
	add_enum_member(id,"WM_GETFONT",	0X31,	-1);
	add_enum_member(id,"WM_SETHOTKEY",	0X32,	-1);
	add_enum_member(id,"WM_GETHOTKEY",	0X33,	-1);
	add_enum_member(id,"WM_FILESYSCHANGE",	0X34,	-1);
	add_enum_member(id,"WM_ISACTIVEICON",	0X35,	-1);
	add_enum_member(id,"WM_QUERYPARKICON",	0X36,	-1);
	add_enum_member(id,"WM_QUERYDRAGICON",	0X37,	-1);
	add_enum_member(id,"WM_WINHELP",	0X38,	-1);
	add_enum_member(id,"WM_COMPAREITEM",	0X39,	-1);
	add_enum_member(id,"WM_FULLSCREEN",	0X3A,	-1);
	add_enum_member(id,"WM_CLIENTSHUTDOWN",	0X3B,	-1);
	add_enum_member(id,"WM_DDEMLEVENT",	0X3C,	-1);
	add_enum_member(id,"WM_GETOBJECT",	0X3D,	-1);
	add_enum_member(id,"MM_CALCSCROLL",	0X3F,	-1);
	add_enum_member(id,"WM_TESTING",	0X40,	-1);
	add_enum_member(id,"WM_COMPACTING",	0X41,	-1);
	add_enum_member(id,"WM_OTHERWINDOWCREATED",	0X42,	-1);
	add_enum_member(id,"WM_OTHERWINDOWDESTROYED",	0X43,	-1);
	add_enum_member(id,"WM_COMMNOTIFY",	0X44,	-1);
	add_enum_member(id,"WM_MEDIASTATUSCHANGE",	0X45,	-1);
	add_enum_member(id,"WM_WINDOWPOSCHANGING",	0X46,	-1);
	add_enum_member(id,"WM_WINDOWPOSCHANGED",	0X47,	-1);
	add_enum_member(id,"WM_POWER",	0X48,	-1);
	add_enum_member(id,"WM_COPYGLOBALDATA",	0X49,	-1);
	add_enum_member(id,"WM_COPYDATA",	0X4A,	-1);
	add_enum_member(id,"WM_CANCELJOURNAL",	0X4B,	-1);
	add_enum_member(id,"WM_LOGONNOTIFY",	0X4C,	-1);
	add_enum_member(id,"WM_KEYF1",	0X4D,	-1);
	add_enum_member(id,"WM_NOTIFY",	0X4E,	-1);
	add_enum_member(id,"WM_ACCESS_WINDOW",	0X4F,	-1);
	add_enum_member(id,"WM_INPUTLANGCHANGEREQUEST",	0X50,	-1);
	add_enum_member(id,"WM_INPUTLANGCHANGE",	0X51,	-1);
	add_enum_member(id,"WM_TCARD",	0X52,	-1);
	add_enum_member(id,"WM_HELP",	0X53,	-1);
	add_enum_member(id,"WM_USERCHANGED",	0X54,	-1);
	add_enum_member(id,"WM_NOTIFYFORMAT",	0X55,	-1);
	add_enum_member(id,"WM_QM_ACTIVATE",	0X60,	-1);
	add_enum_member(id,"WM_HOOK_DO_CALLBACK",	0X61,	-1);
	add_enum_member(id,"WM_SYSCOPYDATA",	0X62,	-1);
	add_enum_member(id,"WM_FINALDESTROY",	0X70,	-1);
	add_enum_member(id,"WM_MEASUREITEM_CLIENTDATA",	0X71,	-1);
	add_enum_member(id,"WM_CONTEXTMENU",	0X7B,	-1);
	add_enum_member(id,"WM_STYLECHANGING",	0X7C,	-1);
	add_enum_member(id,"WM_STYLECHANGED",	0X7D,	-1);
	add_enum_member(id,"WM_DISPLAYCHANGE",	0X7E,	-1);
	add_enum_member(id,"WM_GETICON",	0X7F,	-1);
	add_enum_member(id,"WM_SETICON",	0X80,	-1);
	add_enum_member(id,"WM_NCCREATE",	0X81,	-1);
	add_enum_member(id,"WM_NCDESTROY",	0X82,	-1);
	add_enum_member(id,"WM_NCCALCSIZE",	0X83,	-1);
	add_enum_member(id,"WM_NCHITTEST",	0X84,	-1);
	add_enum_member(id,"WM_NCPAINT",	0X85,	-1);
	add_enum_member(id,"WM_NCACTIVATE",	0X86,	-1);
	add_enum_member(id,"WM_GETDLGCODE",	0X87,	-1);
	add_enum_member(id,"WM_SYNCPAINT",	0X88,	-1);
	add_enum_member(id,"WM_SYNCTASK",	0X89,	-1);
	add_enum_member(id,"WM_NCMOUSEMOVE",	0XA0,	-1);
	add_enum_member(id,"WM_NCLBUTTONDOWN",	0XA1,	-1);
	add_enum_member(id,"WM_NCLBUTTONUP",	0XA2,	-1);
	add_enum_member(id,"WM_NCLBUTTONDBLCLK",	0XA3,	-1);
	add_enum_member(id,"WM_NCRBUTTONDOWN",	0XA4,	-1);
	add_enum_member(id,"WM_NCRBUTTONUP",	0XA5,	-1);
	add_enum_member(id,"WM_NCRBUTTONDBLCLK",	0XA6,	-1);
	add_enum_member(id,"WM_NCMBUTTONDOWN",	0XA7,	-1);
	add_enum_member(id,"WM_NCMBUTTONUP",	0XA8,	-1);
	add_enum_member(id,"WM_NCMBUTTONDBLCLK",	0XA9,	-1);
	add_enum_member(id,"WM_NCXBUTTONDOWN",	0XAB,	-1);
	add_enum_member(id,"WM_NCXBUTTONUP",	0XAC,	-1);
	add_enum_member(id,"WM_NCXBUTTONDBLCLK",	0XAD,	-1);
	add_enum_member(id,"EM_GETSEL",	0XB0,	-1);
	add_enum_member(id,"EM_SETSEL",	0XB1,	-1);
	add_enum_member(id,"EM_GETRECT",	0XB2,	-1);
	add_enum_member(id,"EM_SETRECT",	0XB3,	-1);
	add_enum_member(id,"EM_SETRECTNP",	0XB4,	-1);
	add_enum_member(id,"EM_SCROLL",	0XB5,	-1);
	add_enum_member(id,"EM_LINESCROLL",	0XB6,	-1);
	add_enum_member(id,"EM_SCROLLCARET",	0XB7,	-1);
	add_enum_member(id,"EM_GETMODIFY",	0XB8,	-1);
	add_enum_member(id,"IE_GETMODIFY",	0XB8,	-1);
	add_enum_member(id,"EM_SETMODIFY",	0XB9,	-1);
	add_enum_member(id,"IE_SETMODIFY",	0XB9,	-1);
	add_enum_member(id,"EM_GETLINECOUNT",	0XBA,	-1);
	add_enum_member(id,"EM_LINEINDEX",	0XBB,	-1);
	add_enum_member(id,"EM_SETHANDLE",	0XBC,	-1);
	add_enum_member(id,"EM_GETHANDLE",	0XBD,	-1);
	add_enum_member(id,"EM_GETTHUMB",	0XBE,	-1);
	add_enum_member(id,"EM_LINELENGTH",	0XC1,	-1);
	add_enum_member(id,"EM_REPLACESEL",	0XC2,	-1);
	add_enum_member(id,"EM_SETFONT",	0XC3,	-1);
	add_enum_member(id,"EM_GETLINE",	0XC4,	-1);
	add_enum_member(id,"EM_LIMITTEXT",	0XC5,	-1);
	add_enum_member(id,"EM_SETLIMITTEXT",	0XC5,	-1);
	add_enum_member(id,"EM_CANUNDO",	0XC6,	-1);
	add_enum_member(id,"IE_CANUNDO",	0XC6,	-1);
	add_enum_member(id,"EM_UNDO",	0XC7,	-1);
	add_enum_member(id,"IE_UNDO",	0XC7,	-1);
	add_enum_member(id,"EM_FMTLINES",	0XC8,	-1);
	add_enum_member(id,"EM_LINEFROMCHAR",	0XC9,	-1);
	add_enum_member(id,"EM_SETWORDBREAK",	0XCA,	-1);
	add_enum_member(id,"EM_SETTABSTOPS",	0XCB,	-1);
	add_enum_member(id,"EM_SETPASSWORDCHAR",	0XCC,	-1);
	add_enum_member(id,"EM_EMPTYUNDOBUFFER",	0XCD,	-1);
	add_enum_member(id,"IE_EMPTYUNDOBUFFER",	0XCD,	-1);
	add_enum_member(id,"EM_GETFIRSTVISIBLELINE",	0XCE,	-1);
	add_enum_member(id,"EM_SETREADONLY",	0XCF,	-1);
	add_enum_member(id,"EM_SETWORDBREAKPROC",	0XD0,	-1);
	add_enum_member(id,"EM_GETWORDBREAKPROC",	0XD1,	-1);
	add_enum_member(id,"EM_GETPASSWORDCHAR",	0XD2,	-1);
	add_enum_member(id,"EM_SETMARGINS",	0XD3,	-1);
	add_enum_member(id,"EM_GETMARGINS",	0XD4,	-1);
	add_enum_member(id,"EM_GETLIMITTEXT",	0XD5,	-1);
	add_enum_member(id,"EM_POSFROMCHAR",	0XD6,	-1);
	add_enum_member(id,"EM_CHARFROMPOS",	0XD7,	-1);
	add_enum_member(id,"EM_SETIMESTATUS",	0XD8,	-1);
	add_enum_member(id,"EM_GETIMESTATUS",	0XD9,	-1);
	add_enum_member(id,"SBM_SETPOS",	0XE0,	-1);
	add_enum_member(id,"SBM_GETPOS",	0XE1,	-1);
	add_enum_member(id,"SBM_SETRANGE",	0XE2,	-1);
	add_enum_member(id,"SBM_GETRANGE",	0XE3,	-1);
	add_enum_member(id,"SBM_ENABLE_ARROWS",	0XE4,	-1);
	add_enum_member(id,"SBM_SETRANGEREDRAW",	0XE6,	-1);
	add_enum_member(id,"SBM_SETSCROLLINFO",	0XE9,	-1);
	add_enum_member(id,"SBM_GETSCROLLINFO",	0XEA,	-1);
	add_enum_member(id,"SBM_GETSCROLLBARINFO",	0XEB,	-1);
	add_enum_member(id,"BM_GETCHECK",	0XF0,	-1);
	add_enum_member(id,"BM_SETCHECK",	0XF1,	-1);
	add_enum_member(id,"BM_GETSTATE",	0XF2,	-1);
	add_enum_member(id,"BM_SETSTATE",	0XF3,	-1);
	add_enum_member(id,"BM_SETSTYLE",	0XF4,	-1);
	add_enum_member(id,"BM_CLICK",	0XF5,	-1);
	add_enum_member(id,"BM_GETIMAGE",	0XF6,	-1);
	add_enum_member(id,"BM_SETIMAGE",	0XF7,	-1);
	add_enum_member(id,"BM_SETDONTCLICK",	0XF8,	-1);
	add_enum_member(id,"WM_INPUT_DEVICE_CHANGE",	0XFE,	-1);
	add_enum_member(id,"WM_INPUT",	0XFF,	-1);
	add_enum_member(id,"WM_KEYDOWN",	0X100,	-1);
	add_enum_member(id,"WM_KEYFIRST",	0X100,	-1);
	add_enum_member(id,"WM_KEYUP",	0X101,	-1);
	add_enum_member(id,"WM_CHAR",	0X102,	-1);
	add_enum_member(id,"WM_DEADCHAR",	0X103,	-1);
	add_enum_member(id,"WM_SYSKEYDOWN",	0X104,	-1);
	add_enum_member(id,"WM_SYSKEYUP",	0X105,	-1);
	add_enum_member(id,"WM_SYSCHAR",	0X106,	-1);
	add_enum_member(id,"WM_SYSDEADCHAR",	0X107,	-1);
	add_enum_member(id,"WM_YOMICHAR",	0X108,	-1);
	add_enum_member(id,"WM_KEYLAST",	0X109,	-1);
	add_enum_member(id,"WM_UNICHAR",	0X109,	-1);
	add_enum_member(id,"WM_WNT_CONVERTREQUESTEX",	0X109,	-1);
	add_enum_member(id,"WM_CONVERTREQUEST",	0X10A,	-1);
	add_enum_member(id,"WM_CONVERTRESULT",	0X10B,	-1);
	add_enum_member(id,"WM_INTERIM",	0X10C,	-1);
	add_enum_member(id,"WM_IM_INFO",	0X10C,	-1);
	add_enum_member(id,"WM_IME_STARTCOMPOSITION",	0X10D,	-1);
	add_enum_member(id,"WM_IME_ENDCOMPOSITION",	0X10E,	-1);
	add_enum_member(id,"WM_IME_COMPOSITION",	0X10F,	-1);
	add_enum_member(id,"WM_IME_KEYLAST",	0X10F,	-1);
	add_enum_member(id,"WM_INITDIALOG",	0X110,	-1);
	add_enum_member(id,"WM_COMMAND",	0X111,	-1);
	add_enum_member(id,"WM_SYSCOMMAND",	0X112,	-1);
	add_enum_member(id,"WM_TIMER",	0X113,	-1);
	add_enum_member(id,"WM_HSCROLL",	0X114,	-1);
	add_enum_member(id,"WM_VSCROLL",	0X115,	-1);
	add_enum_member(id,"WM_INITMENU",	0X116,	-1);
	add_enum_member(id,"WM_INITMENUPOPUP",	0X117,	-1);
	add_enum_member(id,"WM_SYSTIMER",	0X118,	-1);
	add_enum_member(id,"WM_GESTURE",	0X119,	-1);
	add_enum_member(id,"WM_GESTURENOTIFY",	0X11A,	-1);
	add_enum_member(id,"WM_MENUSELECT",	0X11F,	-1);
	add_enum_member(id,"WM_MENUCHAR",	0X120,	-1);
	add_enum_member(id,"WM_ENTERIDLE",	0X121,	-1);
	add_enum_member(id,"WM_MENURBUTTONUP",	0X122,	-1);
	add_enum_member(id,"WM_MENUDRAG",	0X123,	-1);
	add_enum_member(id,"WM_MENUGETOBJECT",	0X124,	-1);
	add_enum_member(id,"WM_UNINITMENUPOPUP",	0X125,	-1);
	add_enum_member(id,"WM_MENUCOMMAND",	0X126,	-1);
	add_enum_member(id,"WM_CHANGEUISTATE",	0X127,	-1);
	add_enum_member(id,"WM_UPDATEUISTATE",	0X128,	-1);
	add_enum_member(id,"WM_QUERYUISTATE",	0X129,	-1);
	add_enum_member(id,"WM_LBTRACKPOINT",	0X131,	-1);
	add_enum_member(id,"WM_CTLCOLORMSGBOX",	0X132,	-1);
	add_enum_member(id,"WM_CTLCOLOREDIT",	0X133,	-1);
	add_enum_member(id,"WM_CTLCOLORLISTBOX",	0X134,	-1);
	add_enum_member(id,"WM_CTLCOLORBTN",	0X135,	-1);
	add_enum_member(id,"WM_CTLCOLORDLG",	0X136,	-1);
	add_enum_member(id,"WM_CTLCOLORSCROLLBAR",	0X137,	-1);
	add_enum_member(id,"WM_CTLCOLORSTATIC",	0X138,	-1);
	add_enum_member(id,"CB_GETEDITSEL",	0X140,	-1);
	add_enum_member(id,"CB_LIMITTEXT",	0X141,	-1);
	add_enum_member(id,"CB_SETEDITSEL",	0X142,	-1);
	add_enum_member(id,"CB_ADDSTRING",	0X143,	-1);
	add_enum_member(id,"CB_DELETESTRING",	0X144,	-1);
	add_enum_member(id,"CBEM_DELETEITEM",	0X144,	-1);
	add_enum_member(id,"CB_DIR",	0X145,	-1);
	add_enum_member(id,"CB_GETCOUNT",	0X146,	-1);
	add_enum_member(id,"CB_GETCURSEL",	0X147,	-1);
	add_enum_member(id,"CB_GETLBTEXT",	0X148,	-1);
	add_enum_member(id,"CB_GETLBTEXTLEN",	0X149,	-1);
	add_enum_member(id,"CB_INSERTSTRING",	0X14A,	-1);
	add_enum_member(id,"CB_RESETCONTENT",	0X14B,	-1);
	add_enum_member(id,"CB_FINDSTRING",	0X14C,	-1);
	add_enum_member(id,"CB_SELECTSTRING",	0X14D,	-1);
	add_enum_member(id,"CB_SETCURSEL",	0X14E,	-1);
	add_enum_member(id,"CB_SHOWDROPDOWN",	0X14F,	-1);
	add_enum_member(id,"CB_GETITEMDATA",	0X150,	-1);
	add_enum_member(id,"CB_SETITEMDATA",	0X151,	-1);
	add_enum_member(id,"CB_GETDROPPEDCONTROLRECT",	0X152,	-1);
	add_enum_member(id,"CB_SETITEMHEIGHT",	0X153,	-1);
	add_enum_member(id,"CB_GETITEMHEIGHT",	0X154,	-1);
	add_enum_member(id,"CB_SETEXTENDEDUI",	0X155,	-1);
	add_enum_member(id,"CB_GETEXTENDEDUI",	0X156,	-1);
	add_enum_member(id,"CB_GETDROPPEDSTATE",	0X157,	-1);
	add_enum_member(id,"CB_FINDSTRINGEXACT",	0X158,	-1);
	add_enum_member(id,"CB_SETLOCALE",	0X159,	-1);
	add_enum_member(id,"CB_GETLOCALE",	0X15A,	-1);
	add_enum_member(id,"CB_GETTOPINDEX",	0X15B,	-1);
	add_enum_member(id,"CB_SETTOPINDEX",	0X15C,	-1);
	add_enum_member(id,"CB_GETHORIZONTALEXTENT",	0X15D,	-1);
	add_enum_member(id,"CB_SETHORIZONTALEXTENT",	0X15E,	-1);
	add_enum_member(id,"CB_GETDROPPEDWIDTH",	0X15F,	-1);
	add_enum_member(id,"CB_SETDROPPEDWIDTH",	0X160,	-1);
	add_enum_member(id,"CB_INITSTORAGE",	0X161,	-1);
	add_enum_member(id,"CB_MULTIPLEADDSTRING",	0X163,	-1);
	add_enum_member(id,"CB_GETCOMBOBOXINFO",	0X164,	-1);
	add_enum_member(id,"STM_SETICON",	0X170,	-1);
	add_enum_member(id,"STM_GETICON",	0X171,	-1);
	add_enum_member(id,"STM_SETIMAGE",	0X172,	-1);
	add_enum_member(id,"STM_GETIMAGE",	0X173,	-1);
	add_enum_member(id,"STM_MSGMAX",	0X174,	-1);
	add_enum_member(id,"LB_ADDSTRING",	0X180,	-1);
	add_enum_member(id,"LB_INSERTSTRING",	0X181,	-1);
	add_enum_member(id,"LB_DELETESTRING",	0X182,	-1);
	add_enum_member(id,"LB_SELITEMRANGEEX",	0X183,	-1);
	add_enum_member(id,"LB_RESETCONTENT",	0X184,	-1);
	add_enum_member(id,"LB_SETSEL",	0X185,	-1);
	add_enum_member(id,"LB_SETCURSEL",	0X186,	-1);
	add_enum_member(id,"LB_GETSEL",	0X187,	-1);
	add_enum_member(id,"LB_GETCURSEL",	0X188,	-1);
	add_enum_member(id,"LB_GETTEXT",	0X189,	-1);
	add_enum_member(id,"LB_GETTEXTLEN",	0X18A,	-1);
	add_enum_member(id,"LB_GETCOUNT",	0X18B,	-1);
	add_enum_member(id,"LB_SELECTSTRING",	0X18C,	-1);
	add_enum_member(id,"LB_DIR",	0X18D,	-1);
	add_enum_member(id,"LB_GETTOPINDEX",	0X18E,	-1);
	add_enum_member(id,"LB_FINDSTRING",	0X18F,	-1);
	add_enum_member(id,"LB_GETSELCOUNT",	0X190,	-1);
	add_enum_member(id,"LB_GETSELITEMS",	0X191,	-1);
	add_enum_member(id,"LB_SETTABSTOPS",	0X192,	-1);
	add_enum_member(id,"LB_GETHORIZONTALEXTENT",	0X193,	-1);
	add_enum_member(id,"LB_SETHORIZONTALEXTENT",	0X194,	-1);
	add_enum_member(id,"LB_SETCOLUMNWIDTH",	0X195,	-1);
	add_enum_member(id,"LB_ADDFILE",	0X196,	-1);
	add_enum_member(id,"LB_SETTOPINDEX",	0X197,	-1);
	add_enum_member(id,"LB_GETITEMRECT",	0X198,	-1);
	add_enum_member(id,"LB_GETITEMDATA",	0X199,	-1);
	add_enum_member(id,"LB_SETITEMDATA",	0X19A,	-1);
	add_enum_member(id,"LB_SELITEMRANGE",	0X19B,	-1);
	add_enum_member(id,"LB_SETANCHORINDEX",	0X19C,	-1);
	add_enum_member(id,"LB_GETANCHORINDEX",	0X19D,	-1);
	add_enum_member(id,"LB_SETCARETINDEX",	0X19E,	-1);
	add_enum_member(id,"LB_GETCARETINDEX",	0X19F,	-1);
	add_enum_member(id,"LB_SETITEMHEIGHT",	0X1A0,	-1);
	add_enum_member(id,"LB_GETITEMHEIGHT",	0X1A1,	-1);
	add_enum_member(id,"LB_FINDSTRINGEXACT",	0X1A2,	-1);
	add_enum_member(id,"LBCB_CARETON",	0X1A3,	-1);
	add_enum_member(id,"LBCB_CARETOFF",	0X1A4,	-1);
	add_enum_member(id,"LB_SETLOCALE",	0X1A5,	-1);
	add_enum_member(id,"LB_GETLOCALE",	0X1A6,	-1);
	add_enum_member(id,"LB_SETCOUNT",	0X1A7,	-1);
	add_enum_member(id,"LB_INITSTORAGE",	0X1A8,	-1);
	add_enum_member(id,"LB_ITEMFROMPOINT",	0X1A9,	-1);
	add_enum_member(id,"LB_INSERTSTRINGUPPER",	0X1AA,	-1);
	add_enum_member(id,"LB_INSERTSTRINGLOWER",	0X1AB,	-1);
	add_enum_member(id,"LB_ADDSTRINGUPPER",	0X1AC,	-1);
	add_enum_member(id,"LB_ADDSTRINGLOWER",	0X1AD,	-1);
	add_enum_member(id,"LB_MULTIPLEADDSTRING",	0X1B1,	-1);
	add_enum_member(id,"LB_GETLISTBOXINFO",	0X1B2,	-1);
	add_enum_member(id,"MN_SETHMENU",	0X1E0,	-1);
	add_enum_member(id,"MN_GETHMENU",	0X1E1,	-1);
	add_enum_member(id,"MN_SIZEWINDOW",	0X1E2,	-1);
	add_enum_member(id,"MN_OPENHIERARCHY",	0X1E3,	-1);
	add_enum_member(id,"MN_CLOSEHIERARCHY",	0X1E4,	-1);
	add_enum_member(id,"MN_SELECTITEM",	0X1E5,	-1);
	add_enum_member(id,"MN_CANCELMENUS",	0X1E6,	-1);
	add_enum_member(id,"MN_SELECTFIRSTVALIDITEM",	0X1E7,	-1);
	add_enum_member(id,"MN_GETPPOPUPMENU",	0X1EA,	-1);
	add_enum_member(id,"MN_FINDMENUWINDOWFROMPOINT",	0X1EB,	-1);
	add_enum_member(id,"MN_SHOWPOPUPWINDOW",	0X1EC,	-1);
	add_enum_member(id,"MN_BUTTONDOWN",	0X1ED,	-1);
	add_enum_member(id,"MN_MOUSEMOVE",	0X1EE,	-1);
	add_enum_member(id,"MN_BUTTONUP",	0X1EF,	-1);
	add_enum_member(id,"MN_SETTIMERTOOPENHIERARCHY",	0X1F0,	-1);
	add_enum_member(id,"MN_DBLCLK",	0X1F1,	-1);
	add_enum_member(id,"WM_MOUSEFIRST",	0X200,	-1);
	add_enum_member(id,"WM_MOUSEMOVE",	0X200,	-1);
	add_enum_member(id,"WM_LBUTTONDOWN",	0X201,	-1);
	add_enum_member(id,"WM_LBUTTONUP",	0X202,	-1);
	add_enum_member(id,"WM_LBUTTONDBLCLK",	0X203,	-1);
	add_enum_member(id,"WM_RBUTTONDOWN",	0X204,	-1);
	add_enum_member(id,"WM_RBUTTONUP",	0X205,	-1);
	add_enum_member(id,"WM_RBUTTONDBLCLK",	0X206,	-1);
	add_enum_member(id,"WM_MBUTTONDOWN",	0X207,	-1);
	add_enum_member(id,"WM_MBUTTONUP",	0X208,	-1);
	add_enum_member(id,"WM_MBUTTONDBLCLK",	0X209,	-1);
	add_enum_member(id,"WM_MOUSEWHEEL",	0X20A,	-1);
	add_enum_member(id,"WM_XBUTTONDOWN",	0X20B,	-1);
	add_enum_member(id,"WM_XBUTTONUP",	0X20C,	-1);
	add_enum_member(id,"WM_XBUTTONDBLCLK",	0X20D,	-1);
	add_enum_member(id,"WM_MOUSELAST",	0X20E,	-1);
	add_enum_member(id,"WM_MOUSEHWHEEL",	0X20E,	-1);
	add_enum_member(id,"WM_PARENTNOTIFY",	0X210,	-1);
	add_enum_member(id,"WM_ENTERMENULOOP",	0X211,	-1);
	add_enum_member(id,"WM_EXITMENULOOP",	0X212,	-1);
	add_enum_member(id,"WM_NEXTMENU",	0X213,	-1);
	add_enum_member(id,"WM_SIZING",	0X214,	-1);
	add_enum_member(id,"WM_CAPTURECHANGED",	0X215,	-1);
	add_enum_member(id,"WM_MOVING",	0X216,	-1);
	add_enum_member(id,"WM_POWERBROADCAST",	0X218,	-1);
	add_enum_member(id,"WM_DEVICECHANGE",	0X219,	-1);
	add_enum_member(id,"WM_MDICREATE",	0X220,	-1);
	add_enum_member(id,"WM_MDIDESTROY",	0X221,	-1);
	add_enum_member(id,"WM_MDIACTIVATE",	0X222,	-1);
	add_enum_member(id,"WM_MDIRESTORE",	0X223,	-1);
	add_enum_member(id,"WM_MDINEXT",	0X224,	-1);
	add_enum_member(id,"WM_MDIMAXIMIZE",	0X225,	-1);
	add_enum_member(id,"WM_MDITILE",	0X226,	-1);
	add_enum_member(id,"WM_MDICASCADE",	0X227,	-1);
	add_enum_member(id,"WM_MDIICONARRANGE",	0X228,	-1);
	add_enum_member(id,"WM_MDIGETACTIVE",	0X229,	-1);
	add_enum_member(id,"WM_DROPOBJECT",	0X22A,	-1);
	add_enum_member(id,"WM_QUERYDROPOBJECT",	0X22B,	-1);
	add_enum_member(id,"WM_BEGINDRAG",	0X22C,	-1);
	add_enum_member(id,"WM_DRAGLOOP",	0X22D,	-1);
	add_enum_member(id,"WM_DRAGSELECT",	0X22E,	-1);
	add_enum_member(id,"WM_DRAGMOVE",	0X22F,	-1);
	add_enum_member(id,"WM_MDISETMENU",	0X230,	-1);
	add_enum_member(id,"WM_ENTERSIZEMOVE",	0X231,	-1);
	add_enum_member(id,"WM_EXITSIZEMOVE",	0X232,	-1);
	add_enum_member(id,"WM_DROPFILES",	0X233,	-1);
	add_enum_member(id,"WM_MDIREFRESHMENU",	0X234,	-1);
	add_enum_member(id,"WM_POINTERDEVICECHANGE",	0X238,	-1);
	add_enum_member(id,"WM_POINTERDEVICEINRANGE",	0X239,	-1);
	add_enum_member(id,"WM_POINTERDEVICEOUTOFRANGE",	0X23A,	-1);
	add_enum_member(id,"WM_TOUCH",	0X240,	-1);
	add_enum_member(id,"WM_NCPOINTERUPDATE",	0X241,	-1);
	add_enum_member(id,"WM_NCPOINTERDOWN",	0X242,	-1);
	add_enum_member(id,"WM_NCPOINTERUP",	0X243,	-1);
	add_enum_member(id,"WM_POINTERUPDATE",	0X245,	-1);
	add_enum_member(id,"WM_POINTERDOWN",	0X246,	-1);
	add_enum_member(id,"WM_POINTERUP",	0X247,	-1);
	add_enum_member(id,"WM_POINTERENTER",	0X249,	-1);
	add_enum_member(id,"WM_POINTERLEAVE",	0X24A,	-1);
	add_enum_member(id,"WM_POINTERACTIVATE",	0X24B,	-1);
	add_enum_member(id,"WM_POINTERCAPTURECHANGED",	0X24C,	-1);
	add_enum_member(id,"WM_TOUCHHITTESTING",	0X24D,	-1);
	add_enum_member(id,"WM_POINTERWHEEL",	0X24E,	-1);
	add_enum_member(id,"WM_POINTERHWHEEL",	0X24F,	-1);
	add_enum_member(id,"WM_POINTERROUTEDTO",	0X251,	-1);
	add_enum_member(id,"WM_POINTERROUTEDAWAY",	0X252,	-1);
	add_enum_member(id,"WM_POINTERROUTEDRELEASED",	0X253,	-1);
	add_enum_member(id,"WM_IME_REPORT",	0X280,	-1);
	add_enum_member(id,"WM_HANGEULFIRST",	0X280,	-1);
	add_enum_member(id,"WM_KANJIFIRST",	0X280,	-1);
	add_enum_member(id,"WM_IME_SETCONTEXT",	0X281,	-1);
	add_enum_member(id,"WM_IME_NOTIFY",	0X282,	-1);
	add_enum_member(id,"WM_IME_CONTROL",	0X283,	-1);
	add_enum_member(id,"WM_IME_COMPOSITIONFULL",	0X284,	-1);
	add_enum_member(id,"WM_IME_SELECT",	0X285,	-1);
	add_enum_member(id,"WM_IME_CHAR",	0X286,	-1);
	add_enum_member(id,"WM_IME_SYSTEM",	0X287,	-1);
	add_enum_member(id,"WM_IME_REQUEST",	0X288,	-1);
	add_enum_member(id,"WM_IMEKEYDOWN",	0X290,	-1);
	add_enum_member(id,"WM_IME_KEYDOWN",	0X290,	-1);
	add_enum_member(id,"WM_IMEKEYUP",	0X291,	-1);
	add_enum_member(id,"WM_IME_KEYUP",	0X291,	-1);
	add_enum_member(id,"WM_HANGEULLAST",	0X29F,	-1);
	add_enum_member(id,"WM_KANJILAST",	0X29F,	-1);
	add_enum_member(id,"WM_NCMOUSEHOVER",	0X2A0,	-1);
	add_enum_member(id,"WM_MOUSEHOVER",	0X2A1,	-1);
	add_enum_member(id,"WM_NCMOUSELEAVE",	0X2A2,	-1);
	add_enum_member(id,"WM_MOUSELEAVE",	0X2A3,	-1);
	add_enum_member(id,"WM_TRACKMOUSEEVENT_LAST",	0X2AF,	-1);
	add_enum_member(id,"WM_WTSSESSION_CHANGE",	0X2B1,	-1);
	add_enum_member(id,"WM_TABLET_FIRST",	0X2C0,	-1);
	add_enum_member(id,"WM_TABLET_ADDED",	0X2C8,	-1);
	add_enum_member(id,"WM_TABLET_DELETED",	0X2C9,	-1);
	add_enum_member(id,"WM_TABLET_FLICK",	0X2CB,	-1);
	add_enum_member(id,"WM_TABLET_QUERYSYSTEMGESTURESTATUS",	0X2CC,	-1);
	add_enum_member(id,"WM_TABLET_LAST",	0X2DF,	-1);
	add_enum_member(id,"WM_DPICHANGED",	0X2E0,	-1);
	add_enum_member(id,"WM_DPICHANGED_BEFOREPARENT",	0X2E2,	-1);
	add_enum_member(id,"WM_DPICHANGED_AFTERPARENT",	0X2E3,	-1);
	add_enum_member(id,"WM_GETDPISCALEDSIZE",	0X2E4,	-1);
	add_enum_member(id,"WM_CUT",	0X300,	-1);
	add_enum_member(id,"WM_COPY",	0X301,	-1);
	add_enum_member(id,"WM_PASTE",	0X302,	-1);
	add_enum_member(id,"WM_CLEAR",	0X303,	-1);
	add_enum_member(id,"WM_UNDO",	0X304,	-1);
	add_enum_member(id,"WM_RENDERFORMAT",	0X305,	-1);
	add_enum_member(id,"WM_RENDERALLFORMATS",	0X306,	-1);
	add_enum_member(id,"WM_DESTROYCLIPBOARD",	0X307,	-1);
	add_enum_member(id,"WM_DRAWCLIPBOARD",	0X308,	-1);
	add_enum_member(id,"WM_PAINTCLIPBOARD",	0X309,	-1);
	add_enum_member(id,"WM_VSCROLLCLIPBOARD",	0X30A,	-1);
	add_enum_member(id,"WM_SIZECLIPBOARD",	0X30B,	-1);
	add_enum_member(id,"WM_ASKCBFORMATNAME",	0X30C,	-1);
	add_enum_member(id,"WM_CHANGECBCHAIN",	0X30D,	-1);
	add_enum_member(id,"WM_HSCROLLCLIPBOARD",	0X30E,	-1);
	add_enum_member(id,"WM_QUERYNEWPALETTE",	0X30F,	-1);
	add_enum_member(id,"WM_PALETTEISCHANGING",	0X310,	-1);
	add_enum_member(id,"WM_PALETTECHANGED",	0X311,	-1);
	add_enum_member(id,"WM_HOTKEY",	0X312,	-1);
	add_enum_member(id,"WM_SYSMENU",	0X313,	-1);
	add_enum_member(id,"WM_HOOKMSG",	0X314,	-1);
	add_enum_member(id,"WM_EXITPROCESS",	0X315,	-1);
	add_enum_member(id,"WM_WAKETHREAD",	0X316,	-1);
	add_enum_member(id,"WM_PRINT",	0X317,	-1);
	add_enum_member(id,"WM_PRINTCLIENT",	0X318,	-1);
	add_enum_member(id,"WM_APPCOMMAND",	0X319,	-1);
	add_enum_member(id,"WM_THEMECHANGED",	0X31A,	-1);
	add_enum_member(id,"WM_CLIPBOARDUPDATE",	0X31D,	-1);
	add_enum_member(id,"WM_DWMCOMPOSITIONCHANGED",	0X31E,	-1);
	add_enum_member(id,"WM_DWMNCRENDERINGCHANGED",	0X31F,	-1);
	add_enum_member(id,"WM_DWMCOLORIZATIONCOLORCHANGED",	0X320,	-1);
	add_enum_member(id,"WM_DWMWINDOWMAXIMIZEDCHANGE",	0X321,	-1);
	add_enum_member(id,"WM_DWMSENDICONICTHUMBNAIL",	0X323,	-1);
	add_enum_member(id,"WM_DWMSENDICONICLIVEPREVIEWBITMAP",	0X326,	-1);
	add_enum_member(id,"WM_GETTITLEBARINFOEX",	0X33F,	-1);
	add_enum_member(id,"WM_HANDHELDFIRST",	0X358,	-1);
	add_enum_member(id,"WM_HANDHELDLAST",	0X35F,	-1);
	add_enum_member(id,"WM_AFXFIRST",	0X360,	-1);
	add_enum_member(id,"WM_AFXLAST",	0X37F,	-1);
	add_enum_member(id,"WM_PENWINFIRST",	0X380,	-1);
	add_enum_member(id,"WM_RCRESULT",	0X381,	-1);
	add_enum_member(id,"WM_HOOKRCRESULT",	0X382,	-1);
	add_enum_member(id,"WM_GLOBALRCCHANGE",	0X383,	-1);
	add_enum_member(id,"WM_PENMISCINFO",	0X383,	-1);
	add_enum_member(id,"WM_SKB",	0X384,	-1);
	add_enum_member(id,"WM_HEDITCTL",	0X385,	-1);
	add_enum_member(id,"WM_PENCTL",	0X385,	-1);
	add_enum_member(id,"WM_PENMISC",	0X386,	-1);
	add_enum_member(id,"WM_CTLINIT",	0X387,	-1);
	add_enum_member(id,"WM_PENEVENT",	0X388,	-1);
	add_enum_member(id,"WM_PENWINLAST",	0X38F,	-1);
	add_enum_member(id,"WM_INTERNAL_COALESCE_FIRST",	0X390,	-1);
	add_enum_member(id,"WM_COALESCE_FIRST",	0X390,	-1);
	add_enum_member(id,"WM_COALESCE_LAST",	0X39F,	-1);
	add_enum_member(id,"WM_MM_RESERVED_FIRST",	0X3A0,	-1);
	add_enum_member(id,"WM_INTERNAL_COALESCE_LAST",	0X3B0,	-1);
	add_enum_member(id,"WM_MM_RESERVED_LAST",	0X3DF,	-1);
	add_enum_member(id,"WM_DDE_INITIATE",	0X3E0,	-1);
	add_enum_member(id,"WM_DDE_FIRST",	0X3E0,	-1);
	add_enum_member(id,"WM_DDE_TERMINATE",	0X3E1,	-1);
	add_enum_member(id,"WM_DDE_ADVISE",	0X3E2,	-1);
	add_enum_member(id,"WM_DDE_UNADVISE",	0X3E3,	-1);
	add_enum_member(id,"WM_DDE_ACK",	0X3E4,	-1);
	add_enum_member(id,"WM_DDE_DATA",	0X3E5,	-1);
	add_enum_member(id,"WM_DDE_REQUEST",	0X3E6,	-1);
	add_enum_member(id,"WM_DDE_POKE",	0X3E7,	-1);
	add_enum_member(id,"WM_DDE_EXECUTE",	0X3E8,	-1);
	add_enum_member(id,"WM_DDE_LAST",	0X3E8,	-1);
	add_enum_member(id,"WM_DBNOTIFICATION",	0X3FD,	-1);
	add_enum_member(id,"WM_NETCONNECT",	0X3FE,	-1);
	add_enum_member(id,"WM_HIBERNATE",	0X3FF,	-1);
	add_enum_member(id,"WM_USER",	0X400,	-1);
	add_enum_member(id,"DDM_SETFMT",	0X400,	-1);
	add_enum_member(id,"DM_GETDEFID",	0X400,	-1);
	add_enum_member(id,"NIN_SELECT",	0X400,	-1);
	add_enum_member(id,"TBM_GETPOS",	0X400,	-1);
	add_enum_member(id,"WM_PSD_PAGESETUPDLG",	0X400,	-1);
	add_enum_member(id,"WM_CAP_START",	0X400,	-1);
	add_enum_member(id,"DDM_DRAW",	0X401,	-1);
	add_enum_member(id,"DM_SETDEFID",	0X401,	-1);
	add_enum_member(id,"NIN_KEYSELECT",	0X401,	-1);
	add_enum_member(id,"TBM_GETRANGEMIN",	0X401,	-1);
	add_enum_member(id,"WM_PSD_FULLPAGERECT",	0X401,	-1);
	add_enum_member(id,"WM_CHOOSEFONT_GETLOGFONT",	0X401,	-1);
	add_enum_member(id,"HKM_SETHOTKEY",	0X401,	-1);
	add_enum_member(id,"PBM_SETRANGE",	0X401,	-1);
	add_enum_member(id,"RB_INSERTBANDA",	0X401,	-1);
	add_enum_member(id,"CBEM_INSERTITEMA",	0X401,	-1);
	add_enum_member(id,"SB_SETTEXTA",	0X401,	-1);
	add_enum_member(id,"TTM_ACTIVATE",	0X401,	-1);
	add_enum_member(id,"TB_ENABLEBUTTON",	0X401,	-1);
	add_enum_member(id,"WM_CAP_GET_CAPSTREAMPTR",	0X401,	-1);
	add_enum_member(id,"DDM_CLOSE",	0X402,	-1);
	add_enum_member(id,"DM_REPOSITION",	0X402,	-1);
	add_enum_member(id,"NIN_BALLOONSHOW",	0X402,	-1);
	add_enum_member(id,"TBM_GETRANGEMAX",	0X402,	-1);
	add_enum_member(id,"WM_PSD_MINMARGINRECT",	0X402,	-1);
	add_enum_member(id,"HKM_GETHOTKEY",	0X402,	-1);
	add_enum_member(id,"PBM_SETPOS",	0X402,	-1);
	add_enum_member(id,"RB_DELETEBAND",	0X402,	-1);
	add_enum_member(id,"CBEM_SETIMAGELIST",	0X402,	-1);
	add_enum_member(id,"SB_GETTEXTA",	0X402,	-1);
	add_enum_member(id,"TB_CHECKBUTTON",	0X402,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_ERRORA",	0X402,	-1);
	add_enum_member(id,"DDM_BEGIN",	0X403,	-1);
	add_enum_member(id,"NIN_BALLOONHIDE",	0X403,	-1);
	add_enum_member(id,"TBM_GETTIC",	0X403,	-1);
	add_enum_member(id,"WM_PSD_MARGINRECT",	0X403,	-1);
	add_enum_member(id,"HKM_SETRULES",	0X403,	-1);
	add_enum_member(id,"PBM_DELTAPOS",	0X403,	-1);
	add_enum_member(id,"RB_GETBARINFO",	0X403,	-1);
	add_enum_member(id,"CBEM_GETIMAGELIST",	0X403,	-1);
	add_enum_member(id,"SB_GETTEXTLENGTHA",	0X403,	-1);
	add_enum_member(id,"TTM_SETDELAYTIME",	0X403,	-1);
	add_enum_member(id,"TB_PRESSBUTTON",	0X403,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_STATUSA",	0X403,	-1);
	add_enum_member(id,"DDM_END",	0X404,	-1);
	add_enum_member(id,"NIN_BALLOONTIMEOUT",	0X404,	-1);
	add_enum_member(id,"TBM_SETTIC",	0X404,	-1);
	add_enum_member(id,"WM_PSD_GREEKTEXTRECT",	0X404,	-1);
	add_enum_member(id,"PBM_SETSTEP",	0X404,	-1);
	add_enum_member(id,"RB_SETBARINFO",	0X404,	-1);
	add_enum_member(id,"CBEM_GETITEMA",	0X404,	-1);
	add_enum_member(id,"SB_SETPARTS",	0X404,	-1);
	add_enum_member(id,"TTM_ADDTOOLA",	0X404,	-1);
	add_enum_member(id,"TB_HIDEBUTTON",	0X404,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_YIELD",	0X404,	-1);
	add_enum_member(id,"NIN_BALLOONUSERCLICK",	0X405,	-1);
	add_enum_member(id,"TBM_SETPOS",	0X405,	-1);
	add_enum_member(id,"WM_PSD_ENVSTAMPRECT",	0X405,	-1);
	add_enum_member(id,"PBM_STEPIT",	0X405,	-1);
	add_enum_member(id,"CBEM_SETITEMA",	0X405,	-1);
	add_enum_member(id,"TTM_DELTOOLA",	0X405,	-1);
	add_enum_member(id,"TB_INDETERMINATE",	0X405,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_FRAME",	0X405,	-1);
	add_enum_member(id,"NIN_POPUPOPEN",	0X406,	-1);
	add_enum_member(id,"TBM_SETRANGE",	0X406,	-1);
	add_enum_member(id,"WM_PSD_YAFULLPAGERECT",	0X406,	-1);
	add_enum_member(id,"PBM_SETRANGE32",	0X406,	-1);
	add_enum_member(id,"RB_SETBANDINFOA",	0X406,	-1);
	add_enum_member(id,"CBEM_GETCOMBOCONTROL",	0X406,	-1);
	add_enum_member(id,"SB_GETPARTS",	0X406,	-1);
	add_enum_member(id,"TTM_NEWTOOLRECTA",	0X406,	-1);
	add_enum_member(id,"TB_MARKBUTTON",	0X406,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_VIDEOSTREAM",	0X406,	-1);
	add_enum_member(id,"NIN_POPUPCLOSE",	0X407,	-1);
	add_enum_member(id,"TBM_SETRANGEMIN",	0X407,	-1);
	add_enum_member(id,"PBM_GETRANGE",	0X407,	-1);
	add_enum_member(id,"RB_SETPARENT",	0X407,	-1);
	add_enum_member(id,"CBEM_GETEDITCONTROL",	0X407,	-1);
	add_enum_member(id,"SB_GETBORDERS",	0X407,	-1);
	add_enum_member(id,"TTM_RELAYEVENT",	0X407,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_WAVESTREAM",	0X407,	-1);
	add_enum_member(id,"TBM_SETRANGEMAX",	0X408,	-1);
	add_enum_member(id,"PBM_GETPOS",	0X408,	-1);
	add_enum_member(id,"RB_HITTEST",	0X408,	-1);
	add_enum_member(id,"CBEM_SETEXSTYLE",	0X408,	-1);
	add_enum_member(id,"SB_SETMINHEIGHT",	0X408,	-1);
	add_enum_member(id,"TTM_GETTOOLINFOA",	0X408,	-1);
	add_enum_member(id,"WM_CAP_GET_USER_DATA",	0X408,	-1);
	add_enum_member(id,"TBM_CLEARTICS",	0X409,	-1);
	add_enum_member(id,"PBM_SETBARCOLOR",	0X409,	-1);
	add_enum_member(id,"RB_GETRECT",	0X409,	-1);
	add_enum_member(id,"CBEM_GETEXSTYLE",	0X409,	-1);
	add_enum_member(id,"CBEM_GETEXTENDEDSTYLE",	0X409,	-1);
	add_enum_member(id,"SB_SIMPLE",	0X409,	-1);
	add_enum_member(id,"TTM_SETTOOLINFOA",	0X409,	-1);
	add_enum_member(id,"TB_ISBUTTONENABLED",	0X409,	-1);
	add_enum_member(id,"WM_CAP_SET_USER_DATA",	0X409,	-1);
	add_enum_member(id,"TBM_SETSEL",	0X40A,	-1);
	add_enum_member(id,"PBM_SETMARQUEE",	0X40A,	-1);
	add_enum_member(id,"RB_INSERTBANDW",	0X40A,	-1);
	add_enum_member(id,"CBEM_HASEDITCHANGED",	0X40A,	-1);
	add_enum_member(id,"SB_GETRECT",	0X40A,	-1);
	add_enum_member(id,"TTM_HITTESTA",	0X40A,	-1);
	add_enum_member(id,"WIZ_QUERYNUMPAGES",	0X40A,	-1);
	add_enum_member(id,"TB_ISBUTTONCHECKED",	0X40A,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_CONNECT",	0X40A,	-1);
	add_enum_member(id,"TBM_SETSELSTART",	0X40B,	-1);
	add_enum_member(id,"RB_SETBANDINFOW",	0X40B,	-1);
	add_enum_member(id,"CBEM_INSERTITEMW",	0X40B,	-1);
	add_enum_member(id,"SB_SETTEXTW",	0X40B,	-1);
	add_enum_member(id,"TTM_GETTEXTA",	0X40B,	-1);
	add_enum_member(id,"WIZ_NEXT",	0X40B,	-1);
	add_enum_member(id,"TB_ISBUTTONPRESSED",	0X40B,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_DISCONNECT",	0X40B,	-1);
	add_enum_member(id,"TBM_SETSELEND",	0X40C,	-1);
	add_enum_member(id,"RB_GETBANDCOUNT",	0X40C,	-1);
	add_enum_member(id,"CBEM_SETITEMW",	0X40C,	-1);
	add_enum_member(id,"SB_GETTEXTLENGTHW",	0X40C,	-1);
	add_enum_member(id,"TTM_UPDATETIPTEXTA",	0X40C,	-1);
	add_enum_member(id,"WIZ_PREV",	0X40C,	-1);
	add_enum_member(id,"TB_ISBUTTONHIDDEN",	0X40C,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_GET_NAMEA",	0X40C,	-1);
	add_enum_member(id,"PBM_GETSTEP",	0X40D,	-1);
	add_enum_member(id,"RB_GETROWCOUNT",	0X40D,	-1);
	add_enum_member(id,"CBEM_GETITEMW",	0X40D,	-1);
	add_enum_member(id,"SB_GETTEXTW",	0X40D,	-1);
	add_enum_member(id,"TTM_GETTOOLCOUNT",	0X40D,	-1);
	add_enum_member(id,"TB_ISBUTTONINDETERMINATE",	0X40D,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_GET_VERSIONA",	0X40D,	-1);
	add_enum_member(id,"TBM_GETPTICS",	0X40E,	-1);
	add_enum_member(id,"PBM_GETBKCOLOR",	0X40E,	-1);
	add_enum_member(id,"RB_GETROWHEIGHT",	0X40E,	-1);
	add_enum_member(id,"CBEM_SETEXTENDEDSTYLE",	0X40E,	-1);
	add_enum_member(id,"SB_ISSIMPLE",	0X40E,	-1);
	add_enum_member(id,"TTM_ENUMTOOLSA",	0X40E,	-1);
	add_enum_member(id,"TB_ISBUTTONHIGHLIGHTED",	0X40E,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_GET_CAPS",	0X40E,	-1);
	add_enum_member(id,"TBM_GETTICPOS",	0X40F,	-1);
	add_enum_member(id,"PBM_GETBARCOLOR",	0X40F,	-1);
	add_enum_member(id,"SB_SETICON",	0X40F,	-1);
	add_enum_member(id,"TTM_GETCURRENTTOOLA",	0X40F,	-1);
	add_enum_member(id,"TBM_GETNUMTICS",	0X410,	-1);
	add_enum_member(id,"PBM_SETSTATE",	0X410,	-1);
	add_enum_member(id,"RB_IDTOINDEX",	0X410,	-1);
	add_enum_member(id,"SB_SETTIPTEXTA",	0X410,	-1);
	add_enum_member(id,"TTM_WINDOWFROMPOINT",	0X410,	-1);
	add_enum_member(id,"TBM_GETSELSTART",	0X411,	-1);
	add_enum_member(id,"PBM_GETSTATE",	0X411,	-1);
	add_enum_member(id,"RB_GETTOOLTIPS",	0X411,	-1);
	add_enum_member(id,"SB_SETTIPTEXTW",	0X411,	-1);
	add_enum_member(id,"TTM_TRACKACTIVATE",	0X411,	-1);
	add_enum_member(id,"TB_SETSTATE",	0X411,	-1);
	add_enum_member(id,"TBM_GETSELEND",	0X412,	-1);
	add_enum_member(id,"RB_SETTOOLTIPS",	0X412,	-1);
	add_enum_member(id,"SB_GETTIPTEXTA",	0X412,	-1);
	add_enum_member(id,"TTM_TRACKPOSITION",	0X412,	-1);
	add_enum_member(id,"TB_GETSTATE",	0X412,	-1);
	add_enum_member(id,"TBM_CLEARSEL",	0X413,	-1);
	add_enum_member(id,"RB_SETBKCOLOR",	0X413,	-1);
	add_enum_member(id,"SB_GETTIPTEXTW",	0X413,	-1);
	add_enum_member(id,"TTM_SETTIPBKCOLOR",	0X413,	-1);
	add_enum_member(id,"TB_ADDBITMAP",	0X413,	-1);
	add_enum_member(id,"TBM_SETTICFREQ",	0X414,	-1);
	add_enum_member(id,"RB_GETBKCOLOR",	0X414,	-1);
	add_enum_member(id,"SB_GETICON",	0X414,	-1);
	add_enum_member(id,"TTM_SETTIPTEXTCOLOR",	0X414,	-1);
	add_enum_member(id,"TB_ADDBUTTONSA",	0X414,	-1);
	add_enum_member(id,"WM_CAP_FILE_SET_CAPTURE_FILEA",	0X414,	-1);
	add_enum_member(id,"TBM_SETPAGESIZE",	0X415,	-1);
	add_enum_member(id,"RB_SETTEXTCOLOR",	0X415,	-1);
	add_enum_member(id,"TTM_GETDELAYTIME",	0X415,	-1);
	add_enum_member(id,"TB_INSERTBUTTONA",	0X415,	-1);
	add_enum_member(id,"WM_CAP_FILE_GET_CAPTURE_FILEA",	0X415,	-1);
	add_enum_member(id,"TBM_GETPAGESIZE",	0X416,	-1);
	add_enum_member(id,"RB_GETTEXTCOLOR",	0X416,	-1);
	add_enum_member(id,"TTM_GETTIPBKCOLOR",	0X416,	-1);
	add_enum_member(id,"TB_DELETEBUTTON",	0X416,	-1);
	add_enum_member(id,"WM_CAP_FILE_ALLOCATE",	0X416,	-1);
	add_enum_member(id,"TBM_SETLINESIZE",	0X417,	-1);
	add_enum_member(id,"RB_SIZETORECT",	0X417,	-1);
	add_enum_member(id,"TTM_GETTIPTEXTCOLOR",	0X417,	-1);
	add_enum_member(id,"TB_GETBUTTON",	0X417,	-1);
	add_enum_member(id,"WM_CAP_FILE_SAVEASA",	0X417,	-1);
	add_enum_member(id,"TBM_GETLINESIZE",	0X418,	-1);
	add_enum_member(id,"RB_BEGINDRAG",	0X418,	-1);
	add_enum_member(id,"TTM_SETMAXTIPWIDTH",	0X418,	-1);
	add_enum_member(id,"TB_BUTTONCOUNT",	0X418,	-1);
	add_enum_member(id,"WM_CAP_FILE_SET_INFOCHUNK",	0X418,	-1);
	add_enum_member(id,"TBM_GETTHUMBRECT",	0X419,	-1);
	add_enum_member(id,"RB_ENDDRAG",	0X419,	-1);
	add_enum_member(id,"TTM_GETMAXTIPWIDTH",	0X419,	-1);
	add_enum_member(id,"TB_COMMANDTOINDEX",	0X419,	-1);
	add_enum_member(id,"WM_CAP_FILE_SAVEDIBA",	0X419,	-1);
	add_enum_member(id,"TBM_GETCHANNELRECT",	0X41A,	-1);
	add_enum_member(id,"RB_DRAGMOVE",	0X41A,	-1);
	add_enum_member(id,"TTM_SETMARGIN",	0X41A,	-1);
	add_enum_member(id,"TB_SAVERESTOREA",	0X41A,	-1);
	add_enum_member(id,"TBM_SETTHUMBLENGTH",	0X41B,	-1);
	add_enum_member(id,"RB_GETBARHEIGHT",	0X41B,	-1);
	add_enum_member(id,"TTM_GETMARGIN",	0X41B,	-1);
	add_enum_member(id,"TB_CUSTOMIZE",	0X41B,	-1);
	add_enum_member(id,"TBM_GETTHUMBLENGTH",	0X41C,	-1);
	add_enum_member(id,"RB_GETBANDINFOW",	0X41C,	-1);
	add_enum_member(id,"TTM_POP",	0X41C,	-1);
	add_enum_member(id,"TB_ADDSTRINGA",	0X41C,	-1);
	add_enum_member(id,"TBM_SETTOOLTIPS",	0X41D,	-1);
	add_enum_member(id,"RB_GETBANDINFOA",	0X41D,	-1);
	add_enum_member(id,"TTM_UPDATE",	0X41D,	-1);
	add_enum_member(id,"TB_GETITEMRECT",	0X41D,	-1);
	add_enum_member(id,"TBM_GETTOOLTIPS",	0X41E,	-1);
	add_enum_member(id,"RB_MINIMIZEBAND",	0X41E,	-1);
	add_enum_member(id,"TTM_GETBUBBLESIZE",	0X41E,	-1);
	add_enum_member(id,"TB_BUTTONSTRUCTSIZE",	0X41E,	-1);
	add_enum_member(id,"WM_CAP_EDIT_COPY",	0X41E,	-1);
	add_enum_member(id,"TBM_SETTIPSIDE",	0X41F,	-1);
	add_enum_member(id,"RB_MAXIMIZEBAND",	0X41F,	-1);
	add_enum_member(id,"TTM_ADJUSTRECT",	0X41F,	-1);
	add_enum_member(id,"TB_SETBUTTONSIZE",	0X41F,	-1);
	add_enum_member(id,"TBM_SETBUDDY",	0X420,	-1);
	add_enum_member(id,"TTM_SETTITLEA",	0X420,	-1);
	add_enum_member(id,"TB_SETBITMAPSIZE",	0X420,	-1);
	add_enum_member(id,"MSG_FTS_JUMP_HASH",	0X420,	-1);
	add_enum_member(id,"TBM_GETBUDDY",	0X421,	-1);
	add_enum_member(id,"TTM_SETTITLEW",	0X421,	-1);
	add_enum_member(id,"MSG_FTS_JUMP_VA",	0X421,	-1);
	add_enum_member(id,"TB_AUTOSIZE",	0X421,	-1);
	add_enum_member(id,"TBM_SETPOSNOTIFY",	0X422,	-1);
	add_enum_member(id,"RB_GETBANDBORDERS",	0X422,	-1);
	add_enum_member(id,"MSG_FTS_GET_TITLE",	0X422,	-1);
	add_enum_member(id,"RB_SHOWBAND",	0X423,	-1);
	add_enum_member(id,"MSG_FTS_JUMP_QWORD",	0X423,	-1);
	add_enum_member(id,"TB_GETTOOLTIPS",	0X423,	-1);
	add_enum_member(id,"WM_CAP_SET_AUDIOFORMAT",	0X423,	-1);
	add_enum_member(id,"MSG_REINDEX_REQUEST",	0X424,	-1);
	add_enum_member(id,"TB_SETTOOLTIPS",	0X424,	-1);
	add_enum_member(id,"WM_CAP_GET_AUDIOFORMAT",	0X424,	-1);
	add_enum_member(id,"RB_SETPALETTE",	0X425,	-1);
	add_enum_member(id,"MSG_FTS_WHERE_IS_IT",	0X425,	-1);
	add_enum_member(id,"TB_SETPARENT",	0X425,	-1);
	add_enum_member(id,"RB_GETPALETTE",	0X426,	-1);
	add_enum_member(id,"RB_MOVEBAND",	0X427,	-1);
	add_enum_member(id,"TB_SETROWS",	0X427,	-1);
	add_enum_member(id,"RB_GETBANDMARGINS",	0X428,	-1);
	add_enum_member(id,"TB_GETROWS",	0X428,	-1);
	add_enum_member(id,"RB_SETEXTENDEDSTYLE",	0X429,	-1);
	add_enum_member(id,"TB_GETBITMAPFLAGS",	0X429,	-1);
	add_enum_member(id,"WM_CAP_DLG_VIDEOFORMAT",	0X429,	-1);
	add_enum_member(id,"RB_GETEXTENDEDSTYLE",	0X42A,	-1);
	add_enum_member(id,"TB_SETCMDID",	0X42A,	-1);
	add_enum_member(id,"WM_CAP_DLG_VIDEOSOURCE",	0X42A,	-1);
	add_enum_member(id,"RB_PUSHCHEVRON",	0X42B,	-1);
	add_enum_member(id,"TB_CHANGEBITMAP",	0X42B,	-1);
	add_enum_member(id,"WM_CAP_DLG_VIDEODISPLAY",	0X42B,	-1);
	add_enum_member(id,"RB_SETBANDWIDTH",	0X42C,	-1);
	add_enum_member(id,"TB_GETBITMAP",	0X42C,	-1);
	add_enum_member(id,"WM_CAP_GET_VIDEOFORMAT",	0X42C,	-1);
	add_enum_member(id,"MSG_GET_DEFFONT",	0X42D,	-1);
	add_enum_member(id,"TB_GETBUTTONTEXTA",	0X42D,	-1);
	add_enum_member(id,"WM_CAP_SET_VIDEOFORMAT",	0X42D,	-1);
	add_enum_member(id,"TB_REPLACEBITMAP",	0X42E,	-1);
	add_enum_member(id,"WM_CAP_DLG_VIDEOCOMPRESSION",	0X42E,	-1);
	add_enum_member(id,"TB_SETINDENT",	0X42F,	-1);
	add_enum_member(id,"TB_SETIMAGELIST",	0X430,	-1);
	add_enum_member(id,"TB_GETIMAGELIST",	0X431,	-1);
	add_enum_member(id,"TTM_ADDTOOLW",	0X432,	-1);
	add_enum_member(id,"TB_LOADIMAGES",	0X432,	-1);
	add_enum_member(id,"EM_CANPASTE",	0X432,	-1);
	add_enum_member(id,"WM_CAP_SET_PREVIEW",	0X432,	-1);
	add_enum_member(id,"TTM_DELTOOLW",	0X433,	-1);
	add_enum_member(id,"TB_GETRECT",	0X433,	-1);
	add_enum_member(id,"EM_DISPLAYBAND",	0X433,	-1);
	add_enum_member(id,"WM_CAP_SET_OVERLAY",	0X433,	-1);
	add_enum_member(id,"TTM_NEWTOOLRECTW",	0X434,	-1);
	add_enum_member(id,"TB_SETHOTIMAGELIST",	0X434,	-1);
	add_enum_member(id,"EM_EXGETSEL",	0X434,	-1);
	add_enum_member(id,"WM_CAP_SET_PREVIEWRATE",	0X434,	-1);
	add_enum_member(id,"TTM_GETTOOLINFOW",	0X435,	-1);
	add_enum_member(id,"TB_GETHOTIMAGELIST",	0X435,	-1);
	add_enum_member(id,"EM_EXLIMITTEXT",	0X435,	-1);
	add_enum_member(id,"WM_CAP_SET_SCALE",	0X435,	-1);
	add_enum_member(id,"TTM_SETTOOLINFOW",	0X436,	-1);
	add_enum_member(id,"TB_SETDISABLEDIMAGELIST",	0X436,	-1);
	add_enum_member(id,"EM_EXLINEFROMCHAR",	0X436,	-1);
	add_enum_member(id,"WM_CAP_GET_STATUS",	0X436,	-1);
	add_enum_member(id,"TTM_HITTESTW",	0X437,	-1);
	add_enum_member(id,"TB_GETDISABLEDIMAGELIST",	0X437,	-1);
	add_enum_member(id,"EM_EXSETSEL",	0X437,	-1);
	add_enum_member(id,"WM_CAP_SET_SCROLL",	0X437,	-1);
	add_enum_member(id,"TTM_GETTEXTW",	0X438,	-1);
	add_enum_member(id,"TB_SETSTYLE",	0X438,	-1);
	add_enum_member(id,"EM_FINDTEXT",	0X438,	-1);
	add_enum_member(id,"TTM_UPDATETIPTEXTW",	0X439,	-1);
	add_enum_member(id,"TB_GETSTYLE",	0X439,	-1);
	add_enum_member(id,"EM_FORMATRANGE",	0X439,	-1);
	add_enum_member(id,"TTM_ENUMTOOLSW",	0X43A,	-1);
	add_enum_member(id,"TB_GETBUTTONSIZE",	0X43A,	-1);
	add_enum_member(id,"EM_GETCHARFORMAT",	0X43A,	-1);
	add_enum_member(id,"TTM_GETCURRENTTOOLW",	0X43B,	-1);
	add_enum_member(id,"TB_SETBUTTONWIDTH",	0X43B,	-1);
	add_enum_member(id,"EM_GETEVENTMASK",	0X43B,	-1);
	add_enum_member(id,"TB_SETMAXTEXTROWS",	0X43C,	-1);
	add_enum_member(id,"EM_GETOLEINTERFACE",	0X43C,	-1);
	add_enum_member(id,"WM_CAP_GRAB_FRAME",	0X43C,	-1);
	add_enum_member(id,"TB_GETTEXTROWS",	0X43D,	-1);
	add_enum_member(id,"EM_GETPARAFORMAT",	0X43D,	-1);
	add_enum_member(id,"WM_CAP_GRAB_FRAME_NOSTOP",	0X43D,	-1);
	add_enum_member(id,"TB_GETOBJECT",	0X43E,	-1);
	add_enum_member(id,"EM_GETSELTEXT",	0X43E,	-1);
	add_enum_member(id,"WM_CAP_SEQUENCE",	0X43E,	-1);
	add_enum_member(id,"TB_GETBUTTONINFOW",	0X43F,	-1);
	add_enum_member(id,"EM_HIDESELECTION",	0X43F,	-1);
	add_enum_member(id,"WM_CAP_SEQUENCE_NOFILE",	0X43F,	-1);
	add_enum_member(id,"TB_SETBUTTONINFOW",	0X440,	-1);
	add_enum_member(id,"EM_PASTESPECIAL",	0X440,	-1);
	add_enum_member(id,"WM_CAP_SET_SEQUENCE_SETUP",	0X440,	-1);
	add_enum_member(id,"TB_GETBUTTONINFOA",	0X441,	-1);
	add_enum_member(id,"EM_REQUESTRESIZE",	0X441,	-1);
	add_enum_member(id,"WM_CAP_GET_SEQUENCE_SETUP",	0X441,	-1);
	add_enum_member(id,"TB_SETBUTTONINFOA",	0X442,	-1);
	add_enum_member(id,"EM_SELECTIONTYPE",	0X442,	-1);
	add_enum_member(id,"WM_CAP_SET_MCI_DEVICEA",	0X442,	-1);
	add_enum_member(id,"TB_INSERTBUTTONW",	0X443,	-1);
	add_enum_member(id,"EM_SETBKGNDCOLOR",	0X443,	-1);
	add_enum_member(id,"WM_CAP_GET_MCI_DEVICEA",	0X443,	-1);
	add_enum_member(id,"TB_ADDBUTTONSW",	0X444,	-1);
	add_enum_member(id,"EM_SETCHARFORMAT",	0X444,	-1);
	add_enum_member(id,"WM_CAP_STOP",	0X444,	-1);
	add_enum_member(id,"TB_HITTEST",	0X445,	-1);
	add_enum_member(id,"EM_SETEVENTMASK",	0X445,	-1);
	add_enum_member(id,"WM_CAP_ABORT",	0X445,	-1);
	add_enum_member(id,"TB_SETDRAWTEXTFLAGS",	0X446,	-1);
	add_enum_member(id,"EM_SETOLECALLBACK",	0X446,	-1);
	add_enum_member(id,"WM_CAP_SINGLE_FRAME_OPEN",	0X446,	-1);
	add_enum_member(id,"TB_GETHOTITEM",	0X447,	-1);
	add_enum_member(id,"EM_SETPARAFORMAT",	0X447,	-1);
	add_enum_member(id,"WM_CAP_SINGLE_FRAME_CLOSE",	0X447,	-1);
	add_enum_member(id,"TB_SETHOTITEM",	0X448,	-1);
	add_enum_member(id,"EM_SETTARGETDEVICE",	0X448,	-1);
	add_enum_member(id,"WM_CAP_SINGLE_FRAME",	0X448,	-1);
	add_enum_member(id,"TB_SETANCHORHIGHLIGHT",	0X449,	-1);
	add_enum_member(id,"EM_STREAMIN",	0X449,	-1);
	add_enum_member(id,"TB_GETANCHORHIGHLIGHT",	0X44A,	-1);
	add_enum_member(id,"EM_STREAMOUT",	0X44A,	-1);
	add_enum_member(id,"TB_GETBUTTONTEXTW",	0X44B,	-1);
	add_enum_member(id,"EM_GETTEXTRANGE",	0X44B,	-1);
	add_enum_member(id,"TB_SAVERESTOREW",	0X44C,	-1);
	add_enum_member(id,"EM_FINDWORDBREAK",	0X44C,	-1);
	add_enum_member(id,"TB_ADDSTRINGW",	0X44D,	-1);
	add_enum_member(id,"EM_SETOPTIONS",	0X44D,	-1);
	add_enum_member(id,"TB_MAPACCELERATORA",	0X44E,	-1);
	add_enum_member(id,"EM_GETOPTIONS",	0X44E,	-1);
	add_enum_member(id,"TB_GETINSERTMARK",	0X44F,	-1);
	add_enum_member(id,"EM_FINDTEXTEX",	0X44F,	-1);
	add_enum_member(id,"TB_SETINSERTMARK",	0X450,	-1);
	add_enum_member(id,"EM_GETWORDBREAKPROCEX",	0X450,	-1);
	add_enum_member(id,"WM_CAP_PAL_OPENA",	0X450,	-1);
	add_enum_member(id,"TB_INSERTMARKHITTEST",	0X451,	-1);
	add_enum_member(id,"EM_SETWORDBREAKPROCEX",	0X451,	-1);
	add_enum_member(id,"WM_CAP_PAL_SAVEA",	0X451,	-1);
	add_enum_member(id,"TB_MOVEBUTTON",	0X452,	-1);
	add_enum_member(id,"EM_SETUNDOLIMIT",	0X452,	-1);
	add_enum_member(id,"WM_CAP_PAL_PASTE",	0X452,	-1);
	add_enum_member(id,"TB_GETMAXSIZE",	0X453,	-1);
	add_enum_member(id,"WM_CAP_PAL_AUTOCREATE",	0X453,	-1);
	add_enum_member(id,"TB_SETEXTENDEDSTYLE",	0X454,	-1);
	add_enum_member(id,"EM_REDO",	0X454,	-1);
	add_enum_member(id,"WM_CAP_PAL_MANUALCREATE",	0X454,	-1);
	add_enum_member(id,"TB_GETEXTENDEDSTYLE",	0X455,	-1);
	add_enum_member(id,"EM_CANREDO",	0X455,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_CAPCONTROL",	0X455,	-1);
	add_enum_member(id,"TB_GETPADDING",	0X456,	-1);
	add_enum_member(id,"EM_GETUNDONAME",	0X456,	-1);
	add_enum_member(id,"TB_SETPADDING",	0X457,	-1);
	add_enum_member(id,"EM_GETREDONAME",	0X457,	-1);
	add_enum_member(id,"TB_SETINSERTMARKCOLOR",	0X458,	-1);
	add_enum_member(id,"EM_STOPGROUPTYPING",	0X458,	-1);
	add_enum_member(id,"TB_GETINSERTMARKCOLOR",	0X459,	-1);
	add_enum_member(id,"EM_SETTEXTMODE",	0X459,	-1);
	add_enum_member(id,"TB_MAPACCELERATORW",	0X45A,	-1);
	add_enum_member(id,"EM_GETTEXTMODE",	0X45A,	-1);
	add_enum_member(id,"TB_GETSTRINGW",	0X45B,	-1);
	add_enum_member(id,"EM_AUTOURLDETECT",	0X45B,	-1);
	add_enum_member(id,"TB_GETSTRINGA",	0X45C,	-1);
	add_enum_member(id,"EM_GETAUTOURLDETECT",	0X45C,	-1);
	add_enum_member(id,"TB_SETBOUNDINGSIZE",	0X45D,	-1);
	add_enum_member(id,"EM_SETPALETTE",	0X45D,	-1);
	add_enum_member(id,"TB_SETHOTITEM2",	0X45E,	-1);
	add_enum_member(id,"EM_GETTEXTEX",	0X45E,	-1);
	add_enum_member(id,"TB_HASACCELERATOR",	0X45F,	-1);
	add_enum_member(id,"EM_GETTEXTLENGTHEX",	0X45F,	-1);
	add_enum_member(id,"TB_SETLISTGAP",	0X460,	-1);
	add_enum_member(id,"EM_SHOWSCROLLBAR",	0X460,	-1);
	add_enum_member(id,"EM_SETTEXTEX",	0X461,	-1);
	add_enum_member(id,"TB_GETIMAGELISTCOUNT",	0X462,	-1);
	add_enum_member(id,"TB_GETIDEALSIZE",	0X463,	-1);
	add_enum_member(id,"TAPI_REPLY",	0X463,	-1);
	add_enum_member(id,"EM_SETPUNCTUATION",	0X464,	-1);
	add_enum_member(id,"IPM_CLEARADDRESS",	0X464,	-1);
	add_enum_member(id,"CDM_FIRST",	0X464,	-1);
	add_enum_member(id,"CDM_GETSPEC",	0X464,	-1);
	add_enum_member(id,"BFFM_SETSTATUSTEXTA",	0X464,	-1);
	add_enum_member(id,"ACM_OPENA",	0X464,	-1);
	add_enum_member(id,"WM_CAP_UNICODE_START",	0X464,	-1);
	add_enum_member(id,"MCIWNDM_GETDEVICEID",	0X464,	-1);
	add_enum_member(id,"WM_CHOOSEFONT_SETLOGFONT",	0X465,	-1);
	add_enum_member(id,"TB_GETMETRICS",	0X465,	-1);
	add_enum_member(id,"EM_GETPUNCTUATION",	0X465,	-1);
	add_enum_member(id,"IPM_SETADDRESS",	0X465,	-1);
	add_enum_member(id,"CDM_GETFILEPATH",	0X465,	-1);
	add_enum_member(id,"BFFM_ENABLEOK",	0X465,	-1);
	add_enum_member(id,"ACM_PLAY",	0X465,	-1);
	add_enum_member(id,"PSM_SETCURSEL",	0X465,	-1);
	add_enum_member(id,"UDM_SETRANGE",	0X465,	-1);
	add_enum_member(id,"MCIWNDM_SENDSTRINGA",	0X465,	-1);
	add_enum_member(id,"WM_CHOOSEFONT_SETFLAGS",	0X466,	-1);
	add_enum_member(id,"TB_SETMETRICS",	0X466,	-1);
	add_enum_member(id,"EM_SETWORDWRAPMODE",	0X466,	-1);
	add_enum_member(id,"IPM_GETADDRESS",	0X466,	-1);
	add_enum_member(id,"CDM_GETFOLDERPATH",	0X466,	-1);
	add_enum_member(id,"BFFM_SETSELECTIONA",	0X466,	-1);
	add_enum_member(id,"ACM_STOP",	0X466,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_ERRORW",	0X466,	-1);
	add_enum_member(id,"PSM_REMOVEPAGE",	0X466,	-1);
	add_enum_member(id,"UDM_GETRANGE",	0X466,	-1);
	add_enum_member(id,"MCIWNDM_GETPOSITIONA",	0X466,	-1);
	add_enum_member(id,"TB_GETITEMDROPDOWNRECT",	0X467,	-1);
	add_enum_member(id,"EM_GETWORDWRAPMODE",	0X467,	-1);
	add_enum_member(id,"IPM_SETRANGE",	0X467,	-1);
	add_enum_member(id,"CDM_GETFOLDERIDLIST",	0X467,	-1);
	add_enum_member(id,"BFFM_SETSELECTIONW",	0X467,	-1);
	add_enum_member(id,"ACM_OPENW",	0X467,	-1);
	add_enum_member(id,"WM_CAP_SET_CALLBACK_STATUSW",	0X467,	-1);
	add_enum_member(id,"PSM_ADDPAGE",	0X467,	-1);
	add_enum_member(id,"UDM_SETPOS",	0X467,	-1);
	add_enum_member(id,"MCIWNDM_GETSTART",	0X467,	-1);
	add_enum_member(id,"TB_SETPRESSEDIMAGELIST",	0X468,	-1);
	add_enum_member(id,"EM_SETIMECOLOR",	0X468,	-1);
	add_enum_member(id,"IPM_SETFOCUS",	0X468,	-1);
	add_enum_member(id,"CDM_SETCONTROLTEXT",	0X468,	-1);
	add_enum_member(id,"BFFM_SETSTATUSTEXTW",	0X468,	-1);
	add_enum_member(id,"ACM_ISPLAYING",	0X468,	-1);
	add_enum_member(id,"PSM_CHANGED",	0X468,	-1);
	add_enum_member(id,"UDM_GETPOS",	0X468,	-1);
	add_enum_member(id,"MCIWNDM_GETLENGTH",	0X468,	-1);
	add_enum_member(id,"TB_GETPRESSEDIMAGELIST",	0X469,	-1);
	add_enum_member(id,"EM_GETIMECOLOR",	0X469,	-1);
	add_enum_member(id,"IPM_ISBLANK",	0X469,	-1);
	add_enum_member(id,"CDM_HIDECONTROL",	0X469,	-1);
	add_enum_member(id,"BFFM_SETOKTEXT",	0X469,	-1);
	add_enum_member(id,"PSM_RESTARTWINDOWS",	0X469,	-1);
	add_enum_member(id,"UDM_SETBUDDY",	0X469,	-1);
	add_enum_member(id,"MCIWNDM_GETEND",	0X469,	-1);
	add_enum_member(id,"EM_SETIMEOPTIONS",	0X46A,	-1);
	add_enum_member(id,"CDM_SETDEFEXT",	0X46A,	-1);
	add_enum_member(id,"BFFM_SETEXPANDED",	0X46A,	-1);
	add_enum_member(id,"PSM_REBOOTSYSTEM",	0X46A,	-1);
	add_enum_member(id,"UDM_GETBUDDY",	0X46A,	-1);
	add_enum_member(id,"MCIWNDM_GETMODEA",	0X46A,	-1);
	add_enum_member(id,"EM_GETIMEOPTIONS",	0X46B,	-1);
	add_enum_member(id,"PSM_CANCELTOCLOSE",	0X46B,	-1);
	add_enum_member(id,"UDM_SETACCEL",	0X46B,	-1);
	add_enum_member(id,"MCIWNDM_EJECT",	0X46B,	-1);
	add_enum_member(id,"EM_CONVPOSITION",	0X46C,	-1);
	add_enum_member(id,"PSM_QUERYSIBLINGS",	0X46C,	-1);
	add_enum_member(id,"UDM_GETACCEL",	0X46C,	-1);
	add_enum_member(id,"MCIWNDM_SETZOOM",	0X46C,	-1);
	add_enum_member(id,"PSM_UNCHANGED",	0X46D,	-1);
	add_enum_member(id,"UDM_SETBASE",	0X46D,	-1);
	add_enum_member(id,"MCIWNDM_GETZOOM",	0X46D,	-1);
	add_enum_member(id,"PSM_APPLY",	0X46E,	-1);
	add_enum_member(id,"UDM_GETBASE",	0X46E,	-1);
	add_enum_member(id,"MCIWNDM_SETVOLUME",	0X46E,	-1);
	add_enum_member(id,"PSM_SETTITLEA",	0X46F,	-1);
	add_enum_member(id,"UDM_SETRANGE32",	0X46F,	-1);
	add_enum_member(id,"MCIWNDM_GETVOLUME",	0X46F,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_GET_NAMEW",	0X470,	-1);
	add_enum_member(id,"PSM_SETWIZBUTTONS",	0X470,	-1);
	add_enum_member(id,"UDM_GETRANGE32",	0X470,	-1);
	add_enum_member(id,"MCIWNDM_SETSPEED",	0X470,	-1);
	add_enum_member(id,"WM_CAP_DRIVER_GET_VERSIONW",	0X471,	-1);
	add_enum_member(id,"PSM_PRESSBUTTON",	0X471,	-1);
	add_enum_member(id,"UDM_SETPOS32",	0X471,	-1);
	add_enum_member(id,"MCIWNDM_GETSPEED",	0X471,	-1);
	add_enum_member(id,"PSM_SETCURSELID",	0X472,	-1);
	add_enum_member(id,"UDM_GETPOS32",	0X472,	-1);
	add_enum_member(id,"MCIWNDM_SETREPEAT",	0X472,	-1);
	add_enum_member(id,"PSM_SETFINISHTEXTA",	0X473,	-1);
	add_enum_member(id,"MCIWNDM_GETREPEAT",	0X473,	-1);
	add_enum_member(id,"PSM_GETTABCONTROL",	0X474,	-1);
	add_enum_member(id,"PSM_ISDIALOGMESSAGE",	0X475,	-1);
	add_enum_member(id,"PSM_GETCURRENTPAGEHWND",	0X476,	-1);
	add_enum_member(id,"MCIWNDM_REALIZE",	0X476,	-1);
	add_enum_member(id,"PSM_INSERTPAGE",	0X477,	-1);
	add_enum_member(id,"MCIWNDM_SETTIMEFORMATA",	0X477,	-1);
	add_enum_member(id,"EM_SETLANGOPTIONS",	0X478,	-1);
	add_enum_member(id,"WM_CAP_FILE_SET_CAPTURE_FILEW",	0X478,	-1);
	add_enum_member(id,"PSM_SETTITLEW",	0X478,	-1);
	add_enum_member(id,"MCIWNDM_GETTIMEFORMATA",	0X478,	-1);
	add_enum_member(id,"EM_GETLANGOPTIONS",	0X479,	-1);
	add_enum_member(id,"WM_CAP_FILE_GET_CAPTURE_FILEW",	0X479,	-1);
	add_enum_member(id,"PSM_SETFINISHTEXTW",	0X479,	-1);
	add_enum_member(id,"MCIWNDM_VALIDATEMEDIA",	0X479,	-1);
	add_enum_member(id,"EM_GETIMECOMPMODE",	0X47A,	-1);
	add_enum_member(id,"MCIWNDM_PLAYFROM",	0X47A,	-1);
	add_enum_member(id,"EM_FINDTEXTW",	0X47B,	-1);
	add_enum_member(id,"WM_CAP_FILE_SAVEASW",	0X47B,	-1);
	add_enum_member(id,"MCIWNDM_PLAYTO",	0X47B,	-1);
	add_enum_member(id,"EM_FINDTEXTEXW",	0X47C,	-1);
	add_enum_member(id,"MCIWNDM_GETFILENAMEA",	0X47C,	-1);
	add_enum_member(id,"EM_RECONVERSION",	0X47D,	-1);
	add_enum_member(id,"WM_CAP_FILE_SAVEDIBW",	0X47D,	-1);
	add_enum_member(id,"PSM_SETHEADERTITLEA",	0X47D,	-1);
	add_enum_member(id,"MCIWNDM_GETDEVICEA",	0X47D,	-1);
	add_enum_member(id,"EM_SETIMEMODEBIAS",	0X47E,	-1);
	add_enum_member(id,"PSM_SETHEADERTITLEW",	0X47E,	-1);
	add_enum_member(id,"MCIWNDM_GETPALETTE",	0X47E,	-1);
	add_enum_member(id,"EM_GETIMEMODEBIAS",	0X47F,	-1);
	add_enum_member(id,"PSM_SETHEADERSUBTITLEA",	0X47F,	-1);
	add_enum_member(id,"MCIWNDM_SETPALETTE",	0X47F,	-1);
	add_enum_member(id,"PSM_SETHEADERSUBTITLEW",	0X480,	-1);
	add_enum_member(id,"MCIWNDM_GETERRORA",	0X480,	-1);
	add_enum_member(id,"PSM_HWNDTOINDEX",	0X481,	-1);
	add_enum_member(id,"MCIWNDM_SETTIMERS",	0X481,	-1);
	add_enum_member(id,"PSM_INDEXTOHWND",	0X482,	-1);
	add_enum_member(id,"MCIWNDM_SETACTIVETIMER",	0X482,	-1);
	add_enum_member(id,"PSM_PAGETOINDEX",	0X483,	-1);
	add_enum_member(id,"MCIWNDM_SETINACTIVETIMER",	0X483,	-1);
	add_enum_member(id,"PSM_INDEXTOPAGE",	0X484,	-1);
	add_enum_member(id,"MCIWNDM_GETACTIVETIMER",	0X484,	-1);
	add_enum_member(id,"PSM_IDTOINDEX",	0X485,	-1);
	add_enum_member(id,"MCIWNDM_GETINACTIVETIMER",	0X485,	-1);
	add_enum_member(id,"DL_BEGINDRAG",	0X485,	-1);
	add_enum_member(id,"PSM_INDEXTOID",	0X486,	-1);
	add_enum_member(id,"DL_DRAGGING",	0X486,	-1);
	add_enum_member(id,"MCIWNDM_NEWA",	0X486,	-1);
	add_enum_member(id,"PSM_GETRESULT",	0X487,	-1);
	add_enum_member(id,"DL_DROPPED",	0X487,	-1);
	add_enum_member(id,"MCIWNDM_CHANGESTYLES",	0X487,	-1);
	add_enum_member(id,"PSM_RECALCPAGESIZES",	0X488,	-1);
	add_enum_member(id,"DL_CANCELDRAG",	0X488,	-1);
	add_enum_member(id,"MCIWNDM_GETSTYLES",	0X488,	-1);
	add_enum_member(id,"PSM_SETNEXTTEXTW",	0X489,	-1);
	add_enum_member(id,"MCIWNDM_GETALIAS",	0X489,	-1);
	add_enum_member(id,"PSM_SHOWWIZBUTTONS",	0X48A,	-1);
	add_enum_member(id,"MCIWNDM_RETURNSTRINGA",	0X48A,	-1);
	add_enum_member(id,"PSM_ENABLEWIZBUTTONS",	0X48B,	-1);
	add_enum_member(id,"MCIWNDM_PLAYREVERSE",	0X48B,	-1);
	add_enum_member(id,"PSM_SETBUTTONTEXTW",	0X48C,	-1);
	add_enum_member(id,"MCIWNDM_GET_SOURCE",	0X48C,	-1);
	add_enum_member(id,"MCIWNDM_PUT_SOURCE",	0X48D,	-1);
	add_enum_member(id,"MCIWNDM_GET_DEST",	0X48E,	-1);
	add_enum_member(id,"MCIWNDM_PUT_DEST",	0X48F,	-1);
	add_enum_member(id,"MCIWNDM_CAN_PLAY",	0X490,	-1);
	add_enum_member(id,"MCIWNDM_CAN_WINDOW",	0X491,	-1);
	add_enum_member(id,"MCIWNDM_CAN_RECORD",	0X492,	-1);
	add_enum_member(id,"MCIWNDM_CAN_SAVE",	0X493,	-1);
	add_enum_member(id,"MCIWNDM_CAN_EJECT",	0X494,	-1);
	add_enum_member(id,"MCIWNDM_CAN_CONFIG",	0X495,	-1);
	add_enum_member(id,"MCIWNDM_PALETTEKICK",	0X496,	-1);
	add_enum_member(id,"IE_GETINK",	0X496,	-1);
	add_enum_member(id,"IE_MSGFIRST",	0X496,	-1);
	add_enum_member(id,"IE_SETINK",	0X497,	-1);
	add_enum_member(id,"MCIWNDM_OPENINTERFACE",	0X497,	-1);
	add_enum_member(id,"IE_GETPENTIP",	0X498,	-1);
	add_enum_member(id,"MCIWNDM_SETOWNER",	0X498,	-1);
	add_enum_member(id,"IE_SETPENTIP",	0X499,	-1);
	add_enum_member(id,"MCIWNDM_OPENA",	0X499,	-1);
	add_enum_member(id,"IE_GETERASERTIP",	0X49A,	-1);
	add_enum_member(id,"IE_SETERASERTIP",	0X49B,	-1);
	add_enum_member(id,"IE_GETBKGND",	0X49C,	-1);
	add_enum_member(id,"IE_SETBKGND",	0X49D,	-1);
	add_enum_member(id,"IE_GETGRIDORIGIN",	0X49E,	-1);
	add_enum_member(id,"IE_SETGRIDORIGIN",	0X49F,	-1);
	add_enum_member(id,"IE_GETGRIDPEN",	0X4A0,	-1);
	add_enum_member(id,"IE_SETGRIDPEN",	0X4A1,	-1);
	add_enum_member(id,"IE_GETGRIDSIZE",	0X4A2,	-1);
	add_enum_member(id,"IE_SETGRIDSIZE",	0X4A3,	-1);
	add_enum_member(id,"IE_GETMODE",	0X4A4,	-1);
	add_enum_member(id,"IE_SETMODE",	0X4A5,	-1);
	add_enum_member(id,"WM_CAP_SET_MCI_DEVICEW",	0X4A6,	-1);
	add_enum_member(id,"IE_GETINKRECT",	0X4A6,	-1);
	add_enum_member(id,"WM_CAP_GET_MCI_DEVICEW",	0X4A7,	-1);
	add_enum_member(id,"WM_CAP_PAL_OPENW",	0X4B4,	-1);
	add_enum_member(id,"WM_CAP_PAL_SAVEW",	0X4B5,	-1);
	add_enum_member(id,"WM_CAP_UNICODE_END",	0X4B5,	-1);
	add_enum_member(id,"WM_CAP_END",	0X4B5,	-1);
	add_enum_member(id,"IE_GETAPPDATA",	0X4B8,	-1);
	add_enum_member(id,"IE_SETAPPDATA",	0X4B9,	-1);
	add_enum_member(id,"IE_GETDRAWOPTS",	0X4BA,	-1);
	add_enum_member(id,"IE_SETDRAWOPTS",	0X4BB,	-1);
	add_enum_member(id,"IE_GETFORMAT",	0X4BC,	-1);
	add_enum_member(id,"IE_SETFORMAT",	0X4BD,	-1);
	add_enum_member(id,"IE_GETINKINPUT",	0X4BE,	-1);
	add_enum_member(id,"IE_SETINKINPUT",	0X4BF,	-1);
	add_enum_member(id,"IE_GETNOTIFY",	0X4C0,	-1);
	add_enum_member(id,"IE_SETNOTIFY",	0X4C1,	-1);
	add_enum_member(id,"IE_GETRECOG",	0X4C2,	-1);
	add_enum_member(id,"IE_SETRECOG",	0X4C3,	-1);
	add_enum_member(id,"IE_GETSECURITY",	0X4C4,	-1);
	add_enum_member(id,"IE_SETSECURITY",	0X4C5,	-1);
	add_enum_member(id,"IE_GETSEL",	0X4C6,	-1);
	add_enum_member(id,"IE_SETSEL",	0X4C7,	-1);
	add_enum_member(id,"EM_SETBIDIOPTIONS",	0X4C8,	-1);
	add_enum_member(id,"CDM_LAST",	0X4C8,	-1);
	add_enum_member(id,"MCIWNDM_NOTIFYMODE",	0X4C8,	-1);
	add_enum_member(id,"IE_DOCOMMAND",	0X4C8,	-1);
	add_enum_member(id,"EM_GETBIDIOPTIONS",	0X4C9,	-1);
	add_enum_member(id,"IE_GETCOMMAND",	0X4C9,	-1);
	add_enum_member(id,"MCIWNDM_SENDSTRINGW",	0X4C9,	-1);
	add_enum_member(id,"MCIWNDM_NOTIFYPOS",	0X4C9,	-1);
	add_enum_member(id,"EM_SETTYPOGRAPHYOPTIONS",	0X4CA,	-1);
	add_enum_member(id,"IE_GETCOUNT",	0X4CA,	-1);
	add_enum_member(id,"MCIWNDM_GETPOSITIONW",	0X4CA,	-1);
	add_enum_member(id,"MCIWNDM_NOTIFYSIZE",	0X4CA,	-1);
	add_enum_member(id,"EM_GETTYPOGRAPHYOPTIONS",	0X4CB,	-1);
	add_enum_member(id,"MCIWNDM_NOTIFYMEDIA",	0X4CB,	-1);
	add_enum_member(id,"IE_GETGESTURE",	0X4CB,	-1);
	add_enum_member(id,"EM_SETEDITSTYLE",	0X4CC,	-1);
	add_enum_member(id,"IE_GETMENU",	0X4CC,	-1);
	add_enum_member(id,"EM_GETEDITSTYLE",	0X4CD,	-1);
	add_enum_member(id,"MCIWNDM_NOTIFYERROR",	0X4CD,	-1);
	add_enum_member(id,"IE_GETPAINTDC",	0X4CD,	-1);
	add_enum_member(id,"IE_GETPDEVENT",	0X4CE,	-1);
	add_enum_member(id,"MCIWNDM_GETMODEW",	0X4CE,	-1);
	add_enum_member(id,"IE_GETSELCOUNT",	0X4CF,	-1);
	add_enum_member(id,"IE_GETSELITEMS",	0X4D0,	-1);
	add_enum_member(id,"IE_GETSTYLE",	0X4D1,	-1);
	add_enum_member(id,"MCIWNDM_SETTIMEFORMATW",	0X4DB,	-1);
	add_enum_member(id,"EM_OUTLINE",	0X4DC,	-1);
	add_enum_member(id,"MCIWNDM_GETTIMEFORMATW",	0X4DC,	-1);
	add_enum_member(id,"EM_GETSCROLLPOS",	0X4DD,	-1);
	add_enum_member(id,"EM_SETSCROLLPOS",	0X4DE,	-1);
	add_enum_member(id,"EM_SETFONTSIZE",	0X4DF,	-1);
	add_enum_member(id,"EM_GETZOOM",	0X4E0,	-1);
	add_enum_member(id,"MCIWNDM_GETFILENAMEW",	0X4E0,	-1);
	add_enum_member(id,"EM_SETZOOM",	0X4E1,	-1);
	add_enum_member(id,"MCIWNDM_GETDEVICEW",	0X4E1,	-1);
	add_enum_member(id,"EM_GETVIEWKIND",	0X4E2,	-1);
	add_enum_member(id,"EM_SETVIEWKIND",	0X4E3,	-1);
	add_enum_member(id,"EM_GETPAGE",	0X4E4,	-1);
	add_enum_member(id,"MCIWNDM_GETERRORW",	0X4E4,	-1);
	add_enum_member(id,"EM_SETPAGE",	0X4E5,	-1);
	add_enum_member(id,"EM_GETHYPHENATEINFO",	0X4E6,	-1);
	add_enum_member(id,"EM_SETHYPHENATEINFO",	0X4E7,	-1);
	add_enum_member(id,"EM_INSERTTABLE",	0X4E8,	-1);
	add_enum_member(id,"EM_GETAUTOCORRECTPROC",	0X4E9,	-1);
	add_enum_member(id,"EM_SETAUTOCORRECTPROC",	0X4EA,	-1);
	add_enum_member(id,"MCIWNDM_NEWW",	0X4EA,	-1);
	add_enum_member(id,"EM_GETPAGEROTATE",	0X4EB,	-1);
	add_enum_member(id,"EM_SETPAGEROTATE",	0X4EC,	-1);
	add_enum_member(id,"EM_GETCTFMODEBIAS",	0X4ED,	-1);
	add_enum_member(id,"EM_SETCTFMODEBIAS",	0X4EE,	-1);
	add_enum_member(id,"MCIWNDM_RETURNSTRINGW",	0X4EE,	-1);
	add_enum_member(id,"EM_GETCTFOPENSTATUS",	0X4F0,	-1);
	add_enum_member(id,"EM_SETCTFOPENSTATUS",	0X4F1,	-1);
	add_enum_member(id,"EM_GETIMECOMPTEXT",	0X4F2,	-1);
	add_enum_member(id,"EM_ISIME",	0X4F3,	-1);
	add_enum_member(id,"EM_GETIMEPROPERTY",	0X4F4,	-1);
	add_enum_member(id,"MCIWNDM_OPENW",	0X4FC,	-1);
	add_enum_member(id,"EM_CALLAUTOCORRECTPROC",	0X4FF,	-1);
	add_enum_member(id,"EM_GETTABLEPARMS",	0X509,	-1);
	add_enum_member(id,"EM_GETQUERYRTFOBJ",	0X50D,	-1);
	add_enum_member(id,"EM_SETQUERYRTFOBJ",	0X50E,	-1);
	add_enum_member(id,"EM_SETEDITSTYLEEX",	0X513,	-1);
	add_enum_member(id,"EM_GETEDITSTYLEEX",	0X514,	-1);
	add_enum_member(id,"EM_GETSTORYTYPE",	0X522,	-1);
	add_enum_member(id,"EM_SETSTORYTYPE",	0X523,	-1);
	add_enum_member(id,"EM_GETELLIPSISMODE",	0X531,	-1);
	add_enum_member(id,"EM_SETELLIPSISMODE",	0X532,	-1);
	add_enum_member(id,"EM_SETTABLEPARMS",	0X533,	-1);
	add_enum_member(id,"EM_GETTOUCHOPTIONS",	0X536,	-1);
	add_enum_member(id,"EM_SETTOUCHOPTIONS",	0X537,	-1);
	add_enum_member(id,"EM_INSERTIMAGE",	0X53A,	-1);
	add_enum_member(id,"EM_SETUIANAME",	0X540,	-1);
	add_enum_member(id,"EM_GETELLIPSISSTATE",	0X542,	-1);
	add_enum_member(id,"FM_GETFOCUS",	0X600,	-1);
	add_enum_member(id,"FM_GETDRIVEINFOA",	0X601,	-1);
	add_enum_member(id,"FM_GETSELCOUNT",	0X602,	-1);
	add_enum_member(id,"FM_GETSELCOUNTLFN",	0X603,	-1);
	add_enum_member(id,"FM_GETFILESELA",	0X604,	-1);
	add_enum_member(id,"FM_GETFILESELLFNA",	0X605,	-1);
	add_enum_member(id,"FM_REFRESH_WINDOWS",	0X606,	-1);
	add_enum_member(id,"FM_RELOAD_EXTENSIONS",	0X607,	-1);
	add_enum_member(id,"FM_GETDRIVEINFOW",	0X611,	-1);
	add_enum_member(id,"FM_GETFILESELW",	0X614,	-1);
	add_enum_member(id,"FM_GETFILESELLFNW",	0X615,	-1);
	add_enum_member(id,"WLX_WM_SAS",	0X659,	-1);
	add_enum_member(id,"SM_GETSELCOUNT",	0X7E8,	-1);
	add_enum_member(id,"WM_CPL_LAUNCH",	0X7E8,	-1);
	add_enum_member(id,"UM_GETSELCOUNT",	0X7E8,	-1);
	add_enum_member(id,"SM_GETSERVERSELA",	0X7E9,	-1);
	add_enum_member(id,"WM_CPL_LAUNCHED",	0X7E9,	-1);
	add_enum_member(id,"UM_GETUSERSELA",	0X7E9,	-1);
	add_enum_member(id,"SM_GETSERVERSELW",	0X7EA,	-1);
	add_enum_member(id,"UM_GETUSERSELW",	0X7EA,	-1);
	add_enum_member(id,"SM_GETCURFOCUSA",	0X7EB,	-1);
	add_enum_member(id,"UM_GETGROUPSELA",	0X7EB,	-1);
	add_enum_member(id,"SM_GETCURFOCUSW",	0X7EC,	-1);
	add_enum_member(id,"UM_GETGROUPSELW",	0X7EC,	-1);
	add_enum_member(id,"SM_GETOPTIONS",	0X7ED,	-1);
	add_enum_member(id,"UM_GETCURFOCUSA",	0X7ED,	-1);
	add_enum_member(id,"UM_GETCURFOCUSW",	0X7EE,	-1);
	add_enum_member(id,"UM_GETOPTIONS",	0X7EF,	-1);
	add_enum_member(id,"UM_GETOPTIONS2",	0X7F0,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_PAGEINIT",	0X84D,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_PAGEHWND",	0X84E,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_CHANGE",	0X84F,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_APPLY",	0X850,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_SETFOCUS",	0X851,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_FOREGROUND",	0X852,	-1);
	return id;
}

static Enums_1(id) {

	add_enum_member(id,"WM_ADSPROP_NOTIFY_EXIT",	0X853,	-1);
	add_enum_member(id,"WM_ADSPROP_NOTIFY_ERROR",	0X856,	-1);
	add_enum_member(id,"LVM_FIRST",	0X1000,	-1);
	add_enum_member(id,"LVM_GETBKCOLOR",	0X1000,	-1);
	add_enum_member(id,"LVM_SETBKCOLOR",	0X1001,	-1);
	add_enum_member(id,"LVM_GETIMAGELIST",	0X1002,	-1);
	add_enum_member(id,"LVM_SETIMAGELIST",	0X1003,	-1);
	add_enum_member(id,"LVM_GETITEMCOUNT",	0X1004,	-1);
	add_enum_member(id,"LVM_GETITEMA",	0X1005,	-1);
	add_enum_member(id,"LVM_SETITEMA",	0X1006,	-1);
	add_enum_member(id,"LVM_INSERTITEMA",	0X1007,	-1);
	add_enum_member(id,"LVM_DELETEITEM",	0X1008,	-1);
	add_enum_member(id,"LVM_DELETEALLITEMS",	0X1009,	-1);
	add_enum_member(id,"LVM_GETCALLBACKMASK",	0X100A,	-1);
	add_enum_member(id,"LVM_SETCALLBACKMASK",	0X100B,	-1);
	add_enum_member(id,"LVM_GETNEXTITEM",	0X100C,	-1);
	add_enum_member(id,"LVM_FINDITEMA",	0X100D,	-1);
	add_enum_member(id,"LVM_GETITEMRECT",	0X100E,	-1);
	add_enum_member(id,"LVM_SETITEMPOSITION",	0X100F,	-1);
	add_enum_member(id,"LVM_GETITEMPOSITION",	0X1010,	-1);
	add_enum_member(id,"LVM_GETSTRINGWIDTHA",	0X1011,	-1);
	add_enum_member(id,"LVM_HITTEST",	0X1012,	-1);
	add_enum_member(id,"LVM_ENSUREVISIBLE",	0X1013,	-1);
	add_enum_member(id,"LVM_SCROLL",	0X1014,	-1);
	add_enum_member(id,"LVM_REDRAWITEMS",	0X1015,	-1);
	add_enum_member(id,"LVM_ARRANGE",	0X1016,	-1);
	add_enum_member(id,"LVM_EDITLABELA",	0X1017,	-1);
	add_enum_member(id,"LVM_GETEDITCONTROL",	0X1018,	-1);
	add_enum_member(id,"LVM_GETCOLUMNA",	0X1019,	-1);
	add_enum_member(id,"LVM_SETCOLUMNA",	0X101A,	-1);
	add_enum_member(id,"LVM_INSERTCOLUMNA",	0X101B,	-1);
	add_enum_member(id,"LVM_DELETECOLUMN",	0X101C,	-1);
	add_enum_member(id,"LVM_GETCOLUMNWIDTH",	0X101D,	-1);
	add_enum_member(id,"LVM_SETCOLUMNWIDTH",	0X101E,	-1);
	add_enum_member(id,"LVM_GETHEADER",	0X101F,	-1);
	add_enum_member(id,"LVM_CREATEDRAGIMAGE",	0X1021,	-1);
	add_enum_member(id,"LVM_GETVIEWRECT",	0X1022,	-1);
	add_enum_member(id,"LVM_GETTEXTCOLOR",	0X1023,	-1);
	add_enum_member(id,"LVM_SETTEXTCOLOR",	0X1024,	-1);
	add_enum_member(id,"LVM_GETTEXTBKCOLOR",	0X1025,	-1);
	add_enum_member(id,"LVM_SETTEXTBKCOLOR",	0X1026,	-1);
	add_enum_member(id,"LVM_GETTOPINDEX",	0X1027,	-1);
	add_enum_member(id,"LVM_GETCOUNTPERPAGE",	0X1028,	-1);
	add_enum_member(id,"LVM_GETORIGIN",	0X1029,	-1);
	add_enum_member(id,"LVM_UPDATE",	0X102A,	-1);
	add_enum_member(id,"LVM_SETITEMSTATE",	0X102B,	-1);
	add_enum_member(id,"LVM_GETITEMSTATE",	0X102C,	-1);
	add_enum_member(id,"LVM_GETITEMTEXTA",	0X102D,	-1);
	add_enum_member(id,"LVM_SETITEMTEXTA",	0X102E,	-1);
	add_enum_member(id,"LVM_SETITEMCOUNT",	0X102F,	-1);
	add_enum_member(id,"LVM_SORTITEMS",	0X1030,	-1);
	add_enum_member(id,"LVM_SETITEMPOSITION32",	0X1031,	-1);
	add_enum_member(id,"LVM_GETSELECTEDCOUNT",	0X1032,	-1);
	add_enum_member(id,"LVM_GETITEMSPACING",	0X1033,	-1);
	add_enum_member(id,"LVM_GETISEARCHSTRINGA",	0X1034,	-1);
	add_enum_member(id,"LVM_SETICONSPACING",	0X1035,	-1);
	add_enum_member(id,"LVM_SETEXTENDEDLISTVIEWSTYLE",	0X1036,	-1);
	add_enum_member(id,"LVM_GETEXTENDEDLISTVIEWSTYLE",	0X1037,	-1);
	add_enum_member(id,"LVM_GETSUBITEMRECT",	0X1038,	-1);
	add_enum_member(id,"LVM_SUBITEMHITTEST",	0X1039,	-1);
	add_enum_member(id,"LVM_SETCOLUMNORDERARRAY",	0X103A,	-1);
	add_enum_member(id,"LVM_GETCOLUMNORDERARRAY",	0X103B,	-1);
	add_enum_member(id,"LVM_SETHOTITEM",	0X103C,	-1);
	add_enum_member(id,"LVM_GETHOTITEM",	0X103D,	-1);
	add_enum_member(id,"LVM_SETHOTCURSOR",	0X103E,	-1);
	add_enum_member(id,"LVM_GETHOTCURSOR",	0X103F,	-1);
	add_enum_member(id,"LVM_APPROXIMATEVIEWRECT",	0X1040,	-1);
	add_enum_member(id,"LVM_SETWORKAREAS",	0X1041,	-1);
	add_enum_member(id,"LVM_GETSELECTIONMARK",	0X1042,	-1);
	add_enum_member(id,"LVM_SETSELECTIONMARK",	0X1043,	-1);
	add_enum_member(id,"LVM_SETBKIMAGEA",	0X1044,	-1);
	add_enum_member(id,"LVM_GETBKIMAGEA",	0X1045,	-1);
	add_enum_member(id,"LVM_GETWORKAREAS",	0X1046,	-1);
	add_enum_member(id,"LVM_SETHOVERTIME",	0X1047,	-1);
	add_enum_member(id,"LVM_GETHOVERTIME",	0X1048,	-1);
	add_enum_member(id,"LVM_GETNUMBEROFWORKAREAS",	0X1049,	-1);
	add_enum_member(id,"LVM_SETTOOLTIPS",	0X104A,	-1);
	add_enum_member(id,"LVM_GETITEMW",	0X104B,	-1);
	add_enum_member(id,"LVM_SETITEMW",	0X104C,	-1);
	add_enum_member(id,"LVM_INSERTITEMW",	0X104D,	-1);
	add_enum_member(id,"LVM_GETTOOLTIPS",	0X104E,	-1);
	add_enum_member(id,"LVM_SORTITEMSEX",	0X1051,	-1);
	add_enum_member(id,"LVM_FINDITEMW",	0X1053,	-1);
	add_enum_member(id,"LVM_GETSTRINGWIDTHW",	0X1057,	-1);
	add_enum_member(id,"LVM_GETGROUPSTATE",	0X105C,	-1);
	add_enum_member(id,"LVM_GETFOCUSEDGROUP",	0X105D,	-1);
	add_enum_member(id,"LVM_GETCOLUMNW",	0X105F,	-1);
	add_enum_member(id,"LVM_SETCOLUMNW",	0X1060,	-1);
	add_enum_member(id,"LVM_INSERTCOLUMNW",	0X1061,	-1);
	add_enum_member(id,"LVM_GETGROUPRECT",	0X1062,	-1);
	add_enum_member(id,"LVM_GETITEMTEXTW",	0X1073,	-1);
	add_enum_member(id,"LVM_SETITEMTEXTW",	0X1074,	-1);
	add_enum_member(id,"LVM_GETISEARCHSTRINGW",	0X1075,	-1);
	add_enum_member(id,"LVM_EDITLABELW",	0X1076,	-1);
	add_enum_member(id,"LVM_SETBKIMAGEW",	0X108A,	-1);
	add_enum_member(id,"LVM_GETBKIMAGEW",	0X108B,	-1);
	add_enum_member(id,"LVM_SETSELECTEDCOLUMN",	0X108C,	-1);
	add_enum_member(id,"LVM_SETTILEWIDTH",	0X108D,	-1);
	add_enum_member(id,"LVM_SETVIEW",	0X108E,	-1);
	add_enum_member(id,"LVM_GETVIEW",	0X108F,	-1);
	add_enum_member(id,"LVM_INSERTGROUP",	0X1091,	-1);
	add_enum_member(id,"LVM_SETGROUPINFO",	0X1093,	-1);
	add_enum_member(id,"LVM_GETGROUPINFO",	0X1095,	-1);
	add_enum_member(id,"LVM_REMOVEGROUP",	0X1096,	-1);
	add_enum_member(id,"LVM_MOVEGROUP",	0X1097,	-1);
	add_enum_member(id,"LVM_GETGROUPCOUNT",	0X1098,	-1);
	add_enum_member(id,"LVM_GETGROUPINFOBYINDEX",	0X1099,	-1);
	add_enum_member(id,"LVM_MOVEITEMTOGROUP",	0X109A,	-1);
	add_enum_member(id,"LVM_SETGROUPMETRICS",	0X109B,	-1);
	add_enum_member(id,"LVM_GETGROUPMETRICS",	0X109C,	-1);
	add_enum_member(id,"LVM_ENABLEGROUPVIEW",	0X109D,	-1);
	add_enum_member(id,"LVM_SORTGROUPS",	0X109E,	-1);
	add_enum_member(id,"LVM_INSERTGROUPSORTED",	0X109F,	-1);
	add_enum_member(id,"LVM_REMOVEALLGROUPS",	0X10A0,	-1);
	add_enum_member(id,"LVM_HASGROUP",	0X10A1,	-1);
	add_enum_member(id,"LVM_SETTILEVIEWINFO",	0X10A2,	-1);
	add_enum_member(id,"LVM_GETTILEVIEWINFO",	0X10A3,	-1);
	add_enum_member(id,"LVM_SETTILEINFO",	0X10A4,	-1);
	add_enum_member(id,"LVM_GETTILEINFO",	0X10A5,	-1);
	add_enum_member(id,"LVM_SETINSERTMARK",	0X10A6,	-1);
	add_enum_member(id,"LVM_GETINSERTMARK",	0X10A7,	-1);
	add_enum_member(id,"LVM_INSERTMARKHITTEST",	0X10A8,	-1);
	add_enum_member(id,"LVM_GETINSERTMARKRECT",	0X10A9,	-1);
	add_enum_member(id,"LVM_SETINSERTMARKCOLOR",	0X10AA,	-1);
	add_enum_member(id,"LVM_GETINSERTMARKCOLOR",	0X10AB,	-1);
	add_enum_member(id,"LVM_SETINFOTIP",	0X10AD,	-1);
	add_enum_member(id,"LVM_GETSELECTEDCOLUMN",	0X10AE,	-1);
	add_enum_member(id,"LVM_ISGROUPVIEWENABLED",	0X10AF,	-1);
	add_enum_member(id,"LVM_GETOUTLINECOLOR",	0X10B0,	-1);
	add_enum_member(id,"LVM_SETOUTLINECOLOR",	0X10B1,	-1);
	add_enum_member(id,"LVM_CANCELEDITLABEL",	0X10B3,	-1);
	add_enum_member(id,"LVM_MAPINDEXTOID",	0X10B4,	-1);
	add_enum_member(id,"LVM_MAPIDTOINDEX",	0X10B5,	-1);
	add_enum_member(id,"LVM_ISITEMVISIBLE",	0X10B6,	-1);
	add_enum_member(id,"LVM_GETEMPTYTEXT",	0X10CC,	-1);
	add_enum_member(id,"LVM_GETFOOTERRECT",	0X10CD,	-1);
	add_enum_member(id,"LVM_GETFOOTERINFO",	0X10CE,	-1);
	add_enum_member(id,"LVM_GETFOOTERITEMRECT",	0X10CF,	-1);
	add_enum_member(id,"LVM_GETFOOTERITEM",	0X10D0,	-1);
	add_enum_member(id,"LVM_GETITEMINDEXRECT",	0X10D1,	-1);
	add_enum_member(id,"LVM_SETITEMINDEXSTATE",	0X10D2,	-1);
	add_enum_member(id,"LVM_GETNEXTITEMINDEX",	0X10D3,	-1);
	add_enum_member(id,"WM_DLGBORDER",	0X11EF,	-1);
	add_enum_member(id,"WM_DLGSUBCLASS",	0X11F0,	-1);
	add_enum_member(id,"CB_SETMINVISIBLE",	0X1701,	-1);
	add_enum_member(id,"CB_GETMINVISIBLE",	0X1702,	-1);
	add_enum_member(id,"CB_SETCUEBANNER",	0X1703,	-1);
	add_enum_member(id,"CB_GETCUEBANNER",	0X1704,	-1);
	add_enum_member(id,"OCM__BASE",	0X2000,	-1);
	add_enum_member(id,"PBM_SETBKCOLOR",	0X2001,	-1);
	add_enum_member(id,"SB_SETBKCOLOR",	0X2001,	-1);
	add_enum_member(id,"RB_SETCOLORSCHEME",	0X2002,	-1);
	add_enum_member(id,"TB_SETCOLORSCHEME",	0X2002,	-1);
	add_enum_member(id,"RB_GETCOLORSCHEME",	0X2003,	-1);
	add_enum_member(id,"TB_GETCOLORSCHEME",	0X2003,	-1);
	add_enum_member(id,"RB_GETDROPTARGET",	0X2004,	-1);
	add_enum_member(id,"LVM_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"CBEM_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"RB_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"SB_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"TBM_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"TB_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"UDM_SETUNICODEFORMAT",	0X2005,	-1);
	add_enum_member(id,"LVM_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"CBEM_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"RB_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"SB_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"TBM_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"TB_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"UDM_GETUNICODEFORMAT",	0X2006,	-1);
	add_enum_member(id,"RB_SETWINDOWTHEME",	0X200B,	-1);
	add_enum_member(id,"TB_SETWINDOWTHEME",	0X200B,	-1);
	add_enum_member(id,"OCM_CTLCOLOR",	0X2019,	-1);
	add_enum_member(id,"OCM_DRAWITEM",	0X202B,	-1);
	add_enum_member(id,"OCM_MEASUREITEM",	0X202C,	-1);
	add_enum_member(id,"OCM_DELETEITEM",	0X202D,	-1);
	add_enum_member(id,"OCM_VKEYTOITEM",	0X202E,	-1);
	add_enum_member(id,"OCM_CHARTOITEM",	0X202F,	-1);
	add_enum_member(id,"OCM_COMPAREITEM",	0X2039,	-1);
	add_enum_member(id,"OCM_NOTIFY",	0X204E,	-1);
	add_enum_member(id,"OCM_COMMAND",	0X2111,	-1);
	add_enum_member(id,"OCM_HSCROLL",	0X2114,	-1);
	add_enum_member(id,"OCM_VSCROLL",	0X2115,	-1);
	add_enum_member(id,"OCM_CTLCOLORMSGBOX",	0X2132,	-1);
	add_enum_member(id,"OCM_CTLCOLOREDIT",	0X2133,	-1);
	add_enum_member(id,"OCM_CTLCOLORLISTBOX",	0X2134,	-1);
	add_enum_member(id,"OCM_CTLCOLORBTN",	0X2135,	-1);
	add_enum_member(id,"OCM_CTLCOLORDLG",	0X2136,	-1);
	add_enum_member(id,"OCM_CTLCOLORSCROLLBAR",	0X2137,	-1);
	add_enum_member(id,"OCM_CTLCOLORSTATIC",	0X2138,	-1);
	add_enum_member(id,"OCM_PARENTNOTIFY",	0X2210,	-1);
	add_enum_member(id,"WM_APP",	0X8000,	-1);
	add_enum_member(id,"WM_RASDIALEVENT",	0XCCCD,	-1);
	id = add_enum(-1,"MACRO_GWLP",0x2220000);
	add_enum_member(id,"GWLP_USERDATA",	0XFFFFFFFFFFFFFFEB,	-1);
	add_enum_member(id,"GWLP_ID",	0XFFFFFFFFFFFFFFF4,	-1);
	add_enum_member(id,"GWLP_HWNDPARENT",	0XFFFFFFFFFFFFFFF8,	-1);
	add_enum_member(id,"GWLP_HINSTANCE",	0XFFFFFFFFFFFFFFFA,	-1);
	add_enum_member(id,"GWLP_WNDPROC",	0XFFFFFFFFFFFFFFFC,	-1);
	id = add_enum(-1,"MACRO_CSIDL",0x1100000);
	add_enum_member(id,"CSIDL_DESKTOP",	0,	-1);
	add_enum_member(id,"CSIDL_INTERNET",	0X1,	-1);
	add_enum_member(id,"CSIDL_PROGRAMS",	0X2,	-1);
	add_enum_member(id,"CSIDL_CONTROLS",	0X3,	-1);
	add_enum_member(id,"CSIDL_PRINTERS",	0X4,	-1);
	add_enum_member(id,"CSIDL_PERSONAL",	0X5,	-1);
	add_enum_member(id,"CSIDL_MYDOCUMENTS",	0X5,	-1);
	add_enum_member(id,"CSIDL_FAVORITES",	0X6,	-1);
	add_enum_member(id,"CSIDL_STARTUP",	0X7,	-1);
	add_enum_member(id,"CSIDL_RECENT",	0X8,	-1);
	add_enum_member(id,"CSIDL_SENDTO",	0X9,	-1);
	add_enum_member(id,"CSIDL_BITBUCKET",	0XA,	-1);
	add_enum_member(id,"CSIDL_STARTMENU",	0XB,	-1);
	add_enum_member(id,"CSIDL_MYMUSIC",	0XD,	-1);
	add_enum_member(id,"CSIDL_MYVIDEO",	0XE,	-1);
	add_enum_member(id,"CSIDL_DESKTOPDIRECTORY",	0X10,	-1);
	add_enum_member(id,"CSIDL_DRIVES",	0X11,	-1);
	add_enum_member(id,"CSIDL_NETWORK",	0X12,	-1);
	add_enum_member(id,"CSIDL_NETHOOD",	0X13,	-1);
	add_enum_member(id,"CSIDL_FONTS",	0X14,	-1);
	add_enum_member(id,"CSIDL_TEMPLATES",	0X15,	-1);
	add_enum_member(id,"CSIDL_COMMON_STARTMENU",	0X16,	-1);
	add_enum_member(id,"CSIDL_COMMON_PROGRAMS",	0X17,	-1);
	add_enum_member(id,"CSIDL_COMMON_STARTUP",	0X18,	-1);
	add_enum_member(id,"CSIDL_COMMON_DESKTOPDIRECTORY",	0X19,	-1);
	add_enum_member(id,"CSIDL_APPDATA",	0X1A,	-1);
	add_enum_member(id,"CSIDL_PRINTHOOD",	0X1B,	-1);
	add_enum_member(id,"CSIDL_LOCAL_APPDATA",	0X1C,	-1);
	add_enum_member(id,"CSIDL_ALTSTARTUP",	0X1D,	-1);
	add_enum_member(id,"CSIDL_COMMON_ALTSTARTUP",	0X1E,	-1);
	add_enum_member(id,"CSIDL_COMMON_FAVORITES",	0X1F,	-1);
	add_enum_member(id,"CSIDL_INTERNET_CACHE",	0X20,	-1);
	add_enum_member(id,"CSIDL_COOKIES",	0X21,	-1);
	add_enum_member(id,"CSIDL_HISTORY",	0X22,	-1);
	add_enum_member(id,"CSIDL_COMMON_APPDATA",	0X23,	-1);
	add_enum_member(id,"CSIDL_WINDOWS",	0X24,	-1);
	add_enum_member(id,"CSIDL_SYSTEM",	0X25,	-1);
	add_enum_member(id,"CSIDL_PROGRAM_FILES",	0X26,	-1);
	add_enum_member(id,"CSIDL_MYPICTURES",	0X27,	-1);
	add_enum_member(id,"CSIDL_PROFILE",	0X28,	-1);
	add_enum_member(id,"CSIDL_SYSTEMX86",	0X29,	-1);
	add_enum_member(id,"CSIDL_PROGRAM_FILESX86",	0X2A,	-1);
	add_enum_member(id,"CSIDL_PROGRAM_FILES_COMMON",	0X2B,	-1);
	add_enum_member(id,"CSIDL_PROGRAM_FILES_COMMONX86",	0X2C,	-1);
	add_enum_member(id,"CSIDL_COMMON_TEMPLATES",	0X2D,	-1);
	add_enum_member(id,"CSIDL_COMMON_DOCUMENTS",	0X2E,	-1);
	add_enum_member(id,"CSIDL_COMMON_ADMINTOOLS",	0X2F,	-1);
	add_enum_member(id,"CSIDL_ADMINTOOLS",	0X30,	-1);
	add_enum_member(id,"CSIDL_CONNECTIONS",	0X31,	-1);
	add_enum_member(id,"CSIDL_COMMON_MUSIC",	0X35,	-1);
	add_enum_member(id,"CSIDL_COMMON_PICTURES",	0X36,	-1);
	add_enum_member(id,"CSIDL_COMMON_VIDEO",	0X37,	-1);
	add_enum_member(id,"CSIDL_RESOURCES",	0X38,	-1);
	add_enum_member(id,"CSIDL_RESOURCES_LOCALIZED",	0X39,	-1);
	add_enum_member(id,"CSIDL_COMMON_OEM_LINKS",	0X3A,	-1);
	add_enum_member(id,"CSIDL_CDBURN_AREA",	0X3B,	-1);
	add_enum_member(id,"CSIDL_COMPUTERSNEARME",	0X3D,	-1);
	add_enum_member(id,"CSIDL_FLAG_PER_USER_INIT",	0X800,	-1);
	add_enum_member(id,"CSIDL_FLAG_NO_ALIAS",	0X1000,	-1);
	add_enum_member(id,"CSIDL_FLAG_DONT_UNEXPAND",	0X2000,	-1);
	add_enum_member(id,"CSIDL_FLAG_DONT_VERIFY",	0X4000,	-1);
	add_enum_member(id,"CSIDL_FLAG_CREATE",	0X8000,	-1);
	add_enum_member(id,"CSIDL_FLAG_MASK",	0XFF00,	-1);
	id = add_enum(-1,"MACRO_SEEK",0x2220000);
	add_enum_member(id,"SEEK_SET",	0,	-1);
	add_enum_member(id,"SEEK_CUR",	0X1,	-1);
	add_enum_member(id,"SEEK_END",	0X2,	-1);
	id = add_enum(-1,"MACRO__MB",0x2220000);
	add_enum_member(id,"_MB_CP_SBCS",	0,	-1);
	add_enum_member(id,"_MB_CP_UTF8",	0XFDE9,	-1);
	add_enum_member(id,"_MB_CP_LOCALE",	0XFFFFFFFFFFFFFFFC,	-1);
	add_enum_member(id,"_MB_CP_ANSI",	0XFFFFFFFFFFFFFFFD,	-1);
	add_enum_member(id,"_MB_CP_OEM",	0XFFFFFFFFFFFFFFFE,	-1);
	id = add_enum(-1,"MACRO_BIF",0x1100000);
	add_enum_member(id,"BIF_RETURNONLYFSDIRS",	0X1,	-1);
	add_enum_member(id,"BIF_DONTGOBELOWDOMAIN",	0X2,	-1);
	add_enum_member(id,"BIF_STATUSTEXT",	0X4,	-1);
	add_enum_member(id,"BIF_RETURNFSANCESTORS",	0X8,	-1);
	add_enum_member(id,"BIF_EDITBOX",	0X10,	-1);
	add_enum_member(id,"BIF_VALIDATE",	0X20,	-1);
	add_enum_member(id,"BIF_NEWDIALOGSTYLE",	0X40,	-1);
	add_enum_member(id,"BIF_USENEWUI",	0X50,	-1);
	add_enum_member(id,"BIF_BROWSEINCLUDEURLS",	0X80,	-1);
	add_enum_member(id,"BIF_UAHINT",	0X100,	-1);
	add_enum_member(id,"BIF_NONEWFOLDERBUTTON",	0X200,	-1);
	add_enum_member(id,"BIF_NOTRANSLATETARGETS",	0X400,	-1);
	add_enum_member(id,"BIF_BROWSEFORCOMPUTER",	0X1000,	-1);
	add_enum_member(id,"BIF_BROWSEFORPRINTER",	0X2000,	-1);
	add_enum_member(id,"BIF_BROWSEINCLUDEFILES",	0X4000,	-1);
	add_enum_member(id,"BIF_SHAREABLE",	0X8000,	-1);
	add_enum_member(id,"BIF_BROWSEFILEJUNCTIONS",	0X10000,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
	id = Enums_1(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("RUNTIME_FUNCTION");
	id = get_struc_id("UNWIND_INFO_HDR");
	id = get_struc_id("UNWIND_CODE");
	id = get_struc_id("_RTL_CRITICAL_SECTION");
	SetType(get_member_id(id, 0x0), "PRTL_CRITICAL_SECTION_DEBUG");
	SetType(get_member_id(id, 0x8), "LONG");
	SetType(get_member_id(id, 0xC), "LONG");
	SetType(get_member_id(id, 0x10), "HANDLE");
	SetType(get_member_id(id, 0x18), "HANDLE");
	SetType(get_member_id(id, 0x20), "ULONG_PTR");
	id = get_struc_id("INITCOMMONCONTROLSEX");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	id = get_struc_id("WNDCLASSEXW");
	SetType(get_member_id(id, 0x0), "UINT");
	SetType(get_member_id(id, 0x4), "UINT");
	SetType(get_member_id(id, 0x8), "WNDPROC");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "HINSTANCE");
	SetType(get_member_id(id, 0x20), "HICON");
	SetType(get_member_id(id, 0x28), "HCURSOR");
	SetType(get_member_id(id, 0x30), "HBRUSH");
	SetType(get_member_id(id, 0x38), "LPCWSTR");
	SetType(get_member_id(id, 0x40), "LPCWSTR");
	SetType(get_member_id(id, 0x48), "HICON");
	id = get_struc_id("tagACCEL");
	SetType(get_member_id(id, 0x0), "BYTE");
	SetType(get_member_id(id, 0x2), "WORD");
	SetType(get_member_id(id, 0x4), "WORD");
	id = get_struc_id("tagMSG");
	SetType(get_member_id(id, 0x0), "HWND");
	SetType(get_member_id(id, 0x8), "UINT");
	SetType(get_member_id(id, 0x10), "WPARAM");
	SetType(get_member_id(id, 0x18), "LPARAM");
	SetType(get_member_id(id, 0x20), "DWORD");
	SetType(get_member_id(id, 0x24), "POINT");
	id = get_struc_id("POINT");
	SetType(get_member_id(id, 0x0), "LONG");
	SetType(get_member_id(id, 0x4), "LONG");
	id = get_struc_id("_CONTEXT");
	SetType(get_member_id(id, 0x0), "DWORD64");
	SetType(get_member_id(id, 0x8), "DWORD64");
	SetType(get_member_id(id, 0x10), "DWORD64");
	SetType(get_member_id(id, 0x18), "DWORD64");
	SetType(get_member_id(id, 0x20), "DWORD64");
	SetType(get_member_id(id, 0x28), "DWORD64");
	SetType(get_member_id(id, 0x30), "DWORD");
	SetType(get_member_id(id, 0x34), "DWORD");
	SetType(get_member_id(id, 0x38), "WORD");
	SetType(get_member_id(id, 0x3A), "WORD");
	SetType(get_member_id(id, 0x3C), "WORD");
	SetType(get_member_id(id, 0x3E), "WORD");
	SetType(get_member_id(id, 0x40), "WORD");
	SetType(get_member_id(id, 0x42), "WORD");
	SetType(get_member_id(id, 0x44), "DWORD");
	SetType(get_member_id(id, 0x48), "DWORD64");
	SetType(get_member_id(id, 0x50), "DWORD64");
	SetType(get_member_id(id, 0x58), "DWORD64");
	SetType(get_member_id(id, 0x60), "DWORD64");
	SetType(get_member_id(id, 0x68), "DWORD64");
	SetType(get_member_id(id, 0x70), "DWORD64");
	SetType(get_member_id(id, 0x78), "DWORD64");
	SetType(get_member_id(id, 0x80), "DWORD64");
	SetType(get_member_id(id, 0x88), "DWORD64");
	SetType(get_member_id(id, 0x90), "DWORD64");
	SetType(get_member_id(id, 0x98), "DWORD64");
	SetType(get_member_id(id, 0xA0), "DWORD64");
	SetType(get_member_id(id, 0xA8), "DWORD64");
	SetType(get_member_id(id, 0xB0), "DWORD64");
	SetType(get_member_id(id, 0xB8), "DWORD64");
	SetType(get_member_id(id, 0xC0), "DWORD64");
	SetType(get_member_id(id, 0xC8), "DWORD64");
	SetType(get_member_id(id, 0xD0), "DWORD64");
	SetType(get_member_id(id, 0xD8), "DWORD64");
	SetType(get_member_id(id, 0xE0), "DWORD64");
	SetType(get_member_id(id, 0xE8), "DWORD64");
	SetType(get_member_id(id, 0xF0), "DWORD64");
	SetType(get_member_id(id, 0xF8), "DWORD64");
	SetType(get_member_id(id, 0x100), "union _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB");
	SetType(get_member_id(id, 0x300), "M128A[26]");
	SetType(get_member_id(id, 0x4A0), "DWORD64");
	SetType(get_member_id(id, 0x4A8), "DWORD64");
	SetType(get_member_id(id, 0x4B0), "DWORD64");
	SetType(get_member_id(id, 0x4B8), "DWORD64");
	SetType(get_member_id(id, 0x4C0), "DWORD64");
	SetType(get_member_id(id, 0x4C8), "DWORD64");
	id = get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB");
	SetType(get_member_id(id, 0x0), "XMM_SAVE_AREA32");
	SetType(get_member_id(id, 0x1), "struct _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414");
	id = get_struc_id("XMM_SAVE_AREA32");
	SetType(get_member_id(id, 0x0), "WORD");
	SetType(get_member_id(id, 0x2), "WORD");
	SetType(get_member_id(id, 0x4), "BYTE");
	SetType(get_member_id(id, 0x5), "BYTE");
	SetType(get_member_id(id, 0x6), "WORD");
	SetType(get_member_id(id, 0x8), "DWORD");
	SetType(get_member_id(id, 0xC), "WORD");
	SetType(get_member_id(id, 0xE), "WORD");
	SetType(get_member_id(id, 0x10), "DWORD");
	SetType(get_member_id(id, 0x14), "WORD");
	SetType(get_member_id(id, 0x16), "WORD");
	SetType(get_member_id(id, 0x18), "DWORD");
	SetType(get_member_id(id, 0x1C), "DWORD");
	SetType(get_member_id(id, 0x20), "M128A[8]");
	SetType(get_member_id(id, 0xA0), "M128A[16]");
	SetType(get_member_id(id, 0x1A0), "BYTE[96]");
	id = get_struc_id("M128A");
	SetType(get_member_id(id, 0x0), "ULONGLONG");
	SetType(get_member_id(id, 0x8), "LONGLONG");
	id = get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414");
	SetType(get_member_id(id, 0x0), "M128A[2]");
	SetType(get_member_id(id, 0x20), "M128A[8]");
	SetType(get_member_id(id, 0xA0), "M128A");
	SetType(get_member_id(id, 0xB0), "M128A");
	SetType(get_member_id(id, 0xC0), "M128A");
	SetType(get_member_id(id, 0xD0), "M128A");
	SetType(get_member_id(id, 0xE0), "M128A");
	SetType(get_member_id(id, 0xF0), "M128A");
	SetType(get_member_id(id, 0x100), "M128A");
	SetType(get_member_id(id, 0x110), "M128A");
	SetType(get_member_id(id, 0x120), "M128A");
	SetType(get_member_id(id, 0x130), "M128A");
	SetType(get_member_id(id, 0x140), "M128A");
	SetType(get_member_id(id, 0x150), "M128A");
	SetType(get_member_id(id, 0x160), "M128A");
	SetType(get_member_id(id, 0x170), "M128A");
	SetType(get_member_id(id, 0x180), "M128A");
	SetType(get_member_id(id, 0x190), "M128A");
	id = get_struc_id("z_stream");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x8), "unsigned int");
	SetType(get_member_id(id, 0xC), "unsigned int");
	SetType(get_member_id(id, 0x10), "unsigned __int8 *");
	SetType(get_member_id(id, 0x18), "unsigned int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "char *");
	SetType(get_member_id(id, 0x28), "struct internal_state *");
	SetType(get_member_id(id, 0x30), "alloc_func");
	SetType(get_member_id(id, 0x38), "free_func");
	SetType(get_member_id(id, 0x40), "void *");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "unsigned int");
	SetType(get_member_id(id, 0x50), "unsigned int");
	id = get_struc_id("SHELLEXECUTEINFOW");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "ULONG");
	SetType(get_member_id(id, 0x8), "HWND");
	SetType(get_member_id(id, 0x10), "LPCWSTR");
	SetType(get_member_id(id, 0x18), "LPCWSTR");
	SetType(get_member_id(id, 0x20), "LPCWSTR");
	SetType(get_member_id(id, 0x28), "LPCWSTR");
	SetType(get_member_id(id, 0x30), "int");
	SetType(get_member_id(id, 0x38), "HINSTANCE");
	SetType(get_member_id(id, 0x40), "void *");
	SetType(get_member_id(id, 0x48), "LPCWSTR");
	SetType(get_member_id(id, 0x50), "HKEY");
	SetType(get_member_id(id, 0x58), "DWORD");
	SetType(get_member_id(id, 0x60), "union _SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4");
	SetType(get_member_id(id, 0x68), "HANDLE");
	id = get_struc_id("_SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4");
	SetType(get_member_id(id, 0x0), "HANDLE");
	SetType(get_member_id(id, 0x1), "HANDLE");
	id = get_struc_id("_IMAGE_RUNTIME_FUNCTION_ENTRY::$1FC7DDE9AB0EB2C3B18F286E3EAA9FDE");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x1), "DWORD");
	id = get_struc_id("inflate_state");
	SetType(get_member_id(id, 0x0), "z_streamp");
	SetType(get_member_id(id, 0x8), "inflate_mode");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "unsigned int");
	SetType(get_member_id(id, 0x20), "unsigned int");
	SetType(get_member_id(id, 0x24), "unsigned int");
	SetType(get_member_id(id, 0x28), "gz_header *");
	SetType(get_member_id(id, 0x30), "unsigned int");
	SetType(get_member_id(id, 0x34), "unsigned int");
	SetType(get_member_id(id, 0x38), "unsigned int");
	SetType(get_member_id(id, 0x3C), "unsigned int");
	SetType(get_member_id(id, 0x40), "unsigned __int8 *");
	SetType(get_member_id(id, 0x48), "unsigned int");
	SetType(get_member_id(id, 0x4C), "unsigned int");
	SetType(get_member_id(id, 0x50), "unsigned int");
	SetType(get_member_id(id, 0x54), "unsigned int");
	SetType(get_member_id(id, 0x58), "unsigned int");
	SetType(get_member_id(id, 0x60), "const code *");
	SetType(get_member_id(id, 0x68), "const code *");
	SetType(get_member_id(id, 0x70), "unsigned int");
	SetType(get_member_id(id, 0x74), "unsigned int");
	SetType(get_member_id(id, 0x78), "unsigned int");
	SetType(get_member_id(id, 0x7C), "unsigned int");
	SetType(get_member_id(id, 0x80), "unsigned int");
	SetType(get_member_id(id, 0x84), "unsigned int");
	SetType(get_member_id(id, 0x88), "code *");
	SetType(get_member_id(id, 0x90), "unsigned __int16[320]");
	SetType(get_member_id(id, 0x310), "unsigned __int16[288]");
	SetType(get_member_id(id, 0x550), "code[1444]");
	SetType(get_member_id(id, 0x1BE0), "int");
	SetType(get_member_id(id, 0x1BE4), "int");
	SetType(get_member_id(id, 0x1BE8), "unsigned int");
	id = get_struc_id("code");
	SetType(get_member_id(id, 0x0), "unsigned __int8");
	SetType(get_member_id(id, 0x1), "unsigned __int8");
	SetType(get_member_id(id, 0x2), "unsigned __int16");
	id = get_struc_id("unk001");
	SetType(get_member_id(id, 0x0), "unk001 *");
	SetType(get_member_id(id, 0x8), "_QWORD");
	SetType(get_member_id(id, 0x10), "_QWORD");
	id = get_struc_id("RegSingleObject");
	SetType(get_member_id(id, 0x0), "_QWORD");
	SetType(get_member_id(id, 0x8), "_QWORD");
	SetType(get_member_id(id, 0x10), "unk001 *");
	SetType(get_member_id(id, 0x18), "PHANDLE");
	SetType(get_member_id(id, 0x20), "LPHANDLE");
	id = get_struc_id("strNode");
	SetType(get_member_id(id, 0x0), "char *");
	SetType(get_member_id(id, 0x8), "_QWORD");
	SetType(get_member_id(id, 0x10), "_QWORD");
	id = get_struc_id("stru_0x60");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "QWORD");
	SetType(get_member_id(id, 0x28), "QWORD");
	SetType(get_member_id(id, 0x30), "QWORD");
	SetType(get_member_id(id, 0x38), "CRITICAL_SECTION");
	id = get_struc_id("CRITICAL_SECTION");
	SetType(get_member_id(id, 0x0), "PRTL_CRITICAL_SECTION_DEBUG");
	SetType(get_member_id(id, 0x8), "LONG");
	SetType(get_member_id(id, 0xC), "LONG");
	SetType(get_member_id(id, 0x10), "HANDLE");
	SetType(get_member_id(id, 0x18), "HANDLE");
	SetType(get_member_id(id, 0x20), "ULONG_PTR");
	id = get_struc_id("stru0x28");
	SetType(get_member_id(id, 0x0), "stru0x20");
	SetType(get_member_id(id, 0x20), "QWORD");
	id = get_struc_id("stru0x20");
	SetType(get_member_id(id, 0x0), "stru0x20 *");
	SetType(get_member_id(id, 0x8), "stru0x20 *");
	SetType(get_member_id(id, 0x10), "HANDLE");
	SetType(get_member_id(id, 0x18), "QWORD");
	id = get_struc_id("_GUID");
	SetType(get_member_id(id, 0x0), "unsigned int");
	SetType(get_member_id(id, 0x4), "unsigned __int16");
	SetType(get_member_id(id, 0x6), "unsigned __int16");
	SetType(get_member_id(id, 0x8), "unsigned __int8[8]");
	id = get_struc_id("MD5Context");
	SetType(get_member_id(id, 0x0), "uint32_t[4]");
	SetType(get_member_id(id, 0x10), "uint64_t");
	id = get_struc_id("MD5");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "uint8_t[64]");
	SetType(get_member_id(id, 0x44), "MD5Context");
	SetType(get_member_id(id, 0x5C), "char[64]");
	id = get_struc_id("file_holder");
	SetType(get_member_id(id, 0x0), "HANDLE");
	SetType(get_member_id(id, 0x8), "LPCVOID");
	SetType(get_member_id(id, 0x10), "DWORD");
	SetType(get_member_id(id, 0x14), "DWORD");
	SetType(get_member_id(id, 0x18), "DWORD");
	SetType(get_member_id(id, 0x1C), "DWORD");
	SetType(get_member_id(id, 0x20), "DWORD");
	SetType(get_member_id(id, 0x24), "DWORD");
	id = get_struc_id("stru_601");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "root_601 *");
	SetType(get_member_id(id, 0x20), "QWORD");
	SetType(get_member_id(id, 0x28), "QWORD");
	SetType(get_member_id(id, 0x30), "QWORD");
	SetType(get_member_id(id, 0x38), "QWORD");
	SetType(get_member_id(id, 0x40), "QWORD");
	SetType(get_member_id(id, 0x48), "root_601 *");
	SetType(get_member_id(id, 0x50), "QWORD");
	SetType(get_member_id(id, 0x58), "DWORD");
	SetType(get_member_id(id, 0x5C), "BYTE");
	SetType(get_member_id(id, 0x5D), "BYTE");
	SetType(get_member_id(id, 0x5E), "BYTE");
	SetType(get_member_id(id, 0x5F), "BYTE");
	id = get_struc_id("root_601");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	id = get_struc_id("myV10_0x28");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "DWORD");
	SetType(get_member_id(id, 0x24), "DWORD");
	id = get_struc_id("myV13_0x60");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "QWORD");
	SetType(get_member_id(id, 0x28), "DWORD");
	SetType(get_member_id(id, 0x2C), "DWORD");
	SetType(get_member_id(id, 0x30), "DWORD");
	SetType(get_member_id(id, 0x34), "DWORD");
	SetType(get_member_id(id, 0x38), "CRITICAL_SECTION");
	id = get_struc_id("stru_602");
	SetType(get_member_id(id, 0x0), "stru_602 *");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "signed __int64");
	SetType(get_member_id(id, 0x28), "DWORD");
	SetType(get_member_id(id, 0x2C), "DWORD");
	SetType(get_member_id(id, 0x30), "QWORD");
	SetType(get_member_id(id, 0x38), "DWORD");
	SetType(get_member_id(id, 0x3C), "int");
	SetType(get_member_id(id, 0x40), "QWORD");
	SetType(get_member_id(id, 0x48), "stru_602 *");
	SetType(get_member_id(id, 0x50), "QWORD");
	SetType(get_member_id(id, 0x58), "QWORD");
	id = get_struc_id("subs");
	SetType(get_member_id(id, 0x0), "myV13_0x60 *");
	SetType(get_member_id(id, 0x1), "myV10_0x28 *");
	id = get_struc_id("exErrItem");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "wchar_t *");
	id = get_struc_id("_EXCEPTION_POINTERS");
	SetType(get_member_id(id, 0x0), "PEXCEPTION_RECORD");
	SetType(get_member_id(id, 0x8), "PCONTEXT");
	id = get_struc_id("EXCEPTION_RECORD");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "struct _EXCEPTION_RECORD *");
	SetType(get_member_id(id, 0x10), "PVOID");
	SetType(get_member_id(id, 0x18), "DWORD");
	SetType(get_member_id(id, 0x20), "ULONG_PTR[15]");
	id = get_struc_id("_browseinfoA");
	SetType(get_member_id(id, 0x0), "HWND");
	SetType(get_member_id(id, 0x8), "LPCITEMIDLIST");
	SetType(get_member_id(id, 0x10), "LPSTR");
	SetType(get_member_id(id, 0x18), "LPCSTR");
	SetType(get_member_id(id, 0x20), "UINT");
	SetType(get_member_id(id, 0x28), "BFFCALLBACK");
	SetType(get_member_id(id, 0x30), "LPARAM");
	SetType(get_member_id(id, 0x38), "int");
	id = get_struc_id("_browseinfoW");
	SetType(get_member_id(id, 0x0), "HWND");
	SetType(get_member_id(id, 0x8), "LPCITEMIDLIST");
	SetType(get_member_id(id, 0x10), "LPWSTR");
	SetType(get_member_id(id, 0x18), "LPCWSTR");
	SetType(get_member_id(id, 0x20), "UINT");
	SetType(get_member_id(id, 0x28), "BFFCALLBACK");
	SetType(get_member_id(id, 0x30), "LPARAM");
	SetType(get_member_id(id, 0x38), "int");
	id = get_struc_id("unk028");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "QWORD");
	id = get_struc_id("md5_VT");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "MD5 *(__fastcall *)(__int64 a1, int a2)");
	SetType(get_member_id(id, 0x10), "char (__fastcall *)(MD5 *a1, __int64 a2, unsigned int a3)");
	SetType(get_member_id(id, 0x18), "void *(__fastcall *)(MD5 *a1)");
	SetType(get_member_id(id, 0x20), "BOOL (__fastcall *)(void *a1)");
	id = get_struc_id("md6_VT");
	SetType(get_member_id(id, 0x0), "QWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD");
	SetType(get_member_id(id, 0x20), "QWORD");
	id = get_struc_id("MD6Context");
	SetType(get_member_id(id, 0x0), "uint32_t[5]");
	SetType(get_member_id(id, 0x14), "uint32_t[2]");
	SetType(get_member_id(id, 0x1C), "unsigned __int8[60]");
	SetType(get_member_id(id, 0x58), "uint64_t");
	id = get_struc_id("MD6");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "uint8_t[64]");
	SetType(get_member_id(id, 0x44), "MD6Context");
	SetType(get_member_id(id, 0xA4), "char[64]");
	id = get_struc_id("s30");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "QWORD");
	SetType(get_member_id(id, 0x10), "QWORD");
	SetType(get_member_id(id, 0x18), "QWORD *");
	SetType(get_member_id(id, 0x20), "QWORD");
	SetType(get_member_id(id, 0x28), "DWORD");
	SetType(get_member_id(id, 0x2C), "DWORD");
	id = get_struc_id("g_data");
	SetType(get_member_id(id, 0x0), "HANDLE");
	SetType(get_member_id(id, 0x8), "HINSTANCE");
	SetType(get_member_id(id, 0x10), "__int64");
	SetType(get_member_id(id, 0x18), "__int64");
	SetType(get_member_id(id, 0x20), "__int64");
	SetType(get_member_id(id, 0x28), "__int64");
	SetType(get_member_id(id, 0x30), "__int64");
	SetType(get_member_id(id, 0x38), "__int64");
	SetType(get_member_id(id, 0x40), "__int64");
	SetType(get_member_id(id, 0x48), "__int64");
	SetType(get_member_id(id, 0x50), "__int64 *");
	SetType(get_member_id(id, 0x58), "__int64");
	SetType(get_member_id(id, 0x60), "__int64");
	SetType(get_member_id(id, 0x68), "__int64");
	SetType(get_member_id(id, 0x70), "__int64");
	SetType(get_member_id(id, 0x78), "__int64");
	SetType(get_member_id(id, 0x80), "__int64");
	SetType(get_member_id(id, 0x88), "wchar_t *");
	SetType(get_member_id(id, 0x90), "HMODULE");
	SetType(get_member_id(id, 0x98), "__int64");
	SetType(get_member_id(id, 0xA0), "wchar_t *");
	SetType(get_member_id(id, 0xA8), "wchar_t *");
	SetType(get_member_id(id, 0xB0), "__int64");
	SetType(get_member_id(id, 0xB8), "__int64");
	SetType(get_member_id(id, 0xC0), "wchar_t *");
	SetType(get_member_id(id, 0xC8), "__int64");
	SetType(get_member_id(id, 0xD0), "__int64");
	SetType(get_member_id(id, 0xD8), "__int64");
	SetType(get_member_id(id, 0xE0), "__int64");
	SetType(get_member_id(id, 0xE8), "__int64");
	SetType(get_member_id(id, 0xF0), "__int64");
	SetType(get_member_id(id, 0xF8), "__int64");
	SetType(get_member_id(id, 0x100), "__int64");
	SetType(get_member_id(id, 0x108), "__int64");
	SetType(get_member_id(id, 0x110), "__int64");
	SetType(get_member_id(id, 0x118), "g200 *");
	SetType(get_member_id(id, 0x120), "__int64");
	SetType(get_member_id(id, 0x128), "void *");
	SetType(get_member_id(id, 0x130), "__int64");
	SetType(get_member_id(id, 0x138), "void *");
	SetType(get_member_id(id, 0x140), "__int64");
	SetType(get_member_id(id, 0x148), "void *");
	SetType(get_member_id(id, 0x150), "__int64");
	SetType(get_member_id(id, 0x158), "void *");
	SetType(get_member_id(id, 0x160), "__int64");
	SetType(get_member_id(id, 0x168), "__int64");
	id = get_struc_id("__m128i");
	SetType(get_member_id(id, 0x0), "__int8[16]");
	SetType(get_member_id(id, 0x1), "__int16[8]");
	SetType(get_member_id(id, 0x2), "__int32[4]");
	SetType(get_member_id(id, 0x3), "__int64[2]");
	SetType(get_member_id(id, 0x4), "unsigned __int8[16]");
	SetType(get_member_id(id, 0x5), "unsigned __int16[8]");
	SetType(get_member_id(id, 0x6), "unsigned __int32[4]");
	SetType(get_member_id(id, 0x7), "unsigned __int64[2]");
	id = get_struc_id("g200");
	SetType(get_member_id(id, 0x0), "unsigned __int64");
	SetType(get_member_id(id, 0x8), "WCHAR *");
	SetType(get_member_id(id, 0x10), "unsigned __int32");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"RUNTIME_FUNCTION",0);
	id = add_struc(-1,"UNWIND_INFO_HDR",0);
	id = add_struc(-1,"UNWIND_CODE",0);
	id = add_struc(-1,"_RTL_CRITICAL_SECTION",0);
	id = add_struc(-1,"INITCOMMONCONTROLSEX",0);
	id = add_struc(-1,"WNDCLASSEXW",0);
	id = add_struc(-1,"tagACCEL",0);
	id = add_struc(-1,"tagMSG",0);
	id = add_struc(-1,"POINT",0);
	id = add_struc(-1,"_CONTEXT",0);
	id = add_struc(-1,"_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB",1);
	id = add_struc(-1,"XMM_SAVE_AREA32",0);
	id = add_struc(-1,"M128A",0);
	id = add_struc(-1,"_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414",0);
	id = add_struc(-1,"z_stream",0);
	id = add_struc(-1,"SHELLEXECUTEINFOW",0);
	id = add_struc(-1,"_SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4",1);
	id = add_struc(-1,"_IMAGE_RUNTIME_FUNCTION_ENTRY::$1FC7DDE9AB0EB2C3B18F286E3EAA9FDE",1);
	id = add_struc(-1,"inflate_state",0);
	id = add_struc(-1,"code",0);
	id = add_struc(-1,"unk001",0);
	id = add_struc(-1,"RegSingleObject",0);
	id = add_struc(-1,"strNode",0);
	id = add_struc(-1,"stru_0x60",0);
	id = add_struc(-1,"CRITICAL_SECTION",0);
	id = add_struc(-1,"stru0x28",0);
	id = add_struc(-1,"stru0x20",0);
	id = add_struc(-1,"_GUID",0);
	id = add_struc(-1,"MD5Context",0);
	id = add_struc(-1,"MD5",0);
	id = add_struc(-1,"file_holder",0);
	id = add_struc(-1,"stru_601",0);
	id = add_struc(-1,"root_601",0);
	id = add_struc(-1,"myV10_0x28",0);
	id = add_struc(-1,"myV13_0x60",0);
	id = add_struc(-1,"stru_602",0);
	id = add_struc(-1,"subs",1);
	id = add_struc(-1,"exErrItem",0);
	id = add_struc(-1,"_EXCEPTION_POINTERS",0);
	id = add_struc(-1,"EXCEPTION_RECORD",0);
	id = add_struc(-1,"_browseinfoA",0);
	id = add_struc(-1,"_browseinfoW",0);
	id = add_struc(-1,"unk028",0);
	id = add_struc(-1,"md5_VT",0);
	id = add_struc(-1,"md6_VT",0);
	id = add_struc(-1,"MD6Context",0);
	id = add_struc(-1,"MD6",0);
	id = add_struc(-1,"s30",0);
	id = add_struc(-1,"g_data",0);
	id = add_struc(-1,"__m128i",1);
	id = add_struc(-1,"g200",0);
	
	id = get_struc_id("RUNTIME_FUNCTION");
	mid = add_struc_member(id,"FunctionStart",	0,	0x25500400,	0X140000000,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000019);
	mid = add_struc_member(id,"FunctionEnd",	0X4,	0x25500400,	0X140000000,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000039);
	mid = add_struc_member(id,"UnwindInfo",	0X8,	0x25500400,	0X140000000,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000019);
	
	id = get_struc_id("UNWIND_INFO_HDR");
	mid = add_struc_member(id,"Ver3_Flags",	0,	0x1100400,	-1,	1);
	mid = add_struc_member(id,"PrologSize",	0X1,	0x1100400,	-1,	1);
	mid = add_struc_member(id,"CntUnwindCodes",	0X2,	0x1100400,	-1,	1);
	mid = add_struc_member(id,"FrReg_FrRegOff",	0X3,	0x1100400,	-1,	1);
	
	id = get_struc_id("UNWIND_CODE");
	mid = add_struc_member(id,"PrologOff",	0,	0x1100400,	-1,	1);
	mid = add_struc_member(id,"OpCode_OpInfo",	0X1,	0x1100400,	-1,	1);
	
	id = get_struc_id("_RTL_CRITICAL_SECTION");
	mid = add_struc_member(id,"DebugInfo",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"LockCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RecursionCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"OwningThread",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"LockSemaphore",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SpinCount",	0X20,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("INITCOMMONCONTROLSEX");
	mid = add_struc_member(id,"dwSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwICC",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("WNDCLASSEXW");
	mid = add_struc_member(id,"cbSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"style",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpfnWndProc",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"cbClsExtra",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cbWndExtra",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hInstance",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hIcon",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hCursor",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hbrBackground",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpszMenuName",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpszClassName",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hIconSm",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("tagACCEL");
	mid = add_struc_member(id,"fVirt",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"key",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"cmd",	0X4,	0x10000400,	-1,	2);
	set_struc_align(id,1);
	
	id = get_struc_id("POINT");
	mid = add_struc_member(id,"x",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"y",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("tagMSG");
	mid = add_struc_member(id,"hwnd",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"message",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wParam",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"lParam",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"time",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pt",	0X24,	0x60000400,	get_struc_id("POINT"),	8);
	set_struc_align(id,3);
	
	id = get_struc_id("M128A");
	mid = add_struc_member(id,"Low",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"High",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,4);
	
	id = get_struc_id("XMM_SAVE_AREA32");
	mid = add_struc_member(id,"ControlWord",	0,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"StatusWord",	0X2,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"TagWord",	0X4,	0x000400,	-1,	1);
	mid = add_struc_member(id,"Reserved1",	0X5,	0x000400,	-1,	1);
	mid = add_struc_member(id,"ErrorOpcode",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"ErrorOffset",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ErrorSelector",	0XC,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Reserved2",	0XE,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"DataOffset",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DataSelector",	0X14,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Reserved3",	0X16,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"_MxCsr",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"MxCsr_Mask",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"FloatRegisters",	0X20,	0x60000400,	get_struc_id("M128A"),	128);
	mid = add_struc_member(id,"XmmRegisters",	0XA0,	0x60000400,	get_struc_id("M128A"),	256);
	mid = add_struc_member(id,"Reserved4",	0X1A0,	0x000400,	-1,	96);
	set_struc_align(id,4);
	
	id = get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414");
	mid = add_struc_member(id,"Header",	0,	0x60000400,	get_struc_id("M128A"),	32);
	mid = add_struc_member(id,"Legacy",	0X20,	0x60000400,	get_struc_id("M128A"),	128);
	mid = add_struc_member(id,"_Xmm0",	0XA0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm1",	0XB0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm2",	0XC0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm3",	0XD0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm4",	0XE0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm5",	0XF0,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm6",	0X100,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm7",	0X110,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm8",	0X120,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm9",	0X130,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm10",	0X140,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm11",	0X150,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm12",	0X160,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm13",	0X170,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm14",	0X180,	0x60000400,	get_struc_id("M128A"),	16);
	mid = add_struc_member(id,"_Xmm15",	0X190,	0x60000400,	get_struc_id("M128A"),	16);
	set_struc_align(id,4);
	
	id = get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB");
	mid = add_struc_member(id,"FltSave",	0,	0x60000400,	get_struc_id("XMM_SAVE_AREA32"),	512);
	mid = add_struc_member(id,"anonymous_0",	0,	0x60000400,	get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414"),	416);
	set_struc_align(id,4);
	
	id = get_struc_id("_CONTEXT");
	mid = add_struc_member(id,"P1Home",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"P2Home",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"P3Home",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"P4Home",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"P5Home",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"P6Home",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"ContextFlags",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_MxCsr",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"SegCs",	0X38,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SegDs",	0X3A,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SegEs",	0X3C,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SegFs",	0X3E,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SegGs",	0X40,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"SegSs",	0X42,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"EFlags",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Dr0",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Dr1",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Dr2",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Dr3",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Dr6",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"Dr7",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rax",	0X78,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rcx",	0X80,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rdx",	0X88,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rbx",	0X90,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rsp",	0X98,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rbp",	0XA0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rsi",	0XA8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rdi",	0XB0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R8",	0XB8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R9",	0XC0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R10",	0XC8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R11",	0XD0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R12",	0XD8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R13",	0XE0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R14",	0XE8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_R15",	0XF0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"_Rip",	0XF8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"anonymous_0",	0X100,	0x60000400,	get_struc_id("_CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB"),	512);
	mid = add_struc_member(id,"VectorRegister",	0X300,	0x60000400,	get_struc_id("M128A"),	416);
	mid = add_struc_member(id,"VectorControl",	0X4A0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"DebugControl",	0X4A8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"LastBranchToRip",	0X4B0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"LastBranchFromRip",	0X4B8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"LastExceptionToRip",	0X4C0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"LastExceptionFromRip",	0X4C8,	0x30000400,	-1,	8);
	set_struc_align(id,4);
	
	id = get_struc_id("z_stream");
	mid = add_struc_member(id,"next_in",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"avail_in",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"total_in",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"next_out",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"avail_out",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"total_out",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"msg",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"state",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"zalloc",	0X30,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"zfree",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"opaque",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"data_type",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"adler",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"reserved",	0X50,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("_SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4");
	mid = add_struc_member(id,"hIcon",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hMonitor",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("SHELLEXECUTEINFOW");
	mid = add_struc_member(id,"cbSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"fMask",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hwnd",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpVerb",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpFile",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpParameters",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpDirectory",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"nShow",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hInstApp",	0X38,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpIDList",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpClass",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hkeyClass",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"dwHotKey",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"anonymous_0",	0X60,	0x60000400,	get_struc_id("_SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4"),	8);
	mid = add_struc_member(id,"hProcess",	0X68,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("_IMAGE_RUNTIME_FUNCTION_ENTRY::$1FC7DDE9AB0EB2C3B18F286E3EAA9FDE");
	mid = add_struc_member(id,"UnwindInfoAddress",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"UnwindData",	0,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("code");
	mid = add_struc_member(id,"op",	0,	0x000400,	-1,	1);
	mid = add_struc_member(id,"bits",	0X1,	0x000400,	-1,	1);
	mid = add_struc_member(id,"val",	0X2,	0x10000400,	-1,	2);
	set_struc_align(id,1);
	
	id = get_struc_id("inflate_state");
	mid = add_struc_member(id,"strm",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"mode",	0X8,	0x28800400,	get_enum("inflate_mode"),	4);
	mid = add_struc_member(id,"last",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wrap",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"havedict",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"flags",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dmax",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"check",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"total",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"head",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"wbits",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wsize",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"whave",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wnext",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"window",	0X40,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hold",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"bits",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"length",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"offset",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"extra",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lencode",	0X60,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"distcode",	0X68,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lenbits",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"distbits",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ncode",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nlen",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ndist",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"have",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"next",	0X88,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lens",	0X90,	0x10000400,	-1,	640);
	mid = add_struc_member(id,"work",	0X310,	0x10000400,	-1,	576);
	mid = add_struc_member(id,"codes",	0X550,	0x60000400,	get_struc_id("code"),	5776);
	mid = add_struc_member(id,"sane",	0X1BE0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"back",	0X1BE4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"was",	0X1BE8,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("unk001");
	mid = add_struc_member(id,"fld01_next",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"fld02_freefn",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fld03_unk01",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("RegSingleObject");
	mid = add_struc_member(id,"root",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"next",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fld03_uk01",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"phNewWaitObject",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpTargetHandle",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("strNode");
	mid = add_struc_member(id,"str",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ssize",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"slen",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("CRITICAL_SECTION");
	mid = add_struc_member(id,"DebugInfo",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"LockCount",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RecursionCount",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"OwningThread",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"LockSemaphore",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"SpinCount",	0X20,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("stru_0x60");
	mid = add_struc_member(id,"itemsize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sizex8",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"qallocatedx8",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"mem",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fld03",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fn_free",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fld05",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"fld06",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"lpCriticalSection",	0X38,	0x60000400,	get_struc_id("CRITICAL_SECTION"),	40);
	set_struc_align(id,3);
	
	id = get_struc_id("stru0x20");
	mid = add_struc_member(id,"left",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"right",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"hObject",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"index",	0X18,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("stru0x28");
	mid = add_struc_member(id,"s20",	0,	0x60000400,	get_struc_id("stru0x20"),	32);
	mid = add_struc_member(id,"fld04",	0X20,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("_GUID");
	mid = add_struc_member(id,"Data1",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Data2",	0X4,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Data3",	0X6,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"Data4",	0X8,	0x000400,	-1,	8);
	set_struc_align(id,2);
	
	id = get_struc_id("MD5Context");
	mid = add_struc_member(id,"buffer",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"size",	0X10,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MD5");
	mid = add_struc_member(id,"unk00",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"padding",	0X4,	0x000400,	-1,	64);
	mid = add_struc_member(id,"ctx",	0X44,	0x60000400,	get_struc_id("MD5Context"),	24);
	mid = add_struc_member(id,"unk",	0X5C,	0x000400,	-1,	64);
	
	id = get_struc_id("file_holder");
	mid = add_struc_member(id,"handle",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpBuffer",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"alloc_size",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"seekpos",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"a18",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"doSeek",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwCreationDisposition",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"IsSeekCur",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("stru_601");
	mid = add_struc_member(id,"f0",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f1",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f2",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"root_next",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"f4",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f5",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"aMASK",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"treeIter",	0X38,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f8",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"proot",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"size_plus_0x10",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"arg4",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"f5c",	0X5C,	0x000400,	-1,	1);
	mid = add_struc_member(id,"maskwalk",	0X5D,	0x000400,	-1,	1);
	mid = add_struc_member(id,"DoHeapAlloc",	0X5E,	0x000400,	-1,	1);
	mid = add_struc_member(id,"f5f",	0X5F,	0x000400,	-1,	1);
	set_struc_align(id,3);
	
	id = get_struc_id("root_601");
	mid = add_struc_member(id,"left",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"right",	0X8,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("myV10_0x28");
	mid = add_struc_member(id,"parent",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"left",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"right",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"size_plus",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"aFlags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"nn",	0X24,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("myV13_0x60");
	mid = add_struc_member(id,"f0",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f1",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f2",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f3",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"sizePlsu0x18",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"size",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"items",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CS_initialized",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"f34",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"_CS",	0X38,	0x60000400,	get_struc_id("CRITICAL_SECTION"),	40);
	
	id = get_struc_id("stru_602");
	mid = add_struc_member(id,"parent",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"subitems_8xcount",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f2",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"subitems_10PlsSize",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"mask",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"blockIdx",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"f2C",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"size",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"arg2",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"count",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"mask_walk_res",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"root",	0X48,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"f10",	0X50,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"treeIter",	0X58,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("subs");
	mid = add_struc_member(id,"a",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"b",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	
	id = get_struc_id("exErrItem");
	mid = add_struc_member(id,"code",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"str",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("_EXCEPTION_POINTERS");
	mid = add_struc_member(id,"ExceptionRecord",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ContextRecord",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("EXCEPTION_RECORD");
	mid = add_struc_member(id,"ExceptionCode",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionFlags",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionRecord",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ExceptionAddress",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"NumberParameters",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExceptionInformation",	0X20,	0x30000400,	-1,	120);
	set_struc_align(id,3);
	
	id = get_struc_id("_browseinfoA");
	mid = add_struc_member(id,"hwndOwner",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"pidlRoot",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"pszDisplayName",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpszTitle",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ulFlags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpfn",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lParam",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"iImage",	0X38,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("_browseinfoW");
	mid = add_struc_member(id,"hwndOwner",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"pidlRoot",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"pszDisplayName",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lpszTitle",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"ulFlags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpfn",	0X28,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"lParam",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"iImage",	0X38,	0x20000400,	-1,	4);
	set_struc_align(id,3);
	
	id = get_struc_id("unk028");
	mid = add_struc_member(id,"f0",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f1",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"offset",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"function",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"arg3",	0X20,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("md5_VT");
	mid = add_struc_member(id,"id",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"ctor",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"f1_md5_Update",	0X10,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"f2_md5_Stuff",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"dtor",	0X20,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	set_struc_align(id,3);
	
	id = get_struc_id("md6_VT");
	mid = add_struc_member(id,"id",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"ctor",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f1",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"f2",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"dtor",	0X20,	0x30000400,	-1,	8);
	set_struc_align(id,3);
	
	id = get_struc_id("MD6Context");
	mid = add_struc_member(id,"state",	0,	0x20000400,	-1,	20);
	mid = add_struc_member(id,"count",	0X14,	0x20000400,	-1,	8);
	mid = add_struc_member(id,"buffer",	0X1C,	0x000400,	-1,	60);
	mid = add_struc_member(id,"size",	0X58,	0x30000400,	-1,	8);
	
	id = get_struc_id("MD6");
	mid = add_struc_member(id,"unk00",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"padding",	0X4,	0x000400,	-1,	64);
	mid = add_struc_member(id,"ctx",	0X44,	0x60000400,	get_struc_id("MD6Context"),	96);
	mid = add_struc_member(id,"unk",	0XA4,	0x000400,	-1,	64);
	
	id = get_struc_id("s30");
	mid = add_struc_member(id,"f0",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"f4",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"elsize",	0X8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"mask",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"root",	0X18,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"count",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"arg3",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"f2c",	0X2C,	0x20000400,	-1,	4);
	
	id = get_struc_id("g_data");
	mid = add_struc_member(id,"g_hHeap",	0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_hModule",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_uExitCode",	0X10,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_18",	0X18,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_copy_of_star",	0X20,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_sizeofres",	0X28,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"script1",	0X30,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_wCommandLine",	0X38,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_temp_fn02",	0X40,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_48",	0X48,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_cursor",	0X50,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_58",	0X58,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_hSTD_OUTPUT_HANDLE",	0X60,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_temp_fn03",	0X68,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_unk_2",	0X70,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_78",	0X78,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_80",	0X80,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_path01",	0X88,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_module0handle",	0X90,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_IsCmdLinesEQ",	0X98,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_A0",	0XA0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_temp_fn100",	0XA8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_B0",	0XB0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_B8",	0XB8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_copy_of_slash",	0XC0,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_temp_fn04",	0XC8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_unk",	0XD0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_temp_fn01",	0XD8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_E0",	0XE0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_E8",	0XE8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_F0",	0XF0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_F8",	0XF8,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_100",	0X100,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"field_108",	0X108,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_flag_main",	0X110,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_200020",	0X118,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_unk_1",	0X120,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_root_601_1",	0X128,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_130",	0X130,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_root_601_2",	0X138,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_140",	0X140,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_root_601_3",	0X148,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"field_150",	0X150,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_stu602_root",	0X158,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"g_unk_3",	0X160,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"g_unk_4",	0X168,	0x30000400,	-1,	8);
	
	id = get_struc_id("__m128i");
	mid = add_struc_member(id,"m128i_i8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"m128i_i64",	0,	0x30000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u8",	0,	0x000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u16",	0,	0x10000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u32",	0,	0x20000400,	-1,	16);
	mid = add_struc_member(id,"m128i_u64",	0,	0x30000400,	-1,	16);
	set_struc_align(id,4);
	
	id = get_struc_id("g200");
	mid = add_struc_member(id,"arg0",	0,	0x30000400,	-1,	8);
	mid = add_struc_member(id,"filename",	0X8,	0x35500400,	0XFFFFFFFFFFFFFFFF,	8,	0XFFFFFFFFFFFFFFFF,	0,	0x000009);
	mid = add_struc_member(id,"arg10",	0X10,	0x20000400,	-1,	4);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X140001000,	E_PREV + 0,	"; File Name   : C:\\Users\\adm\\Downloads\\f4\\FO4GSNoSND.exe");
	update_extra_cmt		(0X140001000,	E_PREV + 1,	"; Format      : Portable executable for AMD64 (PE)");
	update_extra_cmt		(0X140001000,	E_PREV + 2,	"; Imagebase   : 140000000");
	update_extra_cmt		(0X140001000,	E_PREV + 3,	"; Timestamp   : 5CDD6EF0 (Thu May 16 14:08:48 2019)");
	update_extra_cmt		(0X140001000,	E_PREV + 4,	"; Section 1. (virtual address 00001000)");
	update_extra_cmt		(0X140001000,	E_PREV + 5,	"; Virtual size                  : 00005A99 (  23193.)");
	update_extra_cmt		(0X140001000,	E_PREV + 6,	"; Section size in file          : 00005C00 (  23552.)");
	update_extra_cmt		(0X140001000,	E_PREV + 7,	"; Offset to raw data for section: 00000400");
	update_extra_cmt		(0X140001000,	E_PREV + 8,	"; Flags 60000020: Text Executable Readable");
	update_extra_cmt		(0X140001000,	E_PREV + 9,	"; Alignment     : default");
	create_insn	(x=0X140001000);
	op_hex		(x,	1);
	set_name	(0X140001000,	"start");
	set_cmt	(0X140001004,	"Size",	0);
	set_cmt	(0X14000100B,	"Val",	0);
	set_cmt	(0X14000100E,	"void *",	0);
	create_insn	(x=0X14000100E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000101D,	"lpModuleName",	0);
	set_cmt	(0X14000102C,	"dwMaximumSize",	0);
	set_cmt	(0X14000102F,	"dwInitialSize",	0);
	set_cmt	(0X140001036,	"flOptions",	0);
	create_insn	(x=0X140001097);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400010A3,	"nStdHandle",	0);
	create_insn	(x=0X1400010C0);
	op_hex		(x,	1);
	set_cmt	(0X1400010C4,	"acount",	0);
	set_cmt	(0X1400010C5,	"aRoot",	0);
	create_insn	(x=0X1400010C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400010CC,	"aMask",	0);
	set_cmt	(0X1400010CF,	"a2",	0);
	set_cmt	(0X1400010D6,	"asize",	0);
	create_insn	(x=0X1400010DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400010E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400010EA);
	op_hex		(x,	1);
	set_cmt	(0X1400010FA,	"a4",	0);
	set_cmt	(0X140001101,	"aMASK",	0);
	create_insn	(x=0X140001101);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000110B,	"root",	0);
	create_insn	(x=0X14000110B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140001112,	"aSize",	0);
	set_cmt	(0X14000112A,	"a4",	0);
	set_cmt	(0X140001131,	"aMASK",	0);
	create_insn	(x=0X140001131);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000113B,	"root",	0);
	create_insn	(x=0X14000113B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140001142,	"aSize",	0);
	create_insn	(x=0X14000114E);
	op_hex		(x,	1);
	set_cmt	(0X140001152,	"aCnt",	0);
	create_insn	(x=0X140001159);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140001163,	"aResult",	0);
	set_cmt	(0X140001164,	"aMask",	0);
	create_insn	(x=0X140001164);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000116E,	"a3",	0);
	set_cmt	(0X140001175,	"aElSize",	0);
	create_insn	(x=0X14000117C);
	op_hex		(x,	1);
	create_insn	(x=0X140001185);
	op_hex		(x,	1);
	create_insn	(x=0X14000119A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400011B2,	"a4",	0);
	set_cmt	(0X1400011B9,	"aMASK",	0);
	create_insn	(x=0X1400011B9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400011C3,	"root",	0);
	create_insn	(x=0X1400011C3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400011CA,	"aSize",	0);
	create_insn	(x=0X1400011D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400011DD,	"stru0x20 *",	0);
	create_insn	(x=0X1400011E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400011EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400011F6);
	op_hex		(x,	1);
	create_insn	(x=0X1400011FF);
	op_hex		(x,	1);
	set_cmt	(0X140001203,	"a1",	0);
	set_cmt	(0X140001204,	"a5",	0);
	create_insn	(x=0X140001205);
	op_hex		(x,	1);
	create_insn	(x=0X14000120E);
	op_hex		(x,	1);
	create_insn	(x=0X140001212);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14000123B);
	set_cmt	(0X140001245,	"hHeap",	0);
	set_cmt	(0X140001251,	"uExitCode",	0);
	create_insn	(x=0X14000125D);
	op_hex		(x,	1);
	set_name	(0X14000125D,	"free_g_tree_stru0x20");
	create_insn	(x=0X14000127F);
	op_hex		(x,	1);
	create_insn	(x=0X140001284);
	op_stkvar	(x,	0);
	set_name	(0X140001284,	"xorfn");
	create_insn	(x=0X140001289);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000128E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000129F);
	op_hex		(x,	1);
	create_insn	(x=0X1400012A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400012B0);
	op_hex		(x,	1);
	create_insn	(x=0X1400012B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400012BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400012C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400012CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400012CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400012D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400012DD);
	op_stkvar	(x,	0);
	set_cmt	(0X1400012E1,	"hHeap",	0);
	create_insn	(x=0X1400012EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400012F0);
	op_hex		(x,	1);
	set_cmt	(0X1400012F4,	"aCnt",	0);
	create_insn	(x=0X1400012FB);
	op_stkvar	(x,	1);
	set_cmt	(0X140001300,	"aResult",	0);
	set_cmt	(0X140001301,	"aMask",	0);
	set_cmt	(0X140001304,	"a3",	0);
	set_cmt	(0X14000130B,	"aElSize",	0);
	create_insn	(x=0X140001312);
	op_hex		(x,	1);
	create_insn	(x=0X14000131B);
	op_hex		(x,	1);
	create_insn	(x=0X14000131F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001324);
	op_hex		(x,	1);
	set_cmt	(0X140001328,	"aCnt",	0);
	create_insn	(x=0X14000132F);
	op_stkvar	(x,	1);
	set_cmt	(0X140001334,	"aResult",	0);
	set_cmt	(0X140001335,	"aMask",	0);
	set_cmt	(0X140001338,	"a3",	0);
	set_cmt	(0X14000133F,	"aElSize",	0);
	create_insn	(x=0X140001346);
	op_hex		(x,	1);
	create_insn	(x=0X14000134F);
	op_hex		(x,	1);
	create_insn	(x=0X140001353);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001358);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001360);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001368);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001370);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001378);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001383);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000138E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001396);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000139E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400013A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400013AB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400013B0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400013B8);
	op_stkvar	(x,	0);
	create_insn	(0X1400013C2);
	create_insn	(x=0X1400013C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400013D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400013D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400013E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400013F1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400013F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000140B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001410);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001418);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001426);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000142B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001430);
	op_hex		(x,	1);
	create_insn	(x=0X140001439);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001444);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000144C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001456);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000145E);
	op_stkvar	(x,	0);
	create_insn	(0X140001468);
	create_insn	(x=0X14000146F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001479);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000147E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001483);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001488);
	op_hex		(x,	1);
	create_insn	(x=0X140001493);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001498);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000149D);
	op_hex		(x,	1);
	create_insn	(x=0X1400014A8);
	op_hex		(x,	1);
	create_insn	(x=0X1400014B4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400014B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014C2);
	op_hex		(x,	1);
	create_insn	(x=0X1400014CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400014D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400014E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400014EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400014FD);
	op_hex		(x,	1);
	create_insn	(x=0X140001506);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001510);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001518);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001520);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000152A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001532);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000153C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000154A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001554);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000155C);
	op_hex		(x,	1);
	create_insn	(x=0X140001568);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000156C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001571);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001576);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000157B);
	op_hex		(x,	1);
	create_insn	(x=0X140001586);
	op_hex		(x,	1);
	create_insn	(x=0X140001592);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001596);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000159B);
	op_hex		(x,	1);
	create_insn	(x=0X1400015A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400015AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400015BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400015C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400015DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015E4);
	op_hex		(x,	1);
	create_insn	(x=0X1400015EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400015F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400015F9);
	op_hex		(x,	1);
	create_insn	(x=0X140001603);
	op_hex		(x,	1);
	create_insn	(x=0X14000160F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001613);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001618);
	op_hex		(x,	1);
	create_insn	(x=0X140001622);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001629);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001636);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001645);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001651);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000165C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001664);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000166E);
	op_hex		(x,	1);
	set_cmt	(0X140001672,	"aCnt",	0);
	create_insn	(x=0X140001679);
	op_stkvar	(x,	1);
	set_cmt	(0X14000167E,	"aResult",	0);
	set_cmt	(0X14000167F,	"aMask",	0);
	set_cmt	(0X140001682,	"a3",	0);
	set_cmt	(0X140001689,	"aElSize",	0);
	create_insn	(x=0X140001690);
	op_hex		(x,	1);
	create_insn	(x=0X140001699);
	op_hex		(x,	1);
	create_insn	(x=0X14000169D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400016A2);
	op_hex		(x,	1);
	set_cmt	(0X1400016A6,	"aCnt",	0);
	create_insn	(x=0X1400016AD);
	op_stkvar	(x,	1);
	set_cmt	(0X1400016B2,	"aResult",	0);
	set_cmt	(0X1400016B3,	"aMask",	0);
	set_cmt	(0X1400016B6,	"a3",	0);
	set_cmt	(0X1400016BD,	"aElSize",	0);
	create_insn	(x=0X1400016C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400016CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400016D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400016D6);
	op_stkvar	(x,	0);
	set_cmt	(0X1400016DA,	"hHeap",	0);
	create_insn	(x=0X1400016E0);
	op_stkvar	(x,	1);
	create_insn	(0X1400016ED);
	create_insn	(x=0X1400016F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400016F6);
	op_hex		(x,	1);
	create_insn	(x=0X1400016FF);
	op_hex		(x,	1);
	create_insn	(x=0X140001703);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001708);
	op_hex		(x,	1);
	create_insn	(x=0X140001711);
	op_hex		(x,	1);
	create_insn	(x=0X140001715);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000171A);
	op_hex		(x,	1);
	create_insn	(x=0X140001723);
	op_hex		(x,	1);
	create_insn	(x=0X140001728);
	op_hex		(x,	1);
	create_insn	(0X140001735);
	set_name	(0X140001735,	"file_action_sub");
	create_insn	(x=0X14000173F);
	op_hex		(x,	1);
	create_insn	(x=0X140001743);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001750);
	op_hex		(x,	1);
	create_insn	(0X14000178D);
	create_insn	(x=0X1400017B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400017B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400017C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400017C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400017D2);
	op_hex		(x,	1);
	create_insn	(x=0X1400017DB);
	op_hex		(x,	1);
	create_insn	(x=0X1400017E1);
	op_hex		(x,	1);
	create_insn	(x=0X1400017E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400017EF);
	op_hex		(x,	1);
	create_insn	(x=0X140001800);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001810);
	op_hex		(x,	1);
	create_insn	(x=0X140001819);
	op_hex		(x,	1);
	create_insn	(x=0X14000181D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001828);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000183C);
	op_hex		(x,	1);
	create_insn	(x=0X140001845);
	op_hex		(x,	1);
	create_insn	(x=0X14000184C);
	op_hex		(x,	1);
	create_insn	(x=0X140001855);
	op_hex		(x,	1);
	set_cmt	(0X14000185A,	"alen",	0);
	create_insn	(x=0X14000185B);
	op_stkvar	(x,	0);
	set_cmt	(0X14000185F,	"lpszLongPath_1",	0);
	create_insn	(x=0X140001860);
	op_hex		(x,	1);
	create_insn	(x=0X140001869);
	op_hex		(x,	1);
	create_insn	(x=0X14000186D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001878);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000187E);
	op_hex		(x,	1);
	create_insn	(x=0X140001887);
	op_hex		(x,	1);
	set_cmt	(0X14000188B,	"wchar_t *",	0);
	create_insn	(x=0X14000188D);
	op_hex		(x,	1);
	create_insn	(x=0X140001896);
	op_hex		(x,	1);
	set_cmt	(0X14000189A,	"wchar_t *",	0);
	create_insn	(x=0X14000189A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000189F);
	op_hex		(x,	1);
	create_insn	(x=0X1400018A8);
	op_hex		(x,	1);
	set_cmt	(0X1400018AC,	"wchar_t *",	0);
	create_insn	(x=0X1400018AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400018B6);
	op_hex		(x,	1);
	create_insn	(x=0X1400018BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400018C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400018CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400018D9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400018E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400018E8);
	op_hex		(x,	1);
	set_cmt	(0X1400018EC,	"lpOverlapped",	0);
	create_insn	(x=0X1400018F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400018FA);
	op_hex		(x,	1);
	create_insn	(x=0X1400018FE);
	op_stkvar	(x,	0);
	set_cmt	(0X140001902,	"hHeap",	0);
	create_insn	(x=0X140001903);
	op_hex		(x,	1);
	create_insn	(x=0X14000190C);
	op_hex		(x,	1);
	create_insn	(x=0X140001914);
	op_stkvar	(x,	0);
	set_cmt	(0X14000191E,	"hFile",	0);
	set_cmt	(0X14000191F,	"lpBuffer",	0);
	set_cmt	(0X140001920,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X140001922,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X140001924);
	op_hex		(x,	1);
	create_insn	(x=0X14000192D);
	op_hex		(x,	1);
	create_insn	(x=0X140001931);
	op_stkvar	(x,	0);
	set_cmt	(0X140001935,	"hHeap",	0);
	create_insn	(x=0X140001945);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140001956);
	create_insn	(x=0X140001961);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000196B);
	op_hex		(x,	1);
	create_insn	(x=0X140001974);
	op_hex		(x,	1);
	create_insn	(x=0X14000197A);
	op_hex		(x,	1);
	create_insn	(x=0X14000197F);
	op_hex		(x,	1);
	create_insn	(x=0X140001988);
	op_hex		(x,	1);
	create_insn	(x=0X140001999);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400019AC);
	op_hex		(x,	1);
	create_insn	(x=0X1400019B5);
	op_hex		(x,	1);
	create_insn	(x=0X1400019B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400019CF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400019DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400019DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400019EC);
	op_hex		(x,	1);
	create_insn	(x=0X1400019F5);
	op_hex		(x,	1);
	create_insn	(x=0X1400019FB);
	op_hex		(x,	1);
	create_insn	(x=0X140001A00);
	op_hex		(x,	1);
	create_insn	(x=0X140001A09);
	op_hex		(x,	1);
	create_insn	(x=0X140001A1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001A29);
	op_hex		(x,	1);
	create_insn	(x=0X140001A32);
	op_hex		(x,	1);
	create_insn	(x=0X140001A36);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001A42);
	op_hex		(x,	1);
	create_insn	(x=0X140001A4B);
	op_hex		(x,	1);
	create_insn	(x=0X140001A51);
	op_hex		(x,	1);
	create_insn	(x=0X140001A56);
	op_hex		(x,	1);
	create_insn	(x=0X140001A5F);
	op_hex		(x,	1);
	create_insn	(x=0X140001A75);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001A7F);
	op_hex		(x,	1);
	create_insn	(x=0X140001A88);
	op_hex		(x,	1);
	create_insn	(x=0X140001A8C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001A97);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001AAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001AC9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001AD7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001AF6);
	op_stkvar	(x,	0);
	create_insn	(0X140001B00);
	create_insn	(x=0X140001B01);
	op_hex		(x,	1);
	create_insn	(x=0X140001B0A);
	op_hex		(x,	1);
	create_insn	(x=0X140001B10);
	op_hex		(x,	1);
	create_insn	(x=0X140001B15);
	op_hex		(x,	1);
	create_insn	(x=0X140001B1E);
	op_hex		(x,	1);
	create_insn	(x=0X140001B29);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001B31);
	op_hex		(x,	1);
	create_insn	(x=0X140001B3A);
	op_hex		(x,	1);
	create_insn	(x=0X140001B52);
	op_hex		(x,	1);
	create_insn	(x=0X140001B5B);
	op_hex		(x,	1);
	create_insn	(x=0X140001B79);
	op_hex		(x,	1);
	create_insn	(x=0X140001B82);
	op_hex		(x,	1);
	set_cmt	(0X140001B86,	"wchar_t *",	0);
	create_insn	(x=0X140001B88);
	op_hex		(x,	1);
	create_insn	(x=0X140001B91);
	op_hex		(x,	1);
	set_cmt	(0X140001B95,	"wchar_t *",	0);
	create_insn	(x=0X140001B9C);
	op_hex		(x,	1);
	create_insn	(x=0X140001BA5);
	op_hex		(x,	1);
	create_insn	(x=0X140001BAA);
	op_hex		(x,	1);
	create_insn	(x=0X140001BB3);
	op_hex		(x,	1);
	create_insn	(x=0X140001BBA);
	op_hex		(x,	1);
	create_insn	(x=0X140001BC3);
	op_hex		(x,	1);
	create_insn	(x=0X140001BD4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001BDC);
	op_hex		(x,	1);
	create_insn	(x=0X140001BE5);
	op_hex		(x,	1);
	create_insn	(x=0X140001BEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001BF8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001C0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001C1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001C2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001C3D);
	op_hex		(x,	1);
	create_insn	(x=0X140001C46);
	op_hex		(x,	1);
	set_cmt	(0X140001C4A,	"wchar_t *",	0);
	create_insn	(x=0X140001C4C);
	op_hex		(x,	1);
	create_insn	(x=0X140001C55);
	op_hex		(x,	1);
	set_cmt	(0X140001C59,	"wchar_t *",	0);
	create_insn	(x=0X140001C59);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001C61);
	op_hex		(x,	1);
	create_insn	(x=0X140001C6A);
	op_hex		(x,	1);
	set_cmt	(0X140001C6E,	"wchar_t *",	0);
	create_insn	(x=0X140001C6E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140001C78);
	op_hex		(x,	1);
	create_insn	(x=0X140001C81);
	op_hex		(x,	1);
	create_insn	(x=0X140001C85);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140001C97);
	create_insn	(x=0X140001C98);
	op_hex		(x,	1);
	create_insn	(x=0X140001CA1);
	op_hex		(x,	1);
	create_insn	(x=0X140001CA7);
	op_hex		(x,	1);
	create_insn	(x=0X140001CAC);
	op_hex		(x,	1);
	create_insn	(x=0X140001CB5);
	op_hex		(x,	1);
	create_insn	(x=0X140001CC6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001CCE);
	op_hex		(x,	1);
	create_insn	(x=0X140001CD7);
	op_hex		(x,	1);
	create_insn	(x=0X140001CDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001CE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001CEC);
	op_hex		(x,	1);
	create_insn	(x=0X140001CF5);
	op_hex		(x,	1);
	set_cmt	(0X140001CF9,	"wchar_t *",	0);
	create_insn	(x=0X140001CFB);
	op_hex		(x,	1);
	create_insn	(x=0X140001D04);
	op_hex		(x,	1);
	create_insn	(x=0X140001D08);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001D25);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001D33);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001D53);
	op_hex		(x,	1);
	create_insn	(x=0X140001D5C);
	op_hex		(x,	1);
	set_cmt	(0X140001D60,	"wchar_t *",	0);
	create_insn	(x=0X140001D62);
	op_hex		(x,	1);
	create_insn	(x=0X140001D6B);
	op_hex		(x,	1);
	set_cmt	(0X140001D6F,	"wchar_t *",	0);
	create_insn	(x=0X140001D76);
	op_hex		(x,	1);
	create_insn	(x=0X140001D7F);
	op_hex		(x,	1);
	set_cmt	(0X140001D83,	"wchar_t *",	0);
	create_insn	(x=0X140001D8A);
	op_hex		(x,	1);
	create_insn	(x=0X140001D93);
	op_hex		(x,	1);
	set_cmt	(0X140001D97,	"wchar_t *",	0);
	create_insn	(x=0X140001D97);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001D9C);
	op_hex		(x,	1);
	create_insn	(x=0X140001DA5);
	op_hex		(x,	1);
	set_cmt	(0X140001DA9,	"wchar_t *",	0);
	create_insn	(x=0X140001DA9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140001DB3);
	op_hex		(x,	1);
	create_insn	(x=0X140001DBC);
	op_hex		(x,	1);
	create_insn	(x=0X140001DC0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140001DCF);
	create_insn	(x=0X140001DD1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001DD9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001DE3);
	op_stkvar	(x,	1);
	create_insn	(0X140001DEA);
	create_insn	(x=0X140001DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001DF3);
	op_hex		(x,	1);
	create_insn	(x=0X140001DFC);
	op_hex		(x,	1);
	create_insn	(x=0X140001E00);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001E08);
	op_hex		(x,	1);
	create_insn	(x=0X140001E11);
	op_hex		(x,	1);
	create_insn	(x=0X140001E15);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001E1A);
	op_hex		(x,	1);
	create_insn	(x=0X140001E23);
	op_hex		(x,	1);
	create_insn	(x=0X140001E27);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001E2C);
	op_hex		(x,	1);
	create_insn	(x=0X140001E35);
	op_hex		(x,	1);
	create_insn	(x=0X140001E39);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001E3E);
	op_hex		(x,	1);
	create_insn	(x=0X140001E47);
	op_hex		(x,	1);
	create_insn	(x=0X140001E4C);
	op_hex		(x,	1);
	create_insn	(0X140001E57);
	set_name	(0X140001E57,	"create_tmp_paths");
	create_insn	(x=0X140001E60);
	op_hex		(x,	1);
	create_insn	(x=0X140001E64);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001E71);
	op_hex		(x,	1);
	create_insn	(x=0X140001E8B);
	op_stkvar	(x,	0);
	create_insn	(0X140001E96);
	create_insn	(x=0X140001E9D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001EB3);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001EC0);
	op_hex		(x,	1);
	create_insn	(x=0X140001EC9);
	op_hex		(x,	1);
	create_insn	(x=0X140001ECF);
	op_hex		(x,	1);
	create_insn	(x=0X140001ED4);
	op_hex		(x,	1);
	create_insn	(x=0X140001EDD);
	op_hex		(x,	1);
	create_insn	(x=0X140001EE3);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001EF2);
	op_hex		(x,	1);
	create_insn	(x=0X140001EFB);
	op_hex		(x,	1);
	create_insn	(x=0X140001EFF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001F0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001F10);
	op_hex		(x,	1);
	create_insn	(x=0X140001F19);
	op_hex		(x,	1);
	set_cmt	(0X140001F1D,	"wchar_t *",	0);
	create_insn	(x=0X140001F1F);
	op_hex		(x,	1);
	create_insn	(x=0X140001F28);
	op_hex		(x,	1);
	set_cmt	(0X140001F2C,	"wchar_t *",	0);
	create_insn	(x=0X140001F2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001F31);
	op_hex		(x,	1);
	create_insn	(x=0X140001F3A);
	op_hex		(x,	1);
	create_insn	(x=0X140001F3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001F49);
	op_stkvar	(x,	0);
	set_cmt	(0X140001F59,	"dwBytes_1",	0);
	create_insn	(x=0X140001F5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001F65);
	op_hex		(x,	1);
	create_insn	(x=0X140001F6E);
	op_hex		(x,	1);
	create_insn	(x=0X140001F74);
	op_hex		(x,	1);
	create_insn	(x=0X140001F79);
	op_hex		(x,	1);
	create_insn	(x=0X140001F82);
	op_hex		(x,	1);
	create_insn	(x=0X140001F89);
	op_hex		(x,	1);
	create_insn	(x=0X140001F92);
	op_hex		(x,	1);
	create_insn	(x=0X140001F96);
	op_stkvar	(x,	1);
	create_insn	(x=0X140001FA1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001FB5);
	op_stkvar	(x,	0);
	set_cmt	(0X140001FB9,	"lpPathName",	0);
	set_cmt	(0X140001FBA,	"lpPrefixString",	0);
	set_cmt	(0X140001FBB,	"uUnique",	0);
	set_cmt	(0X140001FBD,	"lpTempFileName",	0);
	create_insn	(x=0X140001FC5);
	op_hex		(x,	1);
	create_insn	(x=0X140001FCE);
	op_hex		(x,	1);
	create_insn	(x=0X140001FD4);
	op_hex		(x,	1);
	create_insn	(x=0X140001FD9);
	op_hex		(x,	1);
	create_insn	(x=0X140001FE2);
	op_hex		(x,	1);
	create_insn	(x=0X140001FE8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140001FEE);
	op_hex		(x,	1);
	create_insn	(x=0X140001FF7);
	op_hex		(x,	1);
	create_insn	(x=0X140001FFB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140002020);
	op_stkvar	(x,	0);
	set_cmt	(0X14000203A,	"lpPathName",	0);
	set_cmt	(0X14000203B,	"lpPrefixString",	0);
	set_cmt	(0X14000203C,	"uUnique",	0);
	set_cmt	(0X14000203E,	"lpTempFileName",	0);
	create_insn	(x=0X140002046);
	op_hex		(x,	1);
	create_insn	(x=0X14000204F);
	op_hex		(x,	1);
	create_insn	(x=0X140002055);
	op_hex		(x,	1);
	create_insn	(x=0X14000205A);
	op_hex		(x,	1);
	create_insn	(x=0X140002063);
	op_hex		(x,	1);
	create_insn	(x=0X140002069);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000206F);
	op_hex		(x,	1);
	create_insn	(x=0X140002078);
	op_hex		(x,	1);
	create_insn	(x=0X14000207C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400020A1);
	op_stkvar	(x,	0);
	set_cmt	(0X1400020BB,	"lpPathName",	0);
	set_cmt	(0X1400020BC,	"lpPrefixString",	0);
	set_cmt	(0X1400020BD,	"uUnique",	0);
	set_cmt	(0X1400020BF,	"lpTempFileName",	0);
	set_cmt	(0X1400020CC,	"pszPath",	0);
	create_insn	(x=0X1400020D3);
	op_hex		(x,	1);
	create_insn	(x=0X1400020DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400020E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400020E7);
	op_hex		(x,	1);
	create_insn	(x=0X1400020F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400020F6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400020FC);
	op_hex		(x,	1);
	create_insn	(x=0X140002105);
	op_hex		(x,	1);
	create_insn	(x=0X140002109);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140002122);
	op_stkvar	(x,	0);
	set_cmt	(0X14000212C,	"pszPath",	0);
	set_cmt	(0X14000212D,	"pszExt",	0);
	create_insn	(x=0X140002133);
	op_stkvar	(x,	0);
	set_cmt	(0X14000214D,	"lpPathName",	0);
	set_cmt	(0X14000214E,	"lpPrefixString",	0);
	set_cmt	(0X14000214F,	"uUnique",	0);
	set_cmt	(0X140002151,	"lpTempFileName",	0);
	create_insn	(x=0X140002159);
	op_hex		(x,	1);
	create_insn	(x=0X140002162);
	op_hex		(x,	1);
	create_insn	(x=0X140002168);
	op_hex		(x,	1);
	create_insn	(x=0X14000216D);
	op_hex		(x,	1);
	create_insn	(x=0X140002176);
	op_hex		(x,	1);
	create_insn	(x=0X14000217C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002182);
	op_hex		(x,	1);
	create_insn	(x=0X14000218B);
	op_hex		(x,	1);
	create_insn	(x=0X14000218F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000219C);
	op_stkvar	(x,	0);
	set_cmt	(0X1400021A0,	"hHeap",	0);
	create_insn	(0X1400021A8);
	create_insn	(x=0X1400021AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400021B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400021BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400021BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400021C3);
	op_hex		(x,	1);
	create_insn	(x=0X1400021CC);
	op_hex		(x,	1);
	create_insn	(x=0X1400021D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400021D5);
	op_hex		(x,	1);
	create_insn	(x=0X1400021DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400021E3);
	op_hex		(x,	1);
	create_insn	(0X1400021EA);
	create_insn	(x=0X1400021F6);
	op_hex		(x,	1);
	update_extra_cmt		(0X1400021FF,	E_PREV + 0,	"");
	update_extra_cmt		(0X1400021FF,	E_PREV + 1,	"");
	create_insn	(x=0X140002200);
	op_hex		(x,	1);
	create_insn	(x=0X140002209);
	op_hex		(x,	1);
	update_extra_cmt		(0X14000220F,	E_PREV + 0,	"");
	update_extra_cmt		(0X14000220F,	E_PREV + 1,	"");
	create_insn	(x=0X14000220F);
	op_hex		(x,	1);
	create_insn	(x=0X14000221E);
	op_hex		(x,	1);
	update_extra_cmt		(0X140002227,	E_PREV + 0,	"");
	update_extra_cmt		(0X140002227,	E_PREV + 1,	"");
	create_insn	(x=0X140002227);
	op_hex		(x,	1);
	create_insn	(x=0X14000222D);
	op_hex		(x,	1);
	create_insn	(x=0X140002232);
	op_hex		(x,	1);
	update_extra_cmt		(0X14000223B,	E_PREV + 0,	"");
	update_extra_cmt		(0X14000223B,	E_PREV + 1,	"");
	create_insn	(x=0X14000223B);
	op_hex		(x,	1);
	set_cmt	(0X140002241,	"apos",	0);
	create_insn	(x=0X140002242);
	op_hex		(x,	1);
	update_extra_cmt		(0X14000224B,	E_PREV + 0,	"");
	update_extra_cmt		(0X14000224B,	E_PREV + 1,	"");
	create_insn	(x=0X14000224B);
	op_hex		(x,	1);
	update_extra_cmt		(0X140002255,	E_PREV + 0,	"");
	update_extra_cmt		(0X140002255,	E_PREV + 1,	"");
	create_insn	(x=0X140002259);
	op_stkvar	(x,	0);
	set_cmt	(0X14000225D,	"lpLibFileName",	0);
	set_cmt	(0X14000225E,	"hFile",	0);
	set_cmt	(0X14000225F,	"dwFlags",	0);
	create_insn	(x=0X140002261);
	op_hex		(x,	1);
	update_extra_cmt		(0X14000226A,	E_PREV + 0,	"");
	update_extra_cmt		(0X14000226A,	E_PREV + 1,	"");
	create_insn	(x=0X14000226A);
	op_hex		(x,	1);
	create_insn	(x=0X140002270);
	op_hex		(x,	1);
	create_insn	(x=0X140002279);
	op_hex		(x,	1);
	create_insn	(x=0X14000227E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002288);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140002293);
	op_stkvar	(x,	0);
	set_cmt	(0X140002297,	"hModule",	0);
	set_cmt	(0X140002298,	"lpEnumFunc",	0);
	set_cmt	(0X140002299,	"lParam",	0);
	create_insn	(x=0X1400022A0);
	op_stkvar	(x,	0);
	set_cmt	(0X1400022A4,	"hLibModule",	0);
	create_insn	(x=0X1400022EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400022F8);
	op_hex		(x,	1);
	set_cmt	(0X1400022FC,	"wchar_t *",	0);
	create_insn	(x=0X1400022FE);
	op_hex		(x,	1);
	create_insn	(x=0X140002307);
	op_hex		(x,	1);
	create_insn	(x=0X14000230B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002316);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002329);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000232F);
	op_hex		(x,	1);
	create_insn	(x=0X140002338);
	op_hex		(x,	1);
	set_cmt	(0X14000233C,	"wchar_t *",	0);
	create_insn	(x=0X14000233E);
	op_hex		(x,	1);
	create_insn	(x=0X140002347);
	op_hex		(x,	1);
	set_cmt	(0X14000234B,	"wchar_t *",	0);
	create_insn	(x=0X14000234B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002350);
	op_hex		(x,	1);
	create_insn	(x=0X140002359);
	op_hex		(x,	1);
	create_insn	(x=0X14000235D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000236A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002370);
	op_hex		(x,	1);
	create_insn	(x=0X140002379);
	op_hex		(x,	1);
	set_cmt	(0X14000237D,	"wchar_t *",	0);
	create_insn	(x=0X14000237F);
	op_hex		(x,	1);
	create_insn	(x=0X140002388);
	op_hex		(x,	1);
	create_insn	(x=0X14000238C);
	op_stkvar	(x,	1);
	create_insn	(0X14000239C);
	create_insn	(x=0X1400023A9);
	op_hex		(x,	1);
	create_insn	(x=0X1400023B2);
	op_hex		(x,	1);
	create_insn	(x=0X1400023B8);
	op_hex		(x,	1);
	create_insn	(x=0X1400023BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400023C6);
	op_hex		(x,	1);
	create_insn	(x=0X1400023CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400023D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400023DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400023E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400023F2);
	op_hex		(x,	1);
	create_insn	(x=0X1400023FB);
	op_hex		(x,	1);
	create_insn	(x=0X140002401);
	op_hex		(x,	1);
	create_insn	(x=0X140002406);
	op_hex		(x,	1);
	create_insn	(x=0X14000240F);
	op_hex		(x,	1);
	create_insn	(x=0X140002415);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000241E);
	op_hex		(x,	1);
	create_insn	(x=0X140002427);
	op_hex		(x,	1);
	create_insn	(x=0X14000243D);
	op_hex		(x,	1);
	create_insn	(x=0X140002446);
	op_hex		(x,	1);
	create_insn	(x=0X14000245A);
	op_hex		(x,	1);
	create_insn	(x=0X140002463);
	op_hex		(x,	1);
	create_insn	(x=0X140002467);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002472);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002478);
	op_hex		(x,	1);
	create_insn	(x=0X140002481);
	op_hex		(x,	1);
	set_cmt	(0X140002485,	"wchar_t *",	0);
	create_insn	(x=0X140002487);
	op_hex		(x,	1);
	create_insn	(x=0X140002490);
	op_hex		(x,	1);
	create_insn	(x=0X140002494);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400024A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400024A9);
	op_hex		(x,	1);
	create_insn	(x=0X1400024AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400024B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400024BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400024C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400024CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400024D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400024DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400024E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400024F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400024F9);
	op_hex		(x,	1);
	create_insn	(x=0X140002507);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000250D);
	op_hex		(x,	1);
	create_insn	(x=0X140002516);
	op_hex		(x,	1);
	create_insn	(x=0X14000251A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002526);
	op_hex		(x,	1);
	create_insn	(x=0X14000252F);
	op_hex		(x,	1);
	create_insn	(x=0X140002535);
	op_hex		(x,	1);
	create_insn	(x=0X14000253A);
	op_hex		(x,	1);
	create_insn	(x=0X140002543);
	op_hex		(x,	1);
	create_insn	(x=0X14000254E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002556);
	op_hex		(x,	1);
	create_insn	(x=0X14000255F);
	op_hex		(x,	1);
	create_insn	(x=0X140002563);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000256E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002572);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002595);
	op_hex		(x,	1);
	create_insn	(x=0X14000259E);
	op_hex		(x,	1);
	create_insn	(x=0X1400025A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400025A9);
	op_hex		(x,	1);
	create_insn	(x=0X1400025B2);
	op_hex		(x,	1);
	create_insn	(x=0X1400025BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400025C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400025D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400025DB);
	op_hex		(x,	1);
	create_insn	(x=0X1400025E4);
	op_hex		(x,	1);
	create_insn	(x=0X140002602);
	op_hex		(x,	1);
	create_insn	(x=0X14000260B);
	op_hex		(x,	1);
	create_insn	(x=0X140002611);
	op_hex		(x,	1);
	create_insn	(x=0X140002616);
	op_hex		(x,	1);
	create_insn	(x=0X14000261F);
	op_hex		(x,	1);
	create_insn	(x=0X14000262C);
	op_hex		(x,	1);
	create_insn	(x=0X140002635);
	op_hex		(x,	1);
	create_insn	(x=0X140002639);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140002648);
	create_insn	(0X14000264A);
	create_insn	(0X14000264F);
	create_insn	(0X140002654);
	create_insn	(x=0X140002658);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000265D);
	op_hex		(x,	1);
	create_insn	(x=0X140002666);
	op_hex		(x,	1);
	create_insn	(x=0X14000266A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000266F);
	op_hex		(x,	1);
	create_insn	(x=0X140002678);
	op_hex		(x,	1);
	create_insn	(x=0X14000267C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002681);
	op_hex		(x,	1);
	create_insn	(x=0X14000268A);
	op_hex		(x,	1);
	create_insn	(x=0X14000268E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002693);
	op_hex		(x,	1);
	create_insn	(x=0X14000269C);
	op_hex		(x,	1);
	create_insn	(x=0X1400026A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400026A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400026AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400026B3);
	op_hex		(x,	1);
	create_insn	(x=0X1400026BB);
	op_stkvar	(x,	0);
	set_name	(0X1400026BB,	"myset_env_vars");
	create_insn	(x=0X1400026C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400026D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400026DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400026E5);
	op_hex		(x,	1);
	create_insn	(x=0X1400026EB);
	op_hex		(x,	1);
	create_insn	(x=0X1400026F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400026F9);
	op_hex		(x,	1);
	set_cmt	(0X1400026FF,	"apos",	0);
	create_insn	(x=0X140002700);
	op_hex		(x,	1);
	create_insn	(x=0X140002709);
	op_hex		(x,	1);
	create_insn	(x=0X14000270D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002718);
	op_stkvar	(x,	0);
	set_cmt	(0X14000271C,	"lpsz",	0);
	create_insn	(x=0X140002722);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002731);
	op_hex		(x,	1);
	create_insn	(x=0X14000273A);
	op_hex		(x,	1);
	create_insn	(x=0X140002741);
	op_hex		(x,	1);
	create_insn	(x=0X14000274A);
	op_hex		(x,	1);
	set_cmt	(0X14000274E,	"__int64",	0);
	set_cmt	(0X14000274F,	"__int64",	0);
	create_insn	(x=0X140002750);
	op_hex		(x,	1);
	create_insn	(x=0X140002759);
	op_hex		(x,	1);
	create_insn	(x=0X14000275D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002768);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000276E);
	op_hex		(x,	1);
	create_insn	(x=0X140002777);
	op_hex		(x,	1);
	set_cmt	(0X14000277B,	"wchar_t *",	0);
	create_insn	(x=0X14000277D);
	op_hex		(x,	1);
	create_insn	(x=0X140002786);
	op_hex		(x,	1);
	set_cmt	(0X14000278A,	"wchar_t *",	0);
	create_insn	(x=0X14000278A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140002794);
	op_hex		(x,	1);
	create_insn	(x=0X14000279D);
	op_hex		(x,	1);
	set_cmt	(0X1400027A1,	"wchar_t *",	0);
	create_insn	(x=0X1400027A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400027A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400027AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400027B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400027C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400027C6);
	op_hex		(x,	1);
	create_insn	(x=0X1400027CF);
	op_hex		(x,	1);
	set_cmt	(0X1400027D3,	"wchar_t *",	0);
	create_insn	(x=0X1400027D5);
	op_hex		(x,	1);
	create_insn	(x=0X1400027DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400027E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400027ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400027F3);
	op_hex		(x,	1);
	create_insn	(x=0X1400027FC);
	op_hex		(x,	1);
	set_cmt	(0X140002800,	"wchar_t *",	0);
	create_insn	(x=0X140002802);
	op_hex		(x,	1);
	create_insn	(x=0X14000280B);
	op_hex		(x,	1);
	create_insn	(0X14000281C);
	create_insn	(x=0X140002827);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000282C);
	op_hex		(x,	1);
	create_insn	(x=0X140002835);
	op_hex		(x,	1);
	create_insn	(x=0X140002839);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000283E);
	op_hex		(x,	1);
	create_insn	(x=0X140002847);
	op_hex		(x,	1);
	create_insn	(x=0X14000284C);
	op_hex		(x,	1);
	create_insn	(0X140002853);
	set_name	(0X140002853,	"ShowExeptionMessageBox");
	create_insn	(x=0X140002858);
	op_hex		(x,	1);
	create_insn	(x=0X140002862);
	op_hex		(x,	1);
	create_insn	(x=0X14000286B);
	op_hex		(x,	1);
	create_insn	(x=0X140002871);
	op_hex		(x,	1);
	create_insn	(x=0X14000287A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002880);
	op_hex		(x,	1);
	create_insn	(x=0X140002889);
	op_hex		(x,	1);
	set_cmt	(0X14000288D,	"wchar_t *",	0);
	create_insn	(x=0X14000288F);
	op_hex		(x,	1);
	create_insn	(x=0X140002898);
	op_hex		(x,	1);
	create_insn	(x=0X14000289D);
	op_hex		(x,	1);
	create_insn	(x=0X1400028A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400028AC);
	op_hex		(x,	1);
	create_insn	(x=0X1400028B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400028BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400028C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400028CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400028E9);
	op_stkvar	(x,	0);
	set_cmt	(0X1400028EE,	"lpCaption",	0);
	set_cmt	(0X1400028EF,	"lpText",	0);
	set_cmt	(0X1400028F0,	"uType",	0);
	create_insn	(x=0X1400028F2);
	op_hex		(x,	1);
	create_insn	(x=0X1400028FB);
	op_hex		(x,	1);
	create_insn	(x=0X140002901);
	op_hex		(x,	1);
	create_insn	(x=0X14000290A);
	op_hex		(x,	1);
	create_insn	(0X140002914);
	create_insn	(x=0X140002918);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000291D);
	op_hex		(x,	1);
	create_insn	(x=0X140002926);
	op_hex		(x,	1);
	create_insn	(x=0X14000292B);
	op_hex		(x,	1);
	create_insn	(x=0X140002930);
	op_stkvar	(x,	0);
	set_name	(0X140002930,	"asm_CLEAR_TEMP_AND_EXIT");
	create_insn	(x=0X14000293B);
	op_hex		(x,	1);
	set_cmt	(0X14000299B,	"lpPathName",	0);
	set_cmt	(0X1400029A7,	"lpPathName",	0);
	create_insn	(x=0X1400029AD);
	op_stkvar	(x,	1);
	create_insn	(0X1400029BE);
	create_insn	(x=0X1400029C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400029C8);
	op_stkvar	(x,	0);
	set_name	(0X1400029C8,	"MyShellExecuteOpen");
	create_insn	(x=0X1400029CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400029D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400029E1);
	op_hex		(x,	1);
	create_insn	(x=0X1400029E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400029F2);
	op_hex		(x,	1);
	create_insn	(x=0X1400029FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A03);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A08);
	op_hex		(x,	1);
	create_insn	(x=0X140002A11);
	op_hex		(x,	1);
	create_insn	(x=0X140002A15);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A1D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A22);
	op_hex		(x,	1);
	create_insn	(x=0X140002A2B);
	op_hex		(x,	1);
	create_insn	(x=0X140002A2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A37);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A3C);
	op_hex		(x,	1);
	create_insn	(x=0X140002A45);
	op_hex		(x,	1);
	create_insn	(x=0X140002A49);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A89);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002A97);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002AA5);
	op_stkvar	(x,	1);
	set_cmt	(0X140002AAE,	"pExecInfo",	0);
	create_insn	(x=0X140002AB4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002AC7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002AD3);
	op_stkvar	(x,	1);
	set_cmt	(0X140002ADB,	"hProcess",	0);
	set_cmt	(0X140002ADC,	"lpExitCode",	0);
	create_insn	(x=0X140002AE7);
	op_stkvar	(x,	1);
	create_insn	(0X140002AFA);
	create_insn	(x=0X140002AFC);
	op_stkvar	(x,	1);
	create_insn	(0X140002B06);
	create_insn	(x=0X140002B0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002B0F);
	op_hex		(x,	1);
	create_insn	(x=0X140002B18);
	op_hex		(x,	1);
	create_insn	(x=0X140002B1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002B21);
	op_hex		(x,	1);
	create_insn	(x=0X140002B2A);
	op_hex		(x,	1);
	create_insn	(x=0X140002B2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002B33);
	op_hex		(x,	1);
	create_insn	(x=0X140002B3C);
	op_hex		(x,	1);
	create_insn	(x=0X140002B41);
	op_hex		(x,	1);
	create_insn	(x=0X140002B4C);
	op_stkvar	(x,	0);
	set_name	(0X140002B4C,	"EnumResTypeW");
	create_insn	(x=0X140002B51);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002B56);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002B61);
	op_hex		(x,	1);
	create_insn	(x=0X140002B6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002B7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140002B85);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002B89);
	op_stkvar	(x,	0);
	set_cmt	(0X140002B8D,	"hModule",	0);
	set_cmt	(0X140002B8E,	"lpType",	0);
	set_cmt	(0X140002B8F,	"lpEnumFunc",	0);
	set_cmt	(0X140002B91,	"lParam",	0);
	create_insn	(0X140002BA1);
	create_insn	(x=0X140002BA4);
	op_hex		(x,	1);
	create_insn	(x=0X140002BAB);
	op_stkvar	(x,	0);
	set_name	(0X140002BAB,	"setPTRS");
	create_insn	(x=0X140002BB6);
	op_hex		(x,	1);
	create_insn	(x=0X140002BBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002BEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002C08);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002C22);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002C3F);
	op_hex		(x,	1);
	create_insn	(x=0X140002C46);
	op_stkvar	(x,	0);
	set_name	(0X140002C46,	"MyInputRequester");
	create_insn	(x=0X140002C55);
	op_hex		(x,	1);
	create_insn	(x=0X140002C5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002C6B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002C8C);
	op_hex		(x,	1);
	create_insn	(x=0X140002C95);
	op_hex		(x,	1);
	create_insn	(x=0X140002C9B);
	op_hex		(x,	1);
	create_insn	(x=0X140002CA0);
	op_hex		(x,	1);
	create_insn	(x=0X140002CA9);
	op_hex		(x,	1);
	create_insn	(x=0X140002CB0);
	op_hex		(x,	1);
	create_insn	(x=0X140002CB9);
	op_hex		(x,	1);
	create_insn	(x=0X140002CC0);
	op_hex		(x,	1);
	create_insn	(x=0X140002CC9);
	op_hex		(x,	1);
	create_insn	(x=0X140002CD4);
	op_stkvar	(x,	1);
	set_cmt	(0X140002CE4,	"alpszShortPath",	0);
	set_cmt	(0X140002CE5,	"alen",	0);
	set_cmt	(0X140002CE6,	"apos",	0);
	create_insn	(x=0X140002CE8);
	op_hex		(x,	1);
	create_insn	(x=0X140002CF1);
	op_hex		(x,	1);
	create_insn	(x=0X140002CFF);
	op_stkvar	(x,	0);
	set_cmt	(0X140002D03,	"a1",	0);
	set_cmt	(0X140002D04,	"a2",	0);
	create_insn	(x=0X140002D05);
	op_hex		(x,	1);
	create_insn	(x=0X140002D0E);
	op_hex		(x,	1);
	create_insn	(x=0X140002D12);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002D1E);
	op_hex		(x,	1);
	create_insn	(x=0X140002D27);
	op_hex		(x,	1);
	create_insn	(x=0X140002D2D);
	op_hex		(x,	1);
	create_insn	(x=0X140002D32);
	op_hex		(x,	1);
	create_insn	(x=0X140002D3B);
	op_hex		(x,	1);
	create_insn	(x=0X140002D42);
	op_hex		(x,	1);
	create_insn	(x=0X140002D4B);
	op_hex		(x,	1);
	create_insn	(x=0X140002D52);
	op_hex		(x,	1);
	create_insn	(x=0X140002D5B);
	op_hex		(x,	1);
	create_insn	(x=0X140002D66);
	op_stkvar	(x,	1);
	set_cmt	(0X140002D79,	"alpszShortPath",	0);
	set_cmt	(0X140002D7A,	"alen",	0);
	set_cmt	(0X140002D7B,	"apos",	0);
	create_insn	(x=0X140002D7D);
	op_hex		(x,	1);
	create_insn	(x=0X140002D86);
	op_hex		(x,	1);
	create_insn	(x=0X140002D94);
	op_stkvar	(x,	0);
	set_cmt	(0X140002D98,	"a1",	0);
	set_cmt	(0X140002D99,	"a2",	0);
	create_insn	(x=0X140002D9A);
	op_hex		(x,	1);
	create_insn	(x=0X140002DA3);
	op_hex		(x,	1);
	create_insn	(x=0X140002DA7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002DB3);
	op_hex		(x,	1);
	create_insn	(x=0X140002DBC);
	op_hex		(x,	1);
	create_insn	(x=0X140002DC3);
	op_hex		(x,	1);
	create_insn	(x=0X140002DCC);
	op_hex		(x,	1);
	create_insn	(x=0X140002DE3);
	op_hex		(x,	1);
	create_insn	(x=0X140002DEC);
	op_hex		(x,	1);
	create_insn	(x=0X140002DF2);
	op_hex		(x,	1);
	create_insn	(x=0X140002DF7);
	op_hex		(x,	1);
	create_insn	(x=0X140002E00);
	op_hex		(x,	1);
	create_insn	(x=0X140002E11);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002E1B);
	op_hex		(x,	1);
	create_insn	(x=0X140002E24);
	op_hex		(x,	1);
	create_insn	(x=0X140002E2E);
	op_hex		(x,	1);
	create_insn	(x=0X140002E37);
	op_hex		(x,	1);
	create_insn	(x=0X140002E3E);
	op_hex		(x,	1);
	create_insn	(x=0X140002E47);
	op_hex		(x,	1);
	create_insn	(x=0X140002E58);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002E62);
	op_hex		(x,	1);
	create_insn	(x=0X140002E6B);
	op_hex		(x,	1);
	set_cmt	(0X140002E75,	"retstr",	0);
	create_insn	(x=0X140002E79);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002E87);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002E92);
	op_hex		(x,	1);
	create_insn	(x=0X140002E9B);
	op_hex		(x,	1);
	create_insn	(x=0X140002E9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002EAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002EC1);
	op_hex		(x,	1);
	create_insn	(x=0X140002ECA);
	op_hex		(x,	1);
	create_insn	(x=0X140002ED0);
	op_hex		(x,	1);
	create_insn	(x=0X140002ED5);
	op_hex		(x,	1);
	create_insn	(x=0X140002EDE);
	op_hex		(x,	1);
	create_insn	(x=0X140002EEA);
	op_hex		(x,	1);
	create_insn	(x=0X140002EF3);
	op_hex		(x,	1);
	create_insn	(x=0X140002EF9);
	op_hex		(x,	1);
	create_insn	(x=0X140002EFE);
	op_hex		(x,	1);
	create_insn	(x=0X140002F07);
	op_hex		(x,	1);
	create_insn	(x=0X140002F0D);
	op_stkvar	(x,	0);
	set_cmt	(0X140002F11,	"a1",	0);
	set_cmt	(0X140002F12,	"a2",	0);
	create_insn	(x=0X140002F13);
	op_hex		(x,	1);
	create_insn	(x=0X140002F1C);
	op_hex		(x,	1);
	create_insn	(x=0X140002F2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002F32);
	op_hex		(x,	1);
	create_insn	(x=0X140002F3B);
	op_hex		(x,	1);
	create_insn	(x=0X140002F3F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002F4A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002F4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140002F63);
	op_hex		(x,	1);
	create_insn	(x=0X140002F6C);
	op_hex		(x,	1);
	create_insn	(x=0X140002F72);
	op_hex		(x,	1);
	create_insn	(x=0X140002F7C);
	op_hex		(x,	1);
	create_insn	(x=0X140002F85);
	op_hex		(x,	1);
	create_insn	(x=0X140002F8C);
	op_hex		(x,	1);
	create_insn	(x=0X140002F95);
	op_hex		(x,	1);
	create_insn	(x=0X140002FA6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140002FB0);
	op_hex		(x,	1);
	create_insn	(x=0X140002FB9);
	op_hex		(x,	1);
	create_insn	(x=0X140002FD2);
	op_stkvar	(x,	0);
	set_cmt	(0X140002FD7,	"lpCaption",	0);
	set_cmt	(0X140002FD8,	"lpText",	0);
	set_cmt	(0X140002FD9,	"uType",	0);
	create_insn	(x=0X140002FDB);
	op_hex		(x,	1);
	create_insn	(x=0X140002FE4);
	op_hex		(x,	1);
	create_insn	(x=0X140002FEA);
	op_hex		(x,	1);
	create_insn	(x=0X140002FF3);
	op_hex		(x,	1);
	create_insn	(0X140003003);
	create_insn	(0X140003005);
	create_insn	(x=0X140003010);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003016);
	op_hex		(x,	1);
	create_insn	(x=0X14000301F);
	op_hex		(x,	1);
	set_cmt	(0X140003023,	"wchar_t *",	0);
	create_insn	(x=0X140003025);
	op_hex		(x,	1);
	create_insn	(x=0X14000302E);
	op_hex		(x,	1);
	create_insn	(0X14000303F);
	create_insn	(x=0X14000304A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000304F);
	op_hex		(x,	1);
	create_insn	(x=0X140003058);
	op_hex		(x,	1);
	create_insn	(x=0X14000305C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003061);
	op_hex		(x,	1);
	create_insn	(x=0X14000306A);
	op_hex		(x,	1);
	create_insn	(x=0X14000306E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003073);
	op_hex		(x,	1);
	create_insn	(x=0X14000307C);
	op_hex		(x,	1);
	create_insn	(x=0X140003080);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003085);
	op_hex		(x,	1);
	create_insn	(x=0X14000308E);
	op_hex		(x,	1);
	create_insn	(x=0X140003093);
	op_hex		(x,	1);
	create_insn	(x=0X14000309A);
	op_stkvar	(x,	0);
	set_name	(0X14000309A,	"MyWriteFileText");
	create_insn	(x=0X14000309F);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400030AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400030B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400030B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400030BC);
	op_hex		(x,	1);
	create_insn	(x=0X1400030C5);
	op_hex		(x,	1);
	create_insn	(x=0X1400030C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400030CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400030D3);
	op_hex		(x,	1);
	create_insn	(x=0X1400030DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400030E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400030F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400030FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003104);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003108);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003113);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003118);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003122);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003134);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000313D);
	op_stkvar	(x,	1);
	create_insn	(0X140003144);
	create_insn	(x=0X140003148);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000314D);
	op_hex		(x,	1);
	create_insn	(x=0X140003156);
	op_hex		(x,	1);
	create_insn	(x=0X14000315A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000315F);
	op_hex		(x,	1);
	create_insn	(x=0X140003168);
	op_hex		(x,	1);
	create_insn	(x=0X14000316D);
	op_hex		(x,	1);
	create_insn	(x=0X140003174);
	op_stkvar	(x,	0);
	set_name	(0X140003174,	"OpenExistingFileW_0");
	create_insn	(x=0X140003180);
	op_hex		(x,	1);
	create_insn	(x=0X140003184);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003189);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000318E);
	op_hex		(x,	1);
	create_insn	(x=0X140003197);
	op_hex		(x,	1);
	create_insn	(x=0X1400031A0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400031B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400031B7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400031BF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400031C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400031D2);
	op_stkvar	(x,	1);
	create_insn	(0X1400031D9);
	create_insn	(x=0X1400031DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400031E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400031EB);
	op_hex		(x,	1);
	create_insn	(x=0X1400031F0);
	op_hex		(x,	1);
	create_insn	(0X1400031F5);
	set_name	(0X1400031F5,	"set_env_vars");
	create_insn	(x=0X1400031FE);
	op_hex		(x,	1);
	create_insn	(x=0X140003202);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000320F);
	op_hex		(x,	1);
	create_insn	(x=0X140003218);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003236);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000323F);
	op_stkvar	(x,	0);
	create_insn	(0X140003241);
	create_insn	(x=0X140003248);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000325E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000326B);
	op_hex		(x,	1);
	create_insn	(x=0X140003274);
	op_hex		(x,	1);
	create_insn	(x=0X14000327A);
	op_hex		(x,	1);
	create_insn	(x=0X14000327F);
	op_hex		(x,	1);
	create_insn	(x=0X140003288);
	op_hex		(x,	1);
	create_insn	(x=0X14000328E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000329D);
	op_hex		(x,	1);
	create_insn	(x=0X1400032A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400032AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400032B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400032BB);
	op_hex		(x,	1);
	create_insn	(x=0X1400032C4);
	op_hex		(x,	1);
	set_cmt	(0X1400032C8,	"wchar_t *",	0);
	create_insn	(x=0X1400032CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400032D3);
	op_hex		(x,	1);
	set_cmt	(0X1400032D7,	"wchar_t *",	0);
	create_insn	(x=0X1400032D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400032DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400032E5);
	op_hex		(x,	1);
	create_insn	(x=0X1400032E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400032F4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003300);
	op_hex		(x,	1);
	create_insn	(x=0X140003309);
	op_hex		(x,	1);
	create_insn	(x=0X14000330F);
	op_hex		(x,	1);
	create_insn	(x=0X140003314);
	op_hex		(x,	1);
	create_insn	(x=0X14000331D);
	op_hex		(x,	1);
	create_insn	(x=0X140003323);
	op_hex		(x,	1);
	create_insn	(x=0X140003327);
	op_hex		(x,	1);
	create_insn	(x=0X140003330);
	op_hex		(x,	1);
	create_insn	(x=0X14000333A);
	op_hex		(x,	1);
	create_insn	(x=0X140003343);
	op_hex		(x,	1);
	create_insn	(x=0X140003347);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003352);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003358);
	op_hex		(x,	1);
	create_insn	(x=0X140003361);
	op_hex		(x,	1);
	set_cmt	(0X140003365,	"wchar_t *",	0);
	create_insn	(x=0X140003367);
	op_hex		(x,	1);
	create_insn	(x=0X140003370);
	op_hex		(x,	1);
	create_insn	(x=0X140003374);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000337F);
	op_stkvar	(x,	1);
	set_cmt	(0X140003388,	"pszPath",	0);
	create_insn	(x=0X14000338E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003393);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000339D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400033A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400033B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400033BA);
	op_hex		(x,	1);
	set_cmt	(0X1400033C0,	"wchar_t *",	0);
	create_insn	(x=0X1400033C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400033CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400033D3);
	op_hex		(x,	1);
	create_insn	(x=0X1400033D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400033E1);
	op_hex		(x,	1);
	create_insn	(x=0X1400033E8);
	op_hex		(x,	1);
	create_insn	(x=0X1400033F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400033F8);
	op_hex		(x,	1);
	create_insn	(x=0X140003401);
	op_hex		(x,	1);
	create_insn	(x=0X140003408);
	op_hex		(x,	1);
	create_insn	(x=0X140003411);
	op_hex		(x,	1);
	create_insn	(x=0X140003417);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003426);
	op_stkvar	(x,	0);
	set_cmt	(0X14000342A,	"a1",	0);
	set_cmt	(0X14000342B,	"a2",	0);
	set_cmt	(0X14000342C,	"a3",	0);
	create_insn	(x=0X14000342E);
	op_hex		(x,	1);
	create_insn	(x=0X140003437);
	op_hex		(x,	1);
	create_insn	(x=0X140003445);
	op_stkvar	(x,	0);
	set_cmt	(0X140003449,	"a1",	0);
	set_cmt	(0X14000344A,	"a2",	0);
	create_insn	(x=0X14000344B);
	op_hex		(x,	1);
	create_insn	(x=0X140003454);
	op_hex		(x,	1);
	create_insn	(x=0X140003459);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003464);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003468);
	op_stkvar	(x,	0);
	set_cmt	(0X14000346C,	"lpName",	0);
	set_cmt	(0X14000346D,	"lpValue",	0);
	create_insn	(x=0X140003473);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003479);
	op_hex		(x,	1);
	create_insn	(x=0X140003482);
	op_hex		(x,	1);
	set_cmt	(0X140003486,	"wchar_t *",	0);
	create_insn	(x=0X140003488);
	op_hex		(x,	1);
	create_insn	(x=0X140003491);
	op_hex		(x,	1);
	create_insn	(0X1400034A2);
	create_insn	(x=0X1400034AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400034B2);
	op_hex		(x,	1);
	create_insn	(x=0X1400034BB);
	op_hex		(x,	1);
	create_insn	(x=0X1400034BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400034C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400034CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400034D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400034D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400034DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400034E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400034E8);
	op_hex		(x,	1);
	create_insn	(x=0X1400034F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400034F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400034FA);
	op_hex		(x,	1);
	create_insn	(x=0X140003503);
	op_hex		(x,	1);
	create_insn	(x=0X140003508);
	op_hex		(x,	1);
	create_insn	(x=0X14000350F);
	op_stkvar	(x,	0);
	set_name	(0X14000350F,	"Alloc_LoadResource");
	create_insn	(x=0X140003514);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000351E);
	op_hex		(x,	1);
	create_insn	(x=0X140003527);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000352B);
	op_stkvar	(x,	0);
	set_cmt	(0X14000352F,	"hModule",	0);
	set_cmt	(0X140003530,	"hResInfo",	0);
	create_insn	(x=0X140003536);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000353B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000353F);
	op_stkvar	(x,	0);
	set_cmt	(0X140003543,	"hModule",	0);
	set_cmt	(0X140003544,	"hResInfo",	0);
	set_cmt	(0X140003557,	"dwBytes_1",	0);
	create_insn	(x=0X14000355D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003568);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000356C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003579);
	op_stkvar	(x,	0);
	set_cmt	(0X14000357D,	"hResData",	0);
	create_insn	(x=0X140003583);
	op_stkvar	(x,	1);
	create_insn	(0X14000358A);
	create_insn	(x=0X14000358D);
	op_hex		(x,	1);
	create_insn	(x=0X140003592);
	op_stkvar	(x,	0);
	set_name	(0X140003592,	"m_PTHREAD_START_ROUTINE");
	create_insn	(x=0X1400035A1);
	op_hex		(x,	1);
	create_insn	(x=0X1400035A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400035B2);
	op_hex		(x,	1);
	create_insn	(x=0X1400035BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400035C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400035C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400035D1);
	op_hex		(x,	1);
	create_insn	(x=0X1400035DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400035DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400035EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400035EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400035FB);
	op_hex		(x,	1);
	create_insn	(x=0X140003604);
	op_hex		(x,	1);
	create_insn	(x=0X14000360A);
	op_hex		(x,	1);
	create_insn	(x=0X14000360F);
	op_hex		(x,	1);
	create_insn	(x=0X140003618);
	op_hex		(x,	1);
	create_insn	(x=0X14000361F);
	op_hex		(x,	1);
	create_insn	(x=0X140003628);
	op_hex		(x,	1);
	create_insn	(x=0X14000362F);
	op_hex		(x,	1);
	create_insn	(x=0X140003638);
	op_hex		(x,	1);
	create_insn	(x=0X140003643);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003660);
	op_hex		(x,	1);
	create_insn	(x=0X140003669);
	op_hex		(x,	1);
	create_insn	(x=0X140003677);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000367D);
	op_hex		(x,	1);
	create_insn	(x=0X140003686);
	op_hex		(x,	1);
	create_insn	(x=0X14000368A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003696);
	op_hex		(x,	1);
	create_insn	(x=0X14000369F);
	op_hex		(x,	1);
	create_insn	(x=0X1400036A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400036AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400036B3);
	op_hex		(x,	1);
	create_insn	(x=0X1400036B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400036BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400036C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400036CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400036DC);
	op_stkvar	(x,	0);
	set_cmt	(0X1400036E6,	"hModule",	0);
	set_cmt	(0X1400036E7,	"lpName",	0);
	set_cmt	(0X1400036E8,	"lpType",	0);
	create_insn	(x=0X1400036EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400036F9);
	op_stkvar	(x,	0);
	set_cmt	(0X140003703,	"hModule",	0);
	set_cmt	(0X140003704,	"lpName",	0);
	set_cmt	(0X140003705,	"lpType",	0);
	create_insn	(x=0X14000370C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003711);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000371D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000372E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003733);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000373D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000374A);
	op_hex		(x,	1);
	create_insn	(x=0X140003753);
	op_hex		(x,	1);
	set_cmt	(0X140003757,	"wchar_t *",	0);
	create_insn	(x=0X140003759);
	op_hex		(x,	1);
	create_insn	(x=0X140003762);
	op_hex		(x,	1);
	set_cmt	(0X140003766,	"wchar_t *",	0);
	create_insn	(x=0X14000376D);
	op_hex		(x,	1);
	create_insn	(x=0X140003776);
	op_hex		(x,	1);
	create_insn	(x=0X14000377A);
	op_stkvar	(x,	1);
	set_cmt	(0X14000378D,	"wchar_t *",	0);
	create_insn	(x=0X140003791);
	op_hex		(x,	1);
	create_insn	(x=0X14000379A);
	op_hex		(x,	1);
	create_insn	(x=0X14000379E);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400037B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400037BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400037D0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400037D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400037DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400037F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000380E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003821);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000382D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000383E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003843);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000384D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003858);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003861);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003876);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003880);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003885);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003898);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000389D);
	op_stkvar	(x,	0);
	set_cmt	(0X1400038A1,	"dwBytes_1",	0);
	create_insn	(x=0X1400038A7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400038B7);
	op_hex		(x,	1);
	create_insn	(x=0X1400038C0);
	op_hex		(x,	1);
	set_cmt	(0X1400038C4,	"wchar_t *",	0);
	create_insn	(x=0X1400038C6);
	op_hex		(x,	1);
	create_insn	(x=0X1400038CF);
	op_hex		(x,	1);
	set_cmt	(0X1400038D3,	"wchar_t *",	0);
	create_insn	(x=0X1400038DA);
	op_hex		(x,	1);
	create_insn	(x=0X1400038E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400038E7);
	op_stkvar	(x,	1);
	set_cmt	(0X1400038FA,	"wchar_t *",	0);
	create_insn	(x=0X1400038FE);
	op_hex		(x,	1);
	create_insn	(x=0X140003907);
	op_hex		(x,	1);
	create_insn	(x=0X14000390B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003919);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003928);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000392C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000393C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003945);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003957);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000395F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003963);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000396A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003987);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000399D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400039AB);
	op_stkvar	(x,	0);
	set_cmt	(0X1400039B2,	"hHeap",	0);
	create_insn	(0X1400039BD);
	create_insn	(x=0X1400039C5);
	op_hex		(x,	1);
	create_insn	(x=0X1400039CE);
	op_hex		(x,	1);
	set_cmt	(0X1400039D2,	"wchar_t *",	0);
	create_insn	(x=0X1400039D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400039DD);
	op_hex		(x,	1);
	set_cmt	(0X1400039E1,	"wchar_t *",	0);
	create_insn	(x=0X1400039E8);
	op_hex		(x,	1);
	create_insn	(x=0X1400039F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400039F5);
	op_stkvar	(x,	1);
	set_cmt	(0X140003A08,	"wchar_t *",	0);
	create_insn	(x=0X140003A0C);
	op_hex		(x,	1);
	create_insn	(x=0X140003A15);
	op_hex		(x,	1);
	create_insn	(x=0X140003A19);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003A2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003A33);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003A50);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003A66);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003A74);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003A9C);
	op_hex		(x,	1);
	create_insn	(x=0X140003AA5);
	op_hex		(x,	1);
	create_insn	(x=0X140003AAB);
	op_hex		(x,	1);
	create_insn	(x=0X140003AB0);
	op_hex		(x,	1);
	create_insn	(x=0X140003AB9);
	op_hex		(x,	1);
	create_insn	(x=0X140003AC0);
	op_hex		(x,	1);
	create_insn	(x=0X140003AC9);
	op_hex		(x,	1);
	set_cmt	(0X140003ACE,	"alen",	0);
	create_insn	(x=0X140003ACF);
	op_stkvar	(x,	0);
	set_cmt	(0X140003AD6,	"lpszLongPath_1",	0);
	create_insn	(x=0X140003AD7);
	op_hex		(x,	1);
	create_insn	(x=0X140003AE0);
	op_hex		(x,	1);
	create_insn	(x=0X140003AF1);
	op_hex		(x,	1);
	create_insn	(x=0X140003AFA);
	op_hex		(x,	1);
	set_cmt	(0X140003AFE,	"wchar_t *",	0);
	create_insn	(x=0X140003B00);
	op_hex		(x,	1);
	create_insn	(x=0X140003B09);
	op_hex		(x,	1);
	create_insn	(x=0X140003B0E);
	op_hex		(x,	1);
	create_insn	(x=0X140003B17);
	op_hex		(x,	1);
	create_insn	(x=0X140003B1D);
	op_hex		(x,	1);
	create_insn	(x=0X140003B22);
	op_hex		(x,	1);
	create_insn	(x=0X140003B2B);
	op_hex		(x,	1);
	create_insn	(x=0X140003B39);
	op_hex		(x,	1);
	create_insn	(x=0X140003B42);
	op_hex		(x,	1);
	set_cmt	(0X140003B4D,	"retstr",	0);
	create_insn	(x=0X140003B5F);
	op_stkvar	(x,	0);
	set_cmt	(0X140003B64,	"lpName",	0);
	set_cmt	(0X140003B65,	"lpValue",	0);
	create_insn	(x=0X140003B66);
	op_hex		(x,	1);
	create_insn	(x=0X140003B6F);
	op_hex		(x,	1);
	create_insn	(x=0X140003B75);
	op_hex		(x,	1);
	create_insn	(x=0X140003B7E);
	op_hex		(x,	1);
	set_cmt	(0X140003B89,	"a601",	0);
	create_insn	(x=0X140003B8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003B98);
	op_hex		(x,	1);
	create_insn	(x=0X140003BA1);
	op_hex		(x,	1);
	set_cmt	(0X140003BA5,	"wchar_t *",	0);
	create_insn	(x=0X140003BA7);
	op_hex		(x,	1);
	create_insn	(x=0X140003BB0);
	op_hex		(x,	1);
	create_insn	(x=0X140003BC5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003BD0);
	op_stkvar	(x,	0);
	set_cmt	(0X140003BD4,	"hHeap",	0);
	create_insn	(x=0X140003BDB);
	op_hex		(x,	1);
	create_insn	(x=0X140003BE4);
	op_hex		(x,	1);
	create_insn	(x=0X140003BEA);
	op_hex		(x,	1);
	create_insn	(x=0X140003BEF);
	op_hex		(x,	1);
	create_insn	(x=0X140003BF8);
	op_hex		(x,	1);
	create_insn	(x=0X140003BFE);
	op_hex		(x,	1);
	create_insn	(x=0X140003C03);
	op_hex		(x,	1);
	create_insn	(x=0X140003C0C);
	op_hex		(x,	1);
	create_insn	(x=0X140003C1A);
	op_hex		(x,	1);
	create_insn	(x=0X140003C23);
	op_hex		(x,	1);
	create_insn	(x=0X140003C3C);
	op_stkvar	(x,	0);
	set_cmt	(0X140003C41,	"lpName",	0);
	set_cmt	(0X140003C42,	"lpValue",	0);
	create_insn	(x=0X140003C43);
	op_hex		(x,	1);
	create_insn	(x=0X140003C4C);
	op_hex		(x,	1);
	create_insn	(x=0X140003C52);
	op_hex		(x,	1);
	create_insn	(x=0X140003C5B);
	op_hex		(x,	1);
	create_insn	(0X140003C6E);
	create_insn	(x=0X140003C72);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003C77);
	op_hex		(x,	1);
	create_insn	(x=0X140003C80);
	op_hex		(x,	1);
	create_insn	(x=0X140003C84);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003C89);
	op_hex		(x,	1);
	create_insn	(x=0X140003C92);
	op_hex		(x,	1);
	create_insn	(x=0X140003C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003C9E);
	op_hex		(x,	1);
	create_insn	(x=0X140003CA7);
	op_hex		(x,	1);
	create_insn	(x=0X140003CAB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003CB0);
	op_hex		(x,	1);
	create_insn	(x=0X140003CB9);
	op_hex		(x,	1);
	create_insn	(x=0X140003CBE);
	op_hex		(x,	1);
	create_insn	(x=0X140003CC9);
	op_stkvar	(x,	0);
	set_name	(0X140003CC9,	"str_get_lpszShortPath");
	create_insn	(x=0X140003CD5);
	op_hex		(x,	1);
	create_insn	(x=0X140003CDE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003CE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003CED);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003CF2);
	op_hex		(x,	1);
	create_insn	(x=0X140003CFB);
	op_hex		(x,	1);
	set_cmt	(0X140003D04,	"dwBytes_1",	0);
	create_insn	(x=0X140003D0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003D14);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003D18);
	op_stkvar	(x,	0);
	set_cmt	(0X140003D1C,	"lpszLongPath",	0);
	set_cmt	(0X140003D1D,	"lpszShortPath",	0);
	set_cmt	(0X140003D1E,	"cchBuffer",	0);
	create_insn	(x=0X140003D26);
	op_hex		(x,	1);
	create_insn	(x=0X140003D2F);
	op_hex		(x,	1);
	create_insn	(x=0X140003D35);
	op_hex		(x,	1);
	create_insn	(x=0X140003D3A);
	op_hex		(x,	1);
	create_insn	(x=0X140003D43);
	op_hex		(x,	1);
	create_insn	(x=0X140003D4E);
	op_stkvar	(x,	0);
	set_cmt	(0X140003D52,	"alpszShortPath",	0);
	set_cmt	(0X140003D53,	"alen",	0);
	set_cmt	(0X140003D54,	"apos",	0);
	create_insn	(x=0X140003D56);
	op_hex		(x,	1);
	create_insn	(x=0X140003D5F);
	op_hex		(x,	1);
	create_insn	(x=0X140003D63);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003D6E);
	op_stkvar	(x,	0);
	set_cmt	(0X140003D72,	"hHeap",	0);
	create_insn	(x=0X140003D78);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003D7E);
	op_hex		(x,	1);
	create_insn	(x=0X140003D87);
	op_hex		(x,	1);
	set_cmt	(0X140003D8B,	"wchar_t *",	0);
	create_insn	(x=0X140003D8D);
	op_hex		(x,	1);
	create_insn	(x=0X140003D96);
	op_hex		(x,	1);
	create_insn	(0X140003DA7);
	create_insn	(x=0X140003DB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003DB7);
	op_hex		(x,	1);
	create_insn	(x=0X140003DC0);
	op_hex		(x,	1);
	create_insn	(x=0X140003DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003DC9);
	op_hex		(x,	1);
	create_insn	(x=0X140003DD2);
	op_hex		(x,	1);
	create_insn	(x=0X140003DD7);
	op_hex		(x,	1);
	create_insn	(x=0X140003DDC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003DEA);
	op_hex		(x,	1);
	create_insn	(x=0X140003DFB);
	op_hex		(x,	1);
	create_insn	(x=0X140003E04);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003E09);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003E0E);
	op_hex		(x,	1);
	create_insn	(x=0X140003E17);
	op_hex		(x,	1);
	create_insn	(x=0X140003E1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003E27);
	op_hex		(x,	1);
	create_insn	(x=0X140003E30);
	op_hex		(x,	1);
	create_insn	(x=0X140003E36);
	op_hex		(x,	1);
	create_insn	(x=0X140003E3B);
	op_hex		(x,	1);
	create_insn	(x=0X140003E44);
	op_hex		(x,	1);
	create_insn	(x=0X140003E4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003E55);
	op_hex		(x,	1);
	create_insn	(x=0X140003E5E);
	op_hex		(x,	1);
	create_insn	(x=0X140003E62);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003E6E);
	op_hex		(x,	1);
	create_insn	(x=0X140003E77);
	op_hex		(x,	1);
	create_insn	(x=0X140003E7D);
	op_hex		(x,	1);
	create_insn	(x=0X140003E82);
	op_hex		(x,	1);
	create_insn	(x=0X140003E8B);
	op_hex		(x,	1);
	create_insn	(x=0X140003E92);
	op_hex		(x,	1);
	create_insn	(x=0X140003E9B);
	op_hex		(x,	1);
	create_insn	(x=0X140003EA2);
	op_hex		(x,	1);
	create_insn	(x=0X140003EAB);
	op_hex		(x,	1);
	create_insn	(x=0X140003EB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003EBE);
	op_hex		(x,	1);
	create_insn	(x=0X140003EC7);
	op_hex		(x,	1);
	create_insn	(x=0X140003ED5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003EDB);
	op_hex		(x,	1);
	create_insn	(x=0X140003EE4);
	op_hex		(x,	1);
	create_insn	(x=0X140003EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003EF8);
	op_stkvar	(x,	0);
	set_cmt	(0X140003F02,	"hModule",	0);
	set_cmt	(0X140003F03,	"lpName",	0);
	set_cmt	(0X140003F04,	"lpType",	0);
	create_insn	(x=0X140003F0B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003F10);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003F1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003F2D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003F32);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003F54);
	op_stkvar	(x,	1);
	create_insn	(x=0X140003F67);
	op_hex		(x,	1);
	create_insn	(x=0X140003F70);
	op_hex		(x,	1);
	create_insn	(x=0X140003F76);
	op_hex		(x,	1);
	create_insn	(x=0X140003F7B);
	op_hex		(x,	1);
	create_insn	(x=0X140003F84);
	op_hex		(x,	1);
	create_insn	(x=0X140003F90);
	op_stkvar	(x,	0);
	set_cmt	(0X140003F94,	"alpszShortPath",	0);
	set_cmt	(0X140003F95,	"alen",	0);
	set_cmt	(0X140003F96,	"apos",	0);
	create_insn	(x=0X140003F98);
	op_hex		(x,	1);
	create_insn	(x=0X140003FA1);
	op_hex		(x,	1);
	create_insn	(x=0X140003FA5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140003FB2);
	op_stkvar	(x,	0);
	set_cmt	(0X140003FB6,	"hHeap",	0);
	create_insn	(x=0X140003FD4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140003FDA);
	op_hex		(x,	1);
	create_insn	(x=0X140003FE3);
	op_hex		(x,	1);
	create_insn	(x=0X140003FE9);
	op_hex		(x,	1);
	create_insn	(x=0X140003FEE);
	op_hex		(x,	1);
	create_insn	(x=0X140003FF7);
	op_hex		(x,	1);
	create_insn	(x=0X140003FFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004013);
	op_hex		(x,	1);
	create_insn	(x=0X14000401C);
	op_hex		(x,	1);
	create_insn	(x=0X140004020);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140004041);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000404C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004055);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140004060,	"lpStartAddress",	0);
	set_cmt	(0X140004061,	"lpParameter",	0);
	create_insn	(x=0X140004070);
	op_stkvar	(x,	0);
	set_cmt	(0X140004074,	"wchar_t *",	0);
	create_insn	(0X14000407C);
	create_insn	(x=0X140004080);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004085);
	op_hex		(x,	1);
	create_insn	(x=0X14000408E);
	op_hex		(x,	1);
	create_insn	(x=0X140004092);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004097);
	op_hex		(x,	1);
	create_insn	(x=0X1400040A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400040A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400040AC);
	op_stkvar	(x,	0);
	set_name	(0X1400040AC,	"EnumResNameW");
	create_insn	(x=0X1400040B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400040B6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400040BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400040C5);
	op_hex		(x,	1);
	set_cmt	(0X1400040D4,	"a601",	0);
	create_insn	(x=0X1400040DB);
	op_hex		(x,	1);
	create_insn	(x=0X1400040E4);
	op_hex		(x,	1);
	create_insn	(x=0X1400040EA);
	op_hex		(x,	1);
	create_insn	(x=0X1400040EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400040F8);
	op_hex		(x,	1);
	create_insn	(x=0X1400040FE);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004104);
	op_hex		(x,	1);
	create_insn	(x=0X14000410D);
	op_hex		(x,	1);
	create_insn	(0X14000412B);
	create_insn	(x=0X14000412E);
	op_hex		(x,	1);
	create_insn	(x=0X140004134);
	op_stkvar	(x,	0);
	set_name	(0X140004134,	"decode");
	create_insn	(x=0X140004142);
	op_hex		(x,	1);
	create_insn	(x=0X14000414B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004150);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004155);
	op_hex		(x,	1);
	create_insn	(x=0X14000415E);
	op_hex		(x,	1);
	create_insn	(x=0X140004167);
	op_stkvar	(x,	0);
	set_cmt	(0X140004171,	"hModule",	0);
	set_cmt	(0X140004172,	"lpName",	0);
	set_cmt	(0X140004173,	"lpType",	0);
	create_insn	(x=0X14000417A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000417F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004187);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004198);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000419D);
	op_stkvar	(x,	0);
	set_cmt	(0X1400041B3,	"dwBytes_1",	0);
	create_insn	(x=0X1400041B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400041BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400041CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400041D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400041DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400041E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400041EE);
	op_stkvar	(x,	1);
	create_insn	(0X1400041F5);
	create_insn	(x=0X1400041F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400041FE);
	op_hex		(x,	1);
	create_insn	(x=0X140004207);
	op_hex		(x,	1);
	create_insn	(x=0X14000420C);
	op_hex		(x,	1);
	create_insn	(0X140004211);
	set_name	(0X140004211,	"asm_initMdStuff");
	create_insn	(x=0X140004219);
	op_hex		(x,	1);
	create_insn	(x=0X140004222);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004247);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000425E);
	op_stkvar	(x,	0);
	update_extra_cmt		(0X14000426B,	E_PREV + 0,	"");
	update_extra_cmt		(0X14000426B,	E_PREV + 1,	"");
	create_insn	(x=0X14000426B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000426F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000427F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004283);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000429B);
	op_hex		(x,	1);
	create_insn	(x=0X1400042A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400042AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400042AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400042B8);
	op_hex		(x,	1);
	create_insn	(x=0X1400042BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400042C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400042CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400042D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400042E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400042F7);
	op_hex		(x,	1);
	create_insn	(x=0X140004300);
	op_hex		(x,	1);
	create_insn	(x=0X14000430E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004314);
	op_hex		(x,	1);
	create_insn	(x=0X14000431D);
	op_hex		(x,	1);
	create_insn	(0X14000432E);
	create_insn	(x=0X140004338);
	op_hex		(x,	1);
	create_insn	(0X14000433F);
	set_name	(0X14000433F,	"CMD_sub_14000433F");
	create_insn	(x=0X140004348);
	op_hex		(x,	1);
	create_insn	(x=0X140004352);
	op_hex		(x,	1);
	create_insn	(x=0X14000435B);
	op_hex		(x,	1);
	create_insn	(x=0X140004361);
	op_hex		(x,	1);
	create_insn	(x=0X140004366);
	op_hex		(x,	1);
	create_insn	(x=0X14000436F);
	op_hex		(x,	1);
	create_insn	(x=0X140004376);
	op_hex		(x,	1);
	create_insn	(x=0X14000437F);
	op_hex		(x,	1);
	create_insn	(x=0X140004386);
	op_hex		(x,	1);
	create_insn	(x=0X14000438F);
	op_hex		(x,	1);
	create_insn	(x=0X1400043A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400043AD);
	op_hex		(x,	1);
	create_insn	(x=0X1400043BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400043C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400043CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400043CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400043DA);
	op_hex		(x,	1);
	create_insn	(x=0X1400043E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400043E9);
	op_hex		(x,	1);
	create_insn	(x=0X1400043EE);
	op_hex		(x,	1);
	create_insn	(x=0X1400043F7);
	op_hex		(x,	1);
	create_insn	(x=0X1400043FE);
	op_hex		(x,	1);
	create_insn	(x=0X140004407);
	op_hex		(x,	1);
	create_insn	(x=0X14000440E);
	op_hex		(x,	1);
	create_insn	(x=0X140004417);
	op_hex		(x,	1);
	create_insn	(x=0X140004422);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000442A);
	op_hex		(x,	1);
	create_insn	(x=0X140004433);
	op_hex		(x,	1);
	create_insn	(x=0X140004441);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004447);
	op_hex		(x,	1);
	create_insn	(x=0X140004450);
	op_hex		(x,	1);
	create_insn	(x=0X140004454);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000445F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004469);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000446F);
	op_hex		(x,	1);
	create_insn	(x=0X140004478);
	op_hex		(x,	1);
	create_insn	(x=0X14000447F);
	op_hex		(x,	1);
	create_insn	(x=0X140004488);
	op_hex		(x,	1);
	create_insn	(x=0X14000448E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004493);
	op_hex		(x,	1);
	create_insn	(x=0X14000449C);
	op_hex		(x,	1);
	create_insn	(x=0X1400044A2);
	op_hex		(x,	1);
	create_insn	(x=0X1400044AB);
	op_hex		(x,	1);
	create_insn	(x=0X1400044B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400044BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400044C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400044C5);
	op_hex		(x,	1);
	create_insn	(x=0X1400044CE);
	op_hex		(x,	1);
	create_insn	(x=0X1400044E9);
	op_hex		(x,	1);
	create_insn	(x=0X1400044F2);
	op_hex		(x,	1);
	create_insn	(x=0X1400044F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004501);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004518);
	op_hex		(x,	1);
	create_insn	(x=0X140004521);
	op_hex		(x,	1);
	create_insn	(x=0X140004527);
	op_hex		(x,	1);
	create_insn	(x=0X14000452C);
	op_hex		(x,	1);
	create_insn	(x=0X140004535);
	op_hex		(x,	1);
	create_insn	(x=0X14000453C);
	op_hex		(x,	1);
	create_insn	(x=0X140004545);
	op_hex		(x,	1);
	create_insn	(x=0X14000454C);
	op_hex		(x,	1);
	create_insn	(x=0X140004555);
	op_hex		(x,	1);
	create_insn	(x=0X14000456A);
	op_hex		(x,	1);
	create_insn	(x=0X140004573);
	op_hex		(x,	1);
	create_insn	(x=0X140004581);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004587);
	op_hex		(x,	1);
	create_insn	(x=0X140004590);
	op_hex		(x,	1);
	create_insn	(x=0X140004594);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400045A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400045A9);
	op_hex		(x,	1);
	create_insn	(x=0X1400045AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400045B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400045BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400045C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400045CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400045D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400045DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400045F2);
	op_hex		(x,	1);
	create_insn	(x=0X1400045FB);
	op_hex		(x,	1);
	create_insn	(x=0X140004609);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000460F);
	op_hex		(x,	1);
	create_insn	(x=0X140004618);
	op_hex		(x,	1);
	create_insn	(x=0X14000461C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004628);
	op_hex		(x,	1);
	create_insn	(x=0X140004631);
	op_hex		(x,	1);
	create_insn	(x=0X140004638);
	op_hex		(x,	1);
	create_insn	(x=0X140004641);
	op_hex		(x,	1);
	set_cmt	(0X140004646,	"a5",	0);
	set_cmt	(0X140004647,	"a5",	0);
	create_insn	(x=0X14000464C);
	op_stkvar	(x,	0);
	set_cmt	(0X140004650,	"a1",	0);
	set_cmt	(0X140004651,	"a2",	0);
	create_insn	(x=0X140004652);
	op_hex		(x,	1);
	create_insn	(x=0X14000465B);
	op_hex		(x,	1);
	create_insn	(x=0X14000465F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000466D);
	op_hex		(x,	1);
	create_insn	(x=0X140004676);
	op_hex		(x,	1);
	create_insn	(x=0X14000467D);
	op_hex		(x,	1);
	create_insn	(x=0X140004686);
	op_hex		(x,	1);
	set_cmt	(0X14000468B,	"a5",	0);
	set_cmt	(0X14000468C,	"a5",	0);
	create_insn	(x=0X140004691);
	op_stkvar	(x,	0);
	set_cmt	(0X140004695,	"a1",	0);
	set_cmt	(0X140004696,	"a2",	0);
	create_insn	(x=0X140004697);
	op_hex		(x,	1);
	create_insn	(x=0X1400046A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400046A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400046AF);
	op_stkvar	(x,	0);
	set_cmt	(0X1400046B3,	"pszPath",	0);
	create_insn	(x=0X1400046BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400046C3);
	op_hex		(x,	1);
	create_insn	(x=0X1400046C9);
	op_hex		(x,	1);
	create_insn	(x=0X1400046CD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400046D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400046D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400046E0);
	op_hex		(x,	1);
	set_cmt	(0X1400046E4,	"wchar_t *",	0);
	create_insn	(x=0X1400046E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400046EF);
	op_hex		(x,	1);
	set_cmt	(0X1400046F3,	"wchar_t *",	0);
	create_insn	(x=0X1400046FA);
	op_hex		(x,	1);
	create_insn	(x=0X140004703);
	op_hex		(x,	1);
	create_insn	(x=0X140004711);
	op_stkvar	(x,	0);
	set_cmt	(0X140004715,	"aFileName",	0);
	set_cmt	(0X140004716,	"aBuffer",	0);
	create_insn	(x=0X140004717);
	op_hex		(x,	1);
	create_insn	(x=0X140004720);
	op_hex		(x,	1);
	create_insn	(x=0X140004726);
	op_hex		(x,	1);
	create_insn	(x=0X14000472F);
	op_hex		(x,	1);
	create_insn	(x=0X140004734);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000473A);
	op_hex		(x,	1);
	create_insn	(x=0X140004743);
	op_hex		(x,	1);
	set_cmt	(0X140004747,	"wchar_t *",	0);
	create_insn	(x=0X140004749);
	op_hex		(x,	1);
	create_insn	(x=0X140004752);
	op_hex		(x,	1);
	create_insn	(x=0X140004756);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140004769,	"pszPath",	0);
	create_insn	(x=0X14000476F);
	op_stkvar	(x,	0);
	create_insn	(0X14000477E);
	create_insn	(x=0X140004782);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004787);
	op_hex		(x,	1);
	create_insn	(x=0X140004790);
	op_hex		(x,	1);
	create_insn	(x=0X140004794);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004799);
	op_hex		(x,	1);
	create_insn	(x=0X1400047A2);
	op_hex		(x,	1);
	create_insn	(x=0X1400047A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400047AB);
	op_hex		(x,	1);
	create_insn	(x=0X1400047B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400047B8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400047BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400047C6);
	op_hex		(x,	1);
	create_insn	(x=0X1400047CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400047CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400047D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400047DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400047E2);
	op_stkvar	(x,	0);
	set_name	(0X1400047E2,	"add_SystemDirectory_to_STR_tree");
	create_insn	(x=0X1400047E7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400047F3);
	op_hex		(x,	1);
	create_insn	(x=0X1400047FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004806);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000480B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004810);
	op_hex		(x,	1);
	create_insn	(x=0X140004819);
	op_hex		(x,	1);
	create_insn	(x=0X14000481D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004822);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004827);
	op_hex		(x,	1);
	create_insn	(x=0X140004830);
	op_hex		(x,	1);
	create_insn	(x=0X140004835);
	op_hex		(x,	1);
	create_insn	(x=0X14000483E);
	op_hex		(x,	1);
	create_insn	(x=0X140004844);
	op_hex		(x,	1);
	create_insn	(x=0X140004849);
	op_hex		(x,	1);
	create_insn	(x=0X140004852);
	op_hex		(x,	1);
	create_insn	(x=0X14000485F);
	op_hex		(x,	1);
	create_insn	(x=0X140004868);
	op_hex		(x,	1);
	create_insn	(x=0X14000486C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000487C);
	op_stkvar	(x,	0);
	set_cmt	(0X140004880,	"lpBuffer",	0);
	set_cmt	(0X140004881,	"uSize",	0);
	create_insn	(x=0X140004887);
	op_stkvar	(x,	0);
	set_cmt	(0X14000488B,	"pszPath",	0);
	create_insn	(x=0X140004891);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004897);
	op_hex		(x,	1);
	create_insn	(x=0X1400048A0);
	op_hex		(x,	1);
	set_cmt	(0X1400048A4,	"wchar_t *",	0);
	create_insn	(x=0X1400048A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400048AF);
	op_hex		(x,	1);
	create_insn	(0X1400048C0);
	create_insn	(x=0X1400048CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400048D0);
	op_hex		(x,	1);
	create_insn	(x=0X1400048D9);
	op_hex		(x,	1);
	create_insn	(x=0X1400048DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400048E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400048EB);
	op_hex		(x,	1);
	create_insn	(x=0X1400048EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400048F4);
	op_hex		(x,	1);
	create_insn	(x=0X1400048FD);
	op_hex		(x,	1);
	create_insn	(x=0X140004902);
	op_hex		(x,	1);
	create_insn	(0X140004907);
	set_name	(0X140004907,	"CleanFilesAndDirs");
	create_insn	(x=0X14000490F);
	op_hex		(x,	1);
	create_insn	(0X14000496C);
	create_insn	(x=0X140004978);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000497D);
	op_stkvar	(x,	1);
	set_cmt	(0X1400049CE,	"lpPathName",	0);
	create_insn	(0X1400049D6);
	create_insn	(0X1400049DF);
	create_insn	(x=0X1400049E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400049EA);
	op_stkvar	(x,	0);
	set_name	(0X1400049EA,	"MyBrowseForFolder");
	create_insn	(x=0X1400049EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400049FC);
	op_hex		(x,	1);
	create_insn	(x=0X140004A05);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A0F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A14);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A19);
	op_hex		(x,	1);
	create_insn	(x=0X140004A22);
	op_hex		(x,	1);
	create_insn	(x=0X140004A26);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004A2D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A34);
	op_hex		(x,	1);
	create_insn	(x=0X140004A3D);
	op_hex		(x,	1);
	create_insn	(x=0X140004A44);
	op_hex		(x,	1);
	create_insn	(x=0X140004A4D);
	op_hex		(x,	1);
	create_insn	(x=0X140004A54);
	op_hex		(x,	1);
	create_insn	(x=0X140004A5D);
	op_hex		(x,	1);
	create_insn	(x=0X140004A61);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A67);
	op_hex		(x,	1);
	create_insn	(x=0X140004A70);
	op_hex		(x,	1);
	create_insn	(0X140004A79);
	create_insn	(x=0X140004A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004A8E);
	op_hex		(x,	1);
	create_insn	(x=0X140004A97);
	op_hex		(x,	1);
	set_cmt	(0X140004A9B,	"wchar_t *",	0);
	create_insn	(x=0X140004A9D);
	op_hex		(x,	1);
	create_insn	(x=0X140004AA6);
	op_hex		(x,	1);
	create_insn	(x=0X140004AAA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004AB0);
	op_hex		(x,	1);
	create_insn	(x=0X140004AB9);
	op_hex		(x,	1);
	create_insn	(0X140004AC2);
	create_insn	(x=0X140004AC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004AD0);
	op_hex		(x,	1);
	create_insn	(x=0X140004AD9);
	op_hex		(x,	1);
	create_insn	(x=0X140004AE0);
	op_hex		(x,	1);
	create_insn	(x=0X140004AE9);
	op_hex		(x,	1);
	create_insn	(x=0X140004AF6);
	op_hex		(x,	1);
	create_insn	(x=0X140004AFF);
	op_hex		(x,	1);
	create_insn	(x=0X140004B03);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004B09);
	op_hex		(x,	1);
	create_insn	(x=0X140004B12);
	op_hex		(x,	1);
	create_insn	(0X140004B1B);
	create_insn	(x=0X140004B22);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004B29);
	op_hex		(x,	1);
	create_insn	(x=0X140004B32);
	op_hex		(x,	1);
	create_insn	(x=0X140004B39);
	op_hex		(x,	1);
	create_insn	(x=0X140004B42);
	op_hex		(x,	1);
	create_insn	(x=0X140004B4F);
	op_hex		(x,	1);
	create_insn	(x=0X140004B58);
	op_hex		(x,	1);
	create_insn	(x=0X140004B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004B62);
	op_hex		(x,	1);
	create_insn	(x=0X140004B6B);
	op_hex		(x,	1);
	create_insn	(0X140004B74);
	create_insn	(x=0X140004B7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004B82);
	op_hex		(x,	1);
	create_insn	(x=0X140004B8B);
	op_hex		(x,	1);
	create_insn	(x=0X140004B92);
	op_hex		(x,	1);
	create_insn	(x=0X140004B9B);
	op_hex		(x,	1);
	create_insn	(x=0X140004BA8);
	op_hex		(x,	1);
	create_insn	(x=0X140004BB1);
	op_hex		(x,	1);
	create_insn	(x=0X140004BB5);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004BBB);
	op_hex		(x,	1);
	create_insn	(x=0X140004BC4);
	op_hex		(x,	1);
	create_insn	(0X140004BCD);
	create_insn	(x=0X140004BD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004BDB);
	op_hex		(x,	1);
	create_insn	(x=0X140004BE4);
	op_hex		(x,	1);
	create_insn	(x=0X140004BEB);
	op_hex		(x,	1);
	create_insn	(x=0X140004BF4);
	op_hex		(x,	1);
	create_insn	(x=0X140004C01);
	op_hex		(x,	1);
	create_insn	(x=0X140004C0A);
	op_hex		(x,	1);
	create_insn	(x=0X140004C0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004C14);
	op_hex		(x,	1);
	create_insn	(x=0X140004C1D);
	op_hex		(x,	1);
	create_insn	(0X140004C26);
	create_insn	(x=0X140004C2D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004C34);
	op_hex		(x,	1);
	create_insn	(x=0X140004C3D);
	op_hex		(x,	1);
	create_insn	(x=0X140004C44);
	op_hex		(x,	1);
	create_insn	(x=0X140004C4D);
	op_hex		(x,	1);
	create_insn	(x=0X140004C5A);
	op_hex		(x,	1);
	create_insn	(x=0X140004C63);
	op_hex		(x,	1);
	create_insn	(x=0X140004C67);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004C6D);
	op_hex		(x,	1);
	create_insn	(x=0X140004C76);
	op_hex		(x,	1);
	create_insn	(0X140004C7F);
	create_insn	(x=0X140004C86);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004C8D);
	op_hex		(x,	1);
	create_insn	(x=0X140004C96);
	op_hex		(x,	1);
	create_insn	(x=0X140004C9D);
	op_hex		(x,	1);
	create_insn	(x=0X140004CA6);
	op_hex		(x,	1);
	create_insn	(x=0X140004CB3);
	op_hex		(x,	1);
	create_insn	(x=0X140004CBC);
	op_hex		(x,	1);
	create_insn	(x=0X140004CC0);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004CC6);
	op_hex		(x,	1);
	create_insn	(x=0X140004CCF);
	op_hex		(x,	1);
	create_insn	(0X140004CD8);
	create_insn	(x=0X140004CDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004CE6);
	op_hex		(x,	1);
	create_insn	(x=0X140004CEF);
	op_hex		(x,	1);
	create_insn	(x=0X140004CF6);
	op_hex		(x,	1);
	create_insn	(x=0X140004CFF);
	op_hex		(x,	1);
	create_insn	(x=0X140004D0C);
	op_hex		(x,	1);
	create_insn	(x=0X140004D15);
	op_hex		(x,	1);
	create_insn	(x=0X140004D19);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004D1F);
	op_hex		(x,	1);
	create_insn	(x=0X140004D28);
	op_hex		(x,	1);
	create_insn	(0X140004D31);
	create_insn	(x=0X140004D38);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004D3F);
	op_hex		(x,	1);
	create_insn	(x=0X140004D48);
	op_hex		(x,	1);
	create_insn	(x=0X140004D4F);
	op_hex		(x,	1);
	create_insn	(x=0X140004D58);
	op_hex		(x,	1);
	create_insn	(x=0X140004D65);
	op_hex		(x,	1);
	create_insn	(x=0X140004D6E);
	op_hex		(x,	1);
	create_insn	(x=0X140004D72);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004D78);
	op_hex		(x,	1);
	create_insn	(x=0X140004D81);
	op_hex		(x,	1);
	create_insn	(0X140004D8A);
	create_insn	(x=0X140004D91);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004D9C);
	op_hex		(x,	1);
	create_insn	(x=0X140004DA5);
	op_hex		(x,	1);
	create_insn	(x=0X140004DAC);
	op_hex		(x,	1);
	create_insn	(x=0X140004DB5);
	op_hex		(x,	1);
	create_insn	(x=0X140004DC6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004DCE);
	op_hex		(x,	1);
	create_insn	(x=0X140004DD7);
	op_hex		(x,	1);
	create_insn	(x=0X140004DDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004DE1);
	op_hex		(x,	1);
	create_insn	(x=0X140004DEA);
	op_hex		(x,	1);
	create_insn	(x=0X140004DEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004DF6);
	op_hex		(x,	1);
	create_insn	(x=0X140004DFF);
	op_hex		(x,	1);
	create_insn	(x=0X140004E08);
	op_hex		(x,	1);
	create_insn	(x=0X140004E12);
	op_hex		(x,	1);
	create_insn	(x=0X140004E1B);
	op_hex		(x,	1);
	create_insn	(x=0X140004E21);
	op_hex		(x,	1);
	create_insn	(x=0X140004E2B);
	op_hex		(x,	1);
	create_insn	(0X140004E38);
	create_insn	(0X140004E3A);
	create_insn	(x=0X140004E3B);
	op_hex		(x,	1);
	create_insn	(x=0X140004E44);
	op_hex		(x,	1);
	create_insn	(x=0X140004E4B);
	op_hex		(x,	1);
	create_insn	(x=0X140004E54);
	op_hex		(x,	1);
	create_insn	(x=0X140004E5B);
	op_hex		(x,	1);
	create_insn	(x=0X140004E64);
	op_hex		(x,	1);
	create_insn	(x=0X140004E68);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004E6E);
	op_hex		(x,	1);
	create_insn	(x=0X140004E77);
	op_hex		(x,	1);
	create_insn	(x=0X140004E7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004E82);
	op_hex		(x,	1);
	create_insn	(x=0X140004E8B);
	op_hex		(x,	1);
	set_cmt	(0X140004E8F,	"wchar_t *",	0);
	create_insn	(x=0X140004E91);
	op_hex		(x,	1);
	create_insn	(x=0X140004E9A);
	op_hex		(x,	1);
	create_insn	(0X140004EAB);
	create_insn	(x=0X140004EB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004EBB);
	op_hex		(x,	1);
	create_insn	(x=0X140004EC4);
	op_hex		(x,	1);
	create_insn	(x=0X140004EC8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004ECD);
	op_hex		(x,	1);
	create_insn	(x=0X140004ED6);
	op_hex		(x,	1);
	create_insn	(x=0X140004EDB);
	op_hex		(x,	1);
	create_insn	(0X140004EE2);
	set_name	(0X140004EE2,	"act_MyWriteFileText_path");
	create_insn	(x=0X140004EEB);
	op_hex		(x,	1);
	create_insn	(x=0X140004EEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004EFC);
	op_hex		(x,	1);
	create_insn	(x=0X140004F16);
	op_stkvar	(x,	0);
	create_insn	(0X140004F21);
	create_insn	(x=0X140004F28);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004F3E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004F4B);
	op_hex		(x,	1);
	create_insn	(x=0X140004F54);
	op_hex		(x,	1);
	create_insn	(x=0X140004F5A);
	op_hex		(x,	1);
	create_insn	(x=0X140004F5F);
	op_hex		(x,	1);
	create_insn	(x=0X140004F68);
	op_hex		(x,	1);
	create_insn	(x=0X140004F6E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004F7D);
	op_hex		(x,	1);
	create_insn	(x=0X140004F86);
	op_hex		(x,	1);
	create_insn	(x=0X140004F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004F95);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004F9B);
	op_hex		(x,	1);
	create_insn	(x=0X140004FA4);
	op_hex		(x,	1);
	set_cmt	(0X140004FA8,	"wchar_t *",	0);
	create_insn	(x=0X140004FAA);
	op_hex		(x,	1);
	create_insn	(x=0X140004FB3);
	op_hex		(x,	1);
	set_cmt	(0X140004FB7,	"wchar_t *",	0);
	create_insn	(x=0X140004FB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004FBC);
	op_hex		(x,	1);
	create_insn	(x=0X140004FC5);
	op_hex		(x,	1);
	create_insn	(x=0X140004FC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140004FD4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140004FE0);
	op_hex		(x,	1);
	create_insn	(x=0X140004FE9);
	op_hex		(x,	1);
	create_insn	(x=0X140004FEF);
	op_hex		(x,	1);
	create_insn	(x=0X140004FF4);
	op_hex		(x,	1);
	create_insn	(x=0X140004FFD);
	op_hex		(x,	1);
	create_insn	(x=0X140005004);
	op_hex		(x,	1);
	create_insn	(x=0X14000500D);
	op_hex		(x,	1);
	create_insn	(x=0X140005014);
	op_hex		(x,	1);
	create_insn	(x=0X14000501D);
	op_hex		(x,	1);
	create_insn	(x=0X140005032);
	op_hex		(x,	1);
	create_insn	(x=0X14000503B);
	op_hex		(x,	1);
	create_insn	(x=0X140005049);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000504F);
	op_hex		(x,	1);
	create_insn	(x=0X140005058);
	op_hex		(x,	1);
	create_insn	(x=0X14000505C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005068);
	op_hex		(x,	1);
	create_insn	(x=0X140005071);
	op_hex		(x,	1);
	create_insn	(x=0X140005077);
	op_hex		(x,	1);
	create_insn	(x=0X14000507C);
	op_hex		(x,	1);
	create_insn	(x=0X140005085);
	op_hex		(x,	1);
	create_insn	(x=0X14000508C);
	op_hex		(x,	1);
	create_insn	(x=0X140005095);
	op_hex		(x,	1);
	create_insn	(x=0X14000509C);
	op_hex		(x,	1);
	create_insn	(x=0X1400050A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400050BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400050C3);
	op_hex		(x,	1);
	create_insn	(x=0X1400050D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400050D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400050E0);
	op_hex		(x,	1);
	create_insn	(x=0X1400050E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400050F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400050F9);
	op_hex		(x,	1);
	create_insn	(x=0X1400050FF);
	op_hex		(x,	1);
	create_insn	(x=0X140005104);
	op_hex		(x,	1);
	create_insn	(x=0X14000510D);
	op_hex		(x,	1);
	create_insn	(x=0X140005114);
	op_hex		(x,	1);
	create_insn	(x=0X14000511D);
	op_hex		(x,	1);
	create_insn	(x=0X140005124);
	op_hex		(x,	1);
	create_insn	(x=0X14000512D);
	op_hex		(x,	1);
	create_insn	(x=0X140005138);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005140);
	op_hex		(x,	1);
	create_insn	(x=0X140005149);
	op_hex		(x,	1);
	create_insn	(x=0X140005157);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000515D);
	op_hex		(x,	1);
	create_insn	(x=0X140005166);
	op_hex		(x,	1);
	create_insn	(x=0X14000516A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005176);
	op_hex		(x,	1);
	create_insn	(x=0X14000517F);
	op_hex		(x,	1);
	create_insn	(x=0X140005185);
	op_hex		(x,	1);
	create_insn	(x=0X14000518A);
	op_hex		(x,	1);
	create_insn	(x=0X140005193);
	op_hex		(x,	1);
	create_insn	(x=0X14000519A);
	op_hex		(x,	1);
	create_insn	(x=0X1400051A3);
	op_hex		(x,	1);
	create_insn	(x=0X1400051AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400051B3);
	op_hex		(x,	1);
	create_insn	(x=0X1400051BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400051C9);
	op_hex		(x,	1);
	create_insn	(x=0X1400051D2);
	op_hex		(x,	1);
	create_insn	(x=0X1400051E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400051E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400051EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400051F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400051FF);
	op_hex		(x,	1);
	create_insn	(x=0X140005208);
	op_hex		(x,	1);
	create_insn	(x=0X14000520E);
	op_hex		(x,	1);
	create_insn	(x=0X140005213);
	op_hex		(x,	1);
	create_insn	(x=0X14000521C);
	op_hex		(x,	1);
	create_insn	(x=0X140005223);
	op_hex		(x,	1);
	create_insn	(x=0X14000522C);
	op_hex		(x,	1);
	create_insn	(x=0X140005233);
	op_hex		(x,	1);
	create_insn	(x=0X14000523C);
	op_hex		(x,	1);
	create_insn	(x=0X140005247);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005252);
	op_hex		(x,	1);
	create_insn	(x=0X14000525B);
	op_hex		(x,	1);
	create_insn	(x=0X140005269);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000526F);
	op_hex		(x,	1);
	create_insn	(x=0X140005278);
	op_hex		(x,	1);
	create_insn	(x=0X14000527C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005288);
	op_hex		(x,	1);
	create_insn	(x=0X140005291);
	op_hex		(x,	1);
	create_insn	(x=0X140005298);
	op_hex		(x,	1);
	create_insn	(x=0X1400052A1);
	op_hex		(x,	1);
	set_cmt	(0X1400052A6,	"a5",	0);
	set_cmt	(0X1400052A7,	"a5",	0);
	create_insn	(x=0X1400052AC);
	op_stkvar	(x,	0);
	set_cmt	(0X1400052B3,	"a1",	0);
	set_cmt	(0X1400052B4,	"a2",	0);
	create_insn	(x=0X1400052B5);
	op_hex		(x,	1);
	create_insn	(x=0X1400052BE);
	op_hex		(x,	1);
	create_insn	(x=0X1400052C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400052CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400052D3);
	op_hex		(x,	1);
	create_insn	(x=0X1400052DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400052E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400052EC);
	op_hex		(x,	1);
	set_cmt	(0X1400052F1,	"a5",	0);
	set_cmt	(0X1400052F2,	"a5",	0);
	create_insn	(x=0X1400052F7);
	op_stkvar	(x,	0);
	set_cmt	(0X1400052FB,	"a1",	0);
	set_cmt	(0X1400052FC,	"a2",	0);
	create_insn	(x=0X1400052FD);
	op_hex		(x,	1);
	create_insn	(x=0X140005306);
	op_hex		(x,	1);
	create_insn	(x=0X14000530A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140005318);
	op_hex		(x,	1);
	create_insn	(x=0X140005321);
	op_hex		(x,	1);
	create_insn	(x=0X140005328);
	op_hex		(x,	1);
	create_insn	(x=0X140005331);
	op_hex		(x,	1);
	set_cmt	(0X140005336,	"a5",	0);
	set_cmt	(0X140005337,	"a5",	0);
	create_insn	(x=0X14000533C);
	op_stkvar	(x,	0);
	set_cmt	(0X140005340,	"a1",	0);
	set_cmt	(0X140005341,	"a2",	0);
	create_insn	(x=0X140005342);
	op_hex		(x,	1);
	create_insn	(x=0X14000534B);
	op_hex		(x,	1);
	create_insn	(x=0X14000534F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000535B);
	op_hex		(x,	1);
	create_insn	(x=0X140005364);
	op_hex		(x,	1);
	create_insn	(x=0X14000536B);
	op_hex		(x,	1);
	create_insn	(x=0X140005374);
	op_hex		(x,	1);
	set_cmt	(0X140005379,	"a5",	0);
	set_cmt	(0X14000537A,	"a5",	0);
	create_insn	(x=0X14000537F);
	op_stkvar	(x,	0);
	set_cmt	(0X140005383,	"a1",	0);
	set_cmt	(0X140005384,	"a2",	0);
	create_insn	(x=0X140005385);
	op_hex		(x,	1);
	create_insn	(x=0X14000538E);
	op_hex		(x,	1);
	create_insn	(x=0X140005392);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400053A1);
	op_hex		(x,	1);
	create_insn	(x=0X1400053AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400053B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400053BA);
	op_hex		(x,	1);
	set_cmt	(0X1400053BF,	"a5",	0);
	set_cmt	(0X1400053C0,	"a5",	0);
	create_insn	(x=0X1400053C5);
	op_stkvar	(x,	0);
	set_cmt	(0X1400053C9,	"a1",	0);
	set_cmt	(0X1400053CA,	"a2",	0);
	create_insn	(x=0X1400053CB);
	op_hex		(x,	1);
	create_insn	(x=0X1400053D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400053D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400053E7);
	op_hex		(x,	1);
	create_insn	(x=0X1400053F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400053F6);
	op_hex		(x,	1);
	create_insn	(x=0X1400053FB);
	op_hex		(x,	1);
	create_insn	(x=0X140005404);
	op_hex		(x,	1);
	create_insn	(x=0X14000540B);
	op_hex		(x,	1);
	create_insn	(x=0X140005414);
	op_hex		(x,	1);
	create_insn	(x=0X14000541A);
	op_hex		(x,	1);
	create_insn	(x=0X14000541F);
	op_hex		(x,	1);
	create_insn	(x=0X140005428);
	op_hex		(x,	1);
	set_cmt	(0X14000542D,	"alen",	0);
	set_cmt	(0X140005434,	"lpszLongPath_1",	0);
	create_insn	(x=0X140005435);
	op_hex		(x,	1);
	create_insn	(x=0X14000543E);
	op_hex		(x,	1);
	create_insn	(x=0X140005452);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005463);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000546E);
	op_hex		(x,	1);
	create_insn	(x=0X140005477);
	op_hex		(x,	1);
	create_insn	(x=0X14000547B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005487);
	op_hex		(x,	1);
	create_insn	(x=0X140005490);
	op_hex		(x,	1);
	create_insn	(x=0X140005496);
	op_hex		(x,	1);
	create_insn	(x=0X14000549B);
	op_hex		(x,	1);
	create_insn	(x=0X1400054A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400054AB);
	op_hex		(x,	1);
	create_insn	(x=0X1400054B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400054BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400054BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400054C8);
	op_hex		(x,	1);
	set_cmt	(0X1400054CD,	"alen",	0);
	set_cmt	(0X1400054D4,	"lpszLongPath_1",	0);
	create_insn	(x=0X1400054D5);
	op_hex		(x,	1);
	create_insn	(x=0X1400054DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400054F2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005503);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000550E);
	op_hex		(x,	1);
	create_insn	(x=0X140005517);
	op_hex		(x,	1);
	create_insn	(x=0X14000551B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005527);
	op_hex		(x,	1);
	create_insn	(x=0X140005530);
	op_hex		(x,	1);
	create_insn	(x=0X140005536);
	op_hex		(x,	1);
	create_insn	(x=0X14000553A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005540);
	op_hex		(x,	1);
	create_insn	(x=0X140005549);
	op_hex		(x,	1);
	set_cmt	(0X14000554D,	"wchar_t *",	0);
	create_insn	(x=0X14000554F);
	op_hex		(x,	1);
	create_insn	(x=0X140005558);
	op_hex		(x,	1);
	set_cmt	(0X14000555C,	"wchar_t *",	0);
	create_insn	(x=0X14000555C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140005566);
	op_hex		(x,	1);
	create_insn	(x=0X14000556F);
	op_hex		(x,	1);
	set_cmt	(0X140005573,	"wchar_t *",	0);
	create_insn	(x=0X140005573);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000557B);
	op_hex		(x,	1);
	create_insn	(x=0X140005584);
	op_hex		(x,	1);
	set_cmt	(0X140005588,	"wchar_t *",	0);
	create_insn	(x=0X140005588);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005590);
	op_hex		(x,	1);
	create_insn	(x=0X140005599);
	op_hex		(x,	1);
	set_cmt	(0X14000559D,	"wchar_t *",	0);
	create_insn	(x=0X14000559D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400055A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400055AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400055C7);
	op_stkvar	(x,	0);
	set_cmt	(0X1400055CC,	"aFileName",	0);
	set_cmt	(0X1400055CD,	"aBuffer",	0);
	create_insn	(x=0X1400055CE);
	op_hex		(x,	1);
	create_insn	(x=0X1400055D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400055DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400055E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400055EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400055F4);
	op_hex		(x,	1);
	create_insn	(x=0X1400055FD);
	op_hex		(x,	1);
	create_insn	(x=0X140005601);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005606);
	op_hex		(x,	1);
	create_insn	(x=0X14000560F);
	op_hex		(x,	1);
	create_insn	(x=0X140005613);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005618);
	op_hex		(x,	1);
	create_insn	(x=0X140005621);
	op_hex		(x,	1);
	create_insn	(x=0X140005625);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000562A);
	op_hex		(x,	1);
	create_insn	(x=0X140005633);
	op_hex		(x,	1);
	create_insn	(x=0X140005637);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000563F);
	op_hex		(x,	1);
	create_insn	(x=0X140005648);
	op_hex		(x,	1);
	create_insn	(x=0X14000564C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005651);
	op_hex		(x,	1);
	create_insn	(x=0X14000565A);
	op_hex		(x,	1);
	create_insn	(x=0X14000565E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005666);
	op_hex		(x,	1);
	create_insn	(x=0X14000566F);
	op_hex		(x,	1);
	create_insn	(x=0X140005673);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005678);
	op_hex		(x,	1);
	create_insn	(x=0X140005681);
	op_hex		(x,	1);
	create_insn	(x=0X140005685);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000568A);
	op_hex		(x,	1);
	create_insn	(x=0X140005693);
	op_hex		(x,	1);
	create_insn	(x=0X140005697);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000569C);
	op_hex		(x,	1);
	create_insn	(x=0X1400056A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400056AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400056B4);
	op_stkvar	(x,	0);
	set_name	(0X1400056B4,	"put_to602_dupToRMDIR");
	create_insn	(x=0X1400056C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400056CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400056CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400056D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400056DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400056E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400056FF);
	op_stkvar	(x,	0);
	set_cmt	(0X140005721,	"a601",	0);
	create_insn	(x=0X140005727);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000572D);
	op_hex		(x,	1);
	create_insn	(x=0X140005736);
	op_hex		(x,	1);
	set_cmt	(0X14000573A,	"wchar_t *",	0);
	create_insn	(x=0X14000573C);
	op_hex		(x,	1);
	create_insn	(x=0X140005745);
	op_hex		(x,	1);
	create_insn	(x=0X140005779);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000577E);
	op_hex		(x,	1);
	create_insn	(x=0X140005787);
	op_hex		(x,	1);
	create_insn	(x=0X14000578C);
	op_hex		(x,	1);
	create_insn	(x=0X140005794);
	op_stkvar	(x,	0);
	set_name	(0X140005794,	"uncrypt_writefile");
	create_insn	(x=0X140005799);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400057A8);
	op_hex		(x,	1);
	create_insn	(x=0X1400057B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400057BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400057C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400057C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400057D1);
	op_hex		(x,	1);
	create_insn	(x=0X1400057DA);
	op_stkvar	(x,	0);
	set_cmt	(0X1400057E4,	"hModule",	0);
	set_cmt	(0X1400057E5,	"lpName",	0);
	set_cmt	(0X1400057E6,	"lpType",	0);
	create_insn	(x=0X1400057ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400057F2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400057FE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000580F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005814);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005836);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005848);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005859);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000586C);
	op_stkvar	(x,	0);
	set_cmt	(0X140005870,	"hHeap",	0);
	create_insn	(0X14000587B);
	create_insn	(x=0X14000587C);
	op_hex		(x,	1);
	create_insn	(x=0X140005885);
	op_hex		(x,	1);
	create_insn	(x=0X14000588B);
	op_hex		(x,	1);
	create_insn	(x=0X140005890);
	op_hex		(x,	1);
	create_insn	(x=0X140005899);
	op_hex		(x,	1);
	create_insn	(x=0X1400058AA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400058B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400058BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400058C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400058CC);
	op_stkvar	(x,	0);
	set_cmt	(0X1400058D0,	"hHeap",	0);
	create_insn	(x=0X1400058D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400058DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400058E5);
	op_hex		(x,	1);
	set_cmt	(0X1400058E9,	"wchar_t *",	0);
	create_insn	(x=0X1400058EB);
	op_hex		(x,	1);
	create_insn	(x=0X1400058F4);
	op_hex		(x,	1);
	create_insn	(0X140005905);
	create_insn	(x=0X140005910);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005915);
	op_hex		(x,	1);
	create_insn	(x=0X14000591E);
	op_hex		(x,	1);
	create_insn	(x=0X140005922);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005927);
	op_hex		(x,	1);
	create_insn	(x=0X140005930);
	op_hex		(x,	1);
	create_insn	(x=0X140005935);
	op_hex		(x,	1);
	create_insn	(0X14000593C);
	create_insn	(x=0X140005945);
	op_hex		(x,	1);
	create_insn	(x=0X140005949);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005956);
	op_hex		(x,	1);
	create_insn	(x=0X140005970);
	op_stkvar	(x,	0);
	create_insn	(0X14000597B);
	create_insn	(x=0X140005982);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005998);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400059A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400059AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400059B4);
	op_hex		(x,	1);
	create_insn	(x=0X1400059B9);
	op_hex		(x,	1);
	create_insn	(x=0X1400059C2);
	op_hex		(x,	1);
	create_insn	(x=0X1400059C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400059D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400059E0);
	op_hex		(x,	1);
	create_insn	(x=0X1400059E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400059EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400059F5);
	op_hex		(x,	1);
	create_insn	(x=0X1400059FE);
	op_hex		(x,	1);
	set_cmt	(0X140005A02,	"wchar_t *",	0);
	create_insn	(x=0X140005A04);
	op_hex		(x,	1);
	create_insn	(x=0X140005A0D);
	op_hex		(x,	1);
	set_cmt	(0X140005A11,	"wchar_t *",	0);
	create_insn	(x=0X140005A11);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005A16);
	op_hex		(x,	1);
	create_insn	(x=0X140005A1F);
	op_hex		(x,	1);
	create_insn	(x=0X140005A23);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005A2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005A4A);
	op_stkvar	(x,	0);
	create_insn	(0X140005A55);
	create_insn	(x=0X140005A5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005A72);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005A7F);
	op_hex		(x,	1);
	create_insn	(x=0X140005A88);
	op_hex		(x,	1);
	create_insn	(x=0X140005A8E);
	op_hex		(x,	1);
	create_insn	(x=0X140005A93);
	op_hex		(x,	1);
	create_insn	(x=0X140005A9C);
	op_hex		(x,	1);
	create_insn	(x=0X140005AA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005AB1);
	op_hex		(x,	1);
	create_insn	(x=0X140005ABA);
	op_hex		(x,	1);
	create_insn	(x=0X140005ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005AC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005ACF);
	op_hex		(x,	1);
	create_insn	(x=0X140005AD8);
	op_hex		(x,	1);
	set_cmt	(0X140005ADC,	"wchar_t *",	0);
	create_insn	(x=0X140005ADE);
	op_hex		(x,	1);
	create_insn	(x=0X140005AE7);
	op_hex		(x,	1);
	set_cmt	(0X140005AEB,	"wchar_t *",	0);
	create_insn	(x=0X140005AEB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005AF0);
	op_hex		(x,	1);
	create_insn	(x=0X140005AF9);
	op_hex		(x,	1);
	create_insn	(x=0X140005AFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005B08);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005B24);
	op_stkvar	(x,	0);
	create_insn	(0X140005B2F);
	create_insn	(x=0X140005B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005B4C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005B59);
	op_hex		(x,	1);
	create_insn	(x=0X140005B62);
	op_hex		(x,	1);
	create_insn	(x=0X140005B68);
	op_hex		(x,	1);
	create_insn	(x=0X140005B6D);
	op_hex		(x,	1);
	create_insn	(x=0X140005B76);
	op_hex		(x,	1);
	create_insn	(x=0X140005B7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005B8B);
	op_hex		(x,	1);
	create_insn	(x=0X140005B94);
	op_hex		(x,	1);
	create_insn	(x=0X140005B98);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005BA3);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005BA9);
	op_hex		(x,	1);
	create_insn	(x=0X140005BB2);
	op_hex		(x,	1);
	set_cmt	(0X140005BB6,	"wchar_t *",	0);
	create_insn	(x=0X140005BB8);
	op_hex		(x,	1);
	create_insn	(x=0X140005BC1);
	op_hex		(x,	1);
	set_cmt	(0X140005BC5,	"wchar_t *",	0);
	create_insn	(x=0X140005BC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005BCA);
	op_hex		(x,	1);
	create_insn	(x=0X140005BD3);
	op_hex		(x,	1);
	create_insn	(x=0X140005BD7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005BE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005BFE);
	op_stkvar	(x,	0);
	create_insn	(0X140005C09);
	create_insn	(x=0X140005C10);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005C26);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005C33);
	op_hex		(x,	1);
	create_insn	(x=0X140005C3C);
	op_hex		(x,	1);
	create_insn	(x=0X140005C42);
	op_hex		(x,	1);
	create_insn	(x=0X140005C47);
	op_hex		(x,	1);
	create_insn	(x=0X140005C50);
	op_hex		(x,	1);
	create_insn	(x=0X140005C56);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005C65);
	op_hex		(x,	1);
	create_insn	(x=0X140005C6E);
	op_hex		(x,	1);
	create_insn	(x=0X140005C72);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005C7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005C83);
	op_hex		(x,	1);
	create_insn	(x=0X140005C8C);
	op_hex		(x,	1);
	set_cmt	(0X140005C90,	"wchar_t *",	0);
	create_insn	(x=0X140005C92);
	op_hex		(x,	1);
	create_insn	(x=0X140005C9B);
	op_hex		(x,	1);
	set_cmt	(0X140005C9F,	"wchar_t *",	0);
	create_insn	(x=0X140005C9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005CA4);
	op_hex		(x,	1);
	create_insn	(x=0X140005CAD);
	op_hex		(x,	1);
	create_insn	(x=0X140005CB1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005CBC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005CD8);
	op_stkvar	(x,	0);
	create_insn	(0X140005CE3);
	create_insn	(x=0X140005CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D00);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005D0D);
	op_hex		(x,	1);
	create_insn	(x=0X140005D16);
	op_hex		(x,	1);
	create_insn	(x=0X140005D1C);
	op_hex		(x,	1);
	create_insn	(x=0X140005D21);
	op_hex		(x,	1);
	create_insn	(x=0X140005D2A);
	op_hex		(x,	1);
	create_insn	(x=0X140005D30);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D3F);
	op_hex		(x,	1);
	create_insn	(x=0X140005D48);
	op_hex		(x,	1);
	create_insn	(x=0X140005D4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D57);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D5D);
	op_hex		(x,	1);
	create_insn	(x=0X140005D66);
	op_hex		(x,	1);
	set_cmt	(0X140005D6A,	"wchar_t *",	0);
	create_insn	(x=0X140005D6C);
	op_hex		(x,	1);
	create_insn	(x=0X140005D75);
	op_hex		(x,	1);
	set_cmt	(0X140005D79,	"wchar_t *",	0);
	create_insn	(x=0X140005D79);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D7E);
	op_hex		(x,	1);
	create_insn	(x=0X140005D87);
	op_hex		(x,	1);
	create_insn	(x=0X140005D8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005D96);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005DB2);
	op_stkvar	(x,	0);
	create_insn	(0X140005DBD);
	create_insn	(x=0X140005DC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005DDA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005DE7);
	op_hex		(x,	1);
	create_insn	(x=0X140005DF0);
	op_hex		(x,	1);
	create_insn	(x=0X140005DF6);
	op_hex		(x,	1);
	create_insn	(x=0X140005DFB);
	op_hex		(x,	1);
	create_insn	(x=0X140005E04);
	op_hex		(x,	1);
	create_insn	(x=0X140005E0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005E19);
	op_hex		(x,	1);
	create_insn	(x=0X140005E22);
	op_hex		(x,	1);
	create_insn	(x=0X140005E26);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005E39);
	op_hex		(x,	1);
	create_insn	(x=0X140005E42);
	op_hex		(x,	1);
	set_cmt	(0X140005E46,	"wchar_t *",	0);
	create_insn	(x=0X140005E48);
	op_hex		(x,	1);
	create_insn	(x=0X140005E51);
	op_hex		(x,	1);
	set_cmt	(0X140005E55,	"wchar_t *",	0);
	create_insn	(x=0X140005E55);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005E5A);
	op_hex		(x,	1);
	create_insn	(x=0X140005E63);
	op_hex		(x,	1);
	create_insn	(x=0X140005E67);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140005E74);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005E90);
	op_stkvar	(x,	0);
	create_insn	(0X140005E9B);
	create_insn	(x=0X140005EA2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005EB8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005EC5);
	op_hex		(x,	1);
	create_insn	(x=0X140005ECE);
	op_hex		(x,	1);
	create_insn	(x=0X140005ED4);
	op_hex		(x,	1);
	create_insn	(x=0X140005ED9);
	op_hex		(x,	1);
	create_insn	(x=0X140005EE2);
	op_hex		(x,	1);
	create_insn	(x=0X140005EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005EF7);
	op_hex		(x,	1);
	create_insn	(x=0X140005F00);
	op_hex		(x,	1);
	create_insn	(x=0X140005F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005F17);
	op_hex		(x,	1);
	create_insn	(x=0X140005F20);
	op_hex		(x,	1);
	set_cmt	(0X140005F24,	"wchar_t *",	0);
	create_insn	(x=0X140005F26);
	op_hex		(x,	1);
	create_insn	(x=0X140005F2F);
	op_hex		(x,	1);
	set_cmt	(0X140005F33,	"wchar_t *",	0);
	create_insn	(x=0X140005F33);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005F38);
	op_hex		(x,	1);
	create_insn	(x=0X140005F41);
	op_hex		(x,	1);
	create_insn	(x=0X140005F45);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140005F52);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005F6E);
	op_stkvar	(x,	0);
	create_insn	(0X140005F79);
	create_insn	(x=0X140005F80);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005F96);
	op_stkvar	(x,	0);
	create_insn	(x=0X140005FA3);
	op_hex		(x,	1);
	create_insn	(x=0X140005FAC);
	op_hex		(x,	1);
	create_insn	(x=0X140005FB2);
	op_hex		(x,	1);
	create_insn	(x=0X140005FB7);
	op_hex		(x,	1);
	create_insn	(x=0X140005FC0);
	op_hex		(x,	1);
	create_insn	(x=0X140005FC6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005FD5);
	op_hex		(x,	1);
	create_insn	(x=0X140005FDE);
	op_hex		(x,	1);
	create_insn	(x=0X140005FE2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140005FF5);
	op_hex		(x,	1);
	create_insn	(x=0X140005FFE);
	op_hex		(x,	1);
	set_cmt	(0X140006002,	"wchar_t *",	0);
	create_insn	(x=0X140006004);
	op_hex		(x,	1);
	create_insn	(x=0X14000600D);
	op_hex		(x,	1);
	set_cmt	(0X140006011,	"wchar_t *",	0);
	create_insn	(x=0X140006011);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006016);
	op_hex		(x,	1);
	create_insn	(x=0X14000601F);
	op_hex		(x,	1);
	create_insn	(x=0X140006023);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140006030);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000604C);
	op_stkvar	(x,	0);
	create_insn	(0X140006057);
	create_insn	(x=0X14000605E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006074);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006081);
	op_hex		(x,	1);
	create_insn	(x=0X14000608A);
	op_hex		(x,	1);
	create_insn	(x=0X140006090);
	op_hex		(x,	1);
	create_insn	(x=0X140006095);
	op_hex		(x,	1);
	create_insn	(x=0X14000609E);
	op_hex		(x,	1);
	create_insn	(x=0X1400060A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400060B3);
	op_hex		(x,	1);
	create_insn	(x=0X1400060BC);
	op_hex		(x,	1);
	create_insn	(x=0X1400060C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400060D3);
	op_hex		(x,	1);
	create_insn	(x=0X1400060DC);
	op_hex		(x,	1);
	set_cmt	(0X1400060E0,	"wchar_t *",	0);
	create_insn	(x=0X1400060E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400060EB);
	op_hex		(x,	1);
	set_cmt	(0X1400060EF,	"wchar_t *",	0);
	create_insn	(x=0X1400060EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400060F4);
	op_hex		(x,	1);
	create_insn	(x=0X1400060FD);
	op_hex		(x,	1);
	create_insn	(x=0X140006101);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000610E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006121);
	op_hex		(x,	1);
	create_insn	(x=0X14000612A);
	op_hex		(x,	1);
	set_cmt	(0X14000612E,	"wchar_t *",	0);
	create_insn	(x=0X140006130);
	op_hex		(x,	1);
	create_insn	(x=0X140006139);
	op_hex		(x,	1);
	set_cmt	(0X14000613D,	"wchar_t *",	0);
	create_insn	(x=0X14000613D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006142);
	op_hex		(x,	1);
	create_insn	(x=0X14000614B);
	op_hex		(x,	1);
	create_insn	(x=0X14000614F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000615D);
	op_hex		(x,	1);
	create_insn	(x=0X140006166);
	op_hex		(x,	1);
	create_insn	(x=0X14000616D);
	op_hex		(x,	1);
	create_insn	(x=0X140006176);
	op_hex		(x,	1);
	create_insn	(x=0X14000617C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006180);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006186);
	op_hex		(x,	1);
	create_insn	(x=0X14000618F);
	op_hex		(x,	1);
	create_insn	(x=0X140006193);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400061A3);
	op_stkvar	(x,	0);
	set_cmt	(0X1400061AD,	"lpModuleName",	0);
	create_insn	(x=0X1400061BB);
	op_hex		(x,	1);
	create_insn	(x=0X1400061C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400061CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400061CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400061D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400061DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400061E8);
	op_hex		(x,	1);
	create_insn	(x=0X1400061EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400061F8);
	op_hex		(x,	1);
	create_insn	(x=0X14000620D);
	op_hex		(x,	1);
	create_insn	(x=0X140006216);
	op_hex		(x,	1);
	create_insn	(x=0X140006224);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000622A);
	op_hex		(x,	1);
	create_insn	(x=0X140006233);
	op_hex		(x,	1);
	create_insn	(x=0X140006237);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006246);
	op_hex		(x,	1);
	create_insn	(x=0X14000624F);
	op_hex		(x,	1);
	create_insn	(x=0X140006255);
	op_hex		(x,	1);
	create_insn	(x=0X14000625A);
	op_hex		(x,	1);
	create_insn	(x=0X140006263);
	op_hex		(x,	1);
	create_insn	(x=0X14000626A);
	op_hex		(x,	1);
	create_insn	(x=0X140006273);
	op_hex		(x,	1);
	create_insn	(x=0X14000627A);
	op_hex		(x,	1);
	create_insn	(x=0X140006283);
	op_hex		(x,	1);
	create_insn	(x=0X14000628E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006299);
	op_hex		(x,	1);
	create_insn	(x=0X1400062A2);
	op_hex		(x,	1);
	create_insn	(x=0X1400062B6);
	op_hex		(x,	1);
	create_insn	(x=0X1400062BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400062C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400062D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400062DB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400062E4);
	op_hex		(x,	1);
	create_insn	(x=0X1400062ED);
	op_hex		(x,	1);
	create_insn	(x=0X1400062F4);
	op_hex		(x,	1);
	create_insn	(x=0X1400062FD);
	op_hex		(x,	1);
	create_insn	(x=0X140006303);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000630B);
	op_hex		(x,	1);
	create_insn	(x=0X140006314);
	op_hex		(x,	1);
	create_insn	(x=0X14000631A);
	op_hex		(x,	1);
	create_insn	(x=0X140006323);
	op_hex		(x,	1);
	create_insn	(x=0X14000632D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000633B);
	op_hex		(x,	1);
	create_insn	(x=0X140006344);
	op_hex		(x,	1);
	create_insn	(x=0X14000634B);
	op_hex		(x,	1);
	create_insn	(x=0X140006354);
	op_hex		(x,	1);
	create_insn	(x=0X14000635A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000635E);
	op_hex		(x,	1);
	create_insn	(x=0X140006362);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006373);
	op_hex		(x,	1);
	create_insn	(x=0X14000637C);
	op_hex		(x,	1);
	create_insn	(x=0X140006386);
	op_hex		(x,	1);
	create_insn	(x=0X14000638F);
	op_hex		(x,	1);
	create_insn	(x=0X140006393);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400063A6,	"pszPath",	0);
	create_insn	(x=0X1400063AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400063BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400063C3);
	op_hex		(x,	1);
	create_insn	(x=0X1400063C9);
	op_hex		(x,	1);
	create_insn	(x=0X1400063CE);
	op_hex		(x,	1);
	create_insn	(x=0X1400063D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400063DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400063E7);
	op_hex		(x,	1);
	set_cmt	(0X1400063EC,	"alen",	0);
	set_cmt	(0X1400063F3,	"lpszLongPath_1",	0);
	create_insn	(x=0X1400063F4);
	op_hex		(x,	1);
	create_insn	(x=0X1400063FD);
	op_hex		(x,	1);
	create_insn	(x=0X140006406);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006414);
	op_stkvar	(x,	0);
	set_cmt	(0X140006419,	"lpName",	0);
	set_cmt	(0X14000641A,	"lpValue",	0);
	create_insn	(x=0X14000641B);
	op_hex		(x,	1);
	create_insn	(x=0X140006424);
	op_hex		(x,	1);
	create_insn	(x=0X14000642A);
	op_hex		(x,	1);
	create_insn	(x=0X140006433);
	op_hex		(x,	1);
	create_insn	(x=0X140006440);
	op_hex		(x,	1);
	create_insn	(x=0X140006449);
	op_hex		(x,	1);
	set_cmt	(0X14000644D,	"wchar_t *",	0);
	create_insn	(x=0X14000644F);
	op_hex		(x,	1);
	create_insn	(x=0X140006458);
	op_hex		(x,	1);
	set_cmt	(0X14000645C,	"wchar_t *",	0);
	create_insn	(x=0X140006463);
	op_hex		(x,	1);
	create_insn	(x=0X14000646C);
	op_hex		(x,	1);
	create_insn	(x=0X140006470);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000647E);
	op_hex		(x,	1);
	create_insn	(x=0X140006487);
	op_hex		(x,	1);
	create_insn	(x=0X14000648E);
	op_hex		(x,	1);
	create_insn	(x=0X140006497);
	op_hex		(x,	1);
	create_insn	(x=0X14000649D);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400064A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400064AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400064B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400064CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400064D6);
	op_hex		(x,	1);
	set_cmt	(0X1400064DA,	"wchar_t *",	0);
	create_insn	(x=0X1400064DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400064E5);
	op_hex		(x,	1);
	create_insn	(x=0X1400064E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400064F7);
	op_stkvar	(x,	0);
	set_cmt	(0X1400064FE,	"lpsz",	0);
	create_insn	(x=0X140006504);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000650D);
	op_hex		(x,	1);
	create_insn	(x=0X140006516);
	op_hex		(x,	1);
	set_cmt	(0X14000651A,	"wchar_t *",	0);
	create_insn	(x=0X14000651C);
	op_hex		(x,	1);
	create_insn	(x=0X140006525);
	op_hex		(x,	1);
	set_cmt	(0X140006529,	"wchar_t *",	0);
	create_insn	(x=0X140006529);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140006533);
	op_hex		(x,	1);
	create_insn	(x=0X14000653C);
	op_hex		(x,	1);
	set_cmt	(0X140006540,	"wchar_t *",	0);
	create_insn	(x=0X140006540);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006548);
	op_hex		(x,	1);
	create_insn	(x=0X140006551);
	op_hex		(x,	1);
	create_insn	(x=0X140006555);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006563);
	op_stkvar	(x,	0);
	set_cmt	(0X14000656A,	"lpsz",	0);
	create_insn	(x=0X14000657D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006586);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140006591,	"lpStartAddress",	0);
	set_cmt	(0X140006592,	"lpParameter",	0);
	create_insn	(x=0X1400065A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400065AC);
	op_hex		(x,	1);
	create_insn	(x=0X1400065B5);
	op_hex		(x,	1);
	create_insn	(x=0X1400065BB);
	op_hex		(x,	1);
	create_insn	(x=0X1400065BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400065C5);
	op_hex		(x,	1);
	create_insn	(x=0X1400065CE);
	op_hex		(x,	1);
	set_cmt	(0X1400065D2,	"wchar_t *",	0);
	create_insn	(x=0X1400065D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400065DD);
	op_hex		(x,	1);
	set_cmt	(0X1400065E1,	"wchar_t *",	0);
	create_insn	(x=0X1400065E1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400065EB);
	op_hex		(x,	1);
	create_insn	(x=0X1400065F4);
	op_hex		(x,	1);
	set_cmt	(0X1400065F8,	"wchar_t *",	0);
	create_insn	(x=0X1400065F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006600);
	op_hex		(x,	1);
	create_insn	(x=0X140006609);
	op_hex		(x,	1);
	create_insn	(x=0X140006613);
	op_hex		(x,	1);
	create_insn	(x=0X14000661C);
	op_hex		(x,	1);
	create_insn	(x=0X140006623);
	op_hex		(x,	1);
	create_insn	(x=0X14000662C);
	op_hex		(x,	1);
	create_insn	(x=0X140006633);
	op_hex		(x,	1);
	create_insn	(x=0X14000663C);
	op_hex		(x,	1);
	create_insn	(x=0X140006645);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000664E);
	op_hex		(x,	1);
	create_insn	(x=0X140006657);
	op_hex		(x,	1);
	set_cmt	(0X14000665B,	"wchar_t *",	0);
	create_insn	(x=0X14000665D);
	op_hex		(x,	1);
	create_insn	(x=0X140006666);
	op_hex		(x,	1);
	set_cmt	(0X14000666A,	"wchar_t *",	0);
	create_insn	(x=0X14000666A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000666F);
	op_hex		(x,	1);
	create_insn	(x=0X140006678);
	op_hex		(x,	1);
	set_cmt	(0X140006682,	"retstr",	0);
	create_insn	(x=0X140006686);
	op_stkvar	(x,	0);
	set_cmt	(0X140006690,	"retstr",	0);
	create_insn	(x=0X140006694);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400066A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400066AC);
	op_hex		(x,	1);
	create_insn	(x=0X1400066B5);
	op_hex		(x,	1);
	create_insn	(x=0X1400066BB);
	op_hex		(x,	1);
	create_insn	(x=0X1400066C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400066C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400066D1);
	op_stkvar	(x,	0);
	create_insn	(0X1400066DE);
	create_insn	(x=0X1400066E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400066EA);
	op_hex		(x,	1);
	create_insn	(x=0X1400066F3);
	op_hex		(x,	1);
	create_insn	(x=0X1400066F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400066FF);
	op_hex		(x,	1);
	create_insn	(x=0X140006708);
	op_hex		(x,	1);
	create_insn	(x=0X14000670C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006711);
	op_hex		(x,	1);
	create_insn	(x=0X14000671A);
	op_hex		(x,	1);
	create_insn	(x=0X14000671E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006723);
	op_hex		(x,	1);
	create_insn	(x=0X14000672C);
	op_hex		(x,	1);
	create_insn	(x=0X140006730);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006735);
	op_hex		(x,	1);
	create_insn	(x=0X14000673E);
	op_hex		(x,	1);
	create_insn	(x=0X140006742);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006747);
	op_hex		(x,	1);
	create_insn	(x=0X140006750);
	op_hex		(x,	1);
	create_insn	(x=0X140006754);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000675C);
	op_hex		(x,	1);
	create_insn	(x=0X140006765);
	op_hex		(x,	1);
	create_insn	(x=0X140006769);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000676E);
	op_hex		(x,	1);
	create_insn	(x=0X140006777);
	op_hex		(x,	1);
	create_insn	(x=0X14000677B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006780);
	op_hex		(x,	1);
	create_insn	(x=0X140006789);
	op_hex		(x,	1);
	create_insn	(x=0X14000678D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006792);
	op_hex		(x,	1);
	create_insn	(x=0X14000679B);
	op_hex		(x,	1);
	create_insn	(x=0X1400067A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400067AA);
	op_stkvar	(x,	0);
	set_name	(0X1400067AA,	"salt_MyBrowseForFolder");
	create_insn	(x=0X1400067B9);
	op_hex		(x,	1);
	create_insn	(x=0X1400067D3);
	op_stkvar	(x,	0);
	create_insn	(0X1400067DE);
	create_insn	(x=0X1400067E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400067FB);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006808);
	op_hex		(x,	1);
	create_insn	(x=0X140006811);
	op_hex		(x,	1);
	create_insn	(x=0X140006817);
	op_hex		(x,	1);
	create_insn	(x=0X14000681C);
	op_hex		(x,	1);
	create_insn	(x=0X140006825);
	op_hex		(x,	1);
	create_insn	(x=0X14000682B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000683A);
	op_hex		(x,	1);
	create_insn	(x=0X140006843);
	op_hex		(x,	1);
	create_insn	(x=0X140006847);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006852);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006858);
	op_hex		(x,	1);
	create_insn	(x=0X140006861);
	op_hex		(x,	1);
	set_cmt	(0X140006865,	"wchar_t *",	0);
	create_insn	(x=0X140006867);
	op_hex		(x,	1);
	create_insn	(x=0X140006870);
	op_hex		(x,	1);
	set_cmt	(0X140006874,	"wchar_t *",	0);
	create_insn	(x=0X140006874);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006879);
	op_hex		(x,	1);
	create_insn	(x=0X140006882);
	op_hex		(x,	1);
	create_insn	(x=0X140006886);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006891);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000689D);
	op_hex		(x,	1);
	create_insn	(x=0X1400068A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400068AD);
	op_hex		(x,	1);
	create_insn	(x=0X1400068B6);
	op_hex		(x,	1);
	create_insn	(x=0X1400068BC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400068C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400068C4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400068CC);
	op_hex		(x,	1);
	create_insn	(x=0X1400068D5);
	op_hex		(x,	1);
	create_insn	(x=0X1400068DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400068E8);
	op_hex		(x,	1);
	create_insn	(x=0X1400068EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400068F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006905);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000690A);
	op_hex		(x,	1);
	create_insn	(x=0X140006913);
	op_hex		(x,	1);
	create_insn	(x=0X140006917);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000691C);
	op_hex		(x,	1);
	create_insn	(x=0X140006925);
	op_hex		(x,	1);
	create_insn	(x=0X140006929);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000692E);
	op_hex		(x,	1);
	create_insn	(x=0X140006937);
	op_hex		(x,	1);
	create_insn	(x=0X14000693C);
	op_hex		(x,	1);
	create_insn	(x=0X140006943);
	op_stkvar	(x,	0);
	set_name	(0X140006943,	"HeapSize__0");
	create_insn	(x=0X140006948);
	op_hex		(x,	1);
	create_insn	(x=0X14000694C);
	op_stkvar	(x,	0);
	set_cmt	(0X140006950,	"hHeap",	0);
	create_insn	(0X140006958);
	create_insn	(x=0X14000695B);
	op_hex		(x,	1);
	create_insn	(x=0X140006960);
	op_stkvar	(x,	0);
	set_name	(0X140006960,	"MyWriteFile5");
	create_insn	(x=0X140006965);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000696A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006979);
	op_hex		(x,	1);
	create_insn	(x=0X140006982);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006987);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000698C);
	op_hex		(x,	1);
	create_insn	(x=0X140006995);
	op_hex		(x,	1);
	create_insn	(x=0X1400069A6);
	op_stkvar	(x,	0);
	create_insn	(0X1400069BE);
	create_insn	(x=0X1400069C8);
	op_stkvar	(x,	0);
	set_cmt	(0X1400069D1,	"aAT",	0);
	set_cmt	(0X1400069D2,	"afn",	0);
	create_insn	(x=0X1400069D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400069DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400069E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400069EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400069F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400069F7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A04);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A09);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A13);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006A18);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006A1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A2A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A33);
	op_stkvar	(x,	1);
	create_insn	(0X140006A3A);
	create_insn	(x=0X140006A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006A43);
	op_hex		(x,	1);
	create_insn	(x=0X140006A4C);
	op_hex		(x,	1);
	create_insn	(x=0X140006A51);
	op_hex		(x,	1);
	create_insn	(x=0X140006A58);
	op_hex		(x,	1);
	set_name	(0X140006A58,	"SET_TLS_2");
	create_insn	(x=0X140006A5C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A61);
	op_stkvar	(x,	0);
	create_insn	(x=0X140006A6B);
	op_stkvar	(x,	0);
	set_cmt	(0X140006A70,	"dwTlsIndex",	0);
	update_extra_cmt		(0X140006A70,	E_PREV + 0,	"");
	update_extra_cmt		(0X140006A70,	E_PREV + 1,	"");
	create_insn	(x=0X140006A7C);
	op_stkvar	(x,	1);
	set_cmt	(0X140006A85,	"dwErrCode",	0);
	create_insn	(x=0X140006A85);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006A8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140006A94);
	op_hex		(x,	1);
	make_array	(0X140006A99,	0X167);
	create_qword	(0X140006C00);
	make_array	(0X140006C00,	0X80);
	update_extra_cmt		(0X140007000,	E_PREV + 0,	"; Section 2. (virtual address 00007000)");
	update_extra_cmt		(0X140007000,	E_PREV + 1,	"; Virtual size                  : 000105B5 (  66997.)");
	update_extra_cmt		(0X140007000,	E_PREV + 2,	"; Section size in file          : 00010600 (  67072.)");
	update_extra_cmt		(0X140007000,	E_PREV + 3,	"; Offset to raw data for section: 00006000");
	update_extra_cmt		(0X140007000,	E_PREV + 4,	"; Flags 60000020: Text Executable Readable");
	update_extra_cmt		(0X140007000,	E_PREV + 5,	"; Alignment     : default");
	create_insn	(0X140007000);
	set_name	(0X140007000,	"memset");
	create_insn	(0X140007006);
	set_name	(0X140007006,	"GetModuleHandleW");
	create_insn	(0X14000700C);
	set_name	(0X14000700C,	"HeapCreate");
	create_insn	(0X140007012);
	set_name	(0X140007012,	"GetStdHandle");
	create_insn	(0X140007018);
	set_name	(0X140007018,	"HeapDestroy");
	create_insn	(0X14000701E);
	set_name	(0X14000701E,	"ExitProcess");
	create_insn	(0X140007024);
	set_name	(0X140007024,	"WriteFile");
	create_insn	(0X14000702A);
	set_name	(0X14000702A,	"GetTempFileNameW");
	create_insn	(0X140007030);
	set_name	(0X140007030,	"LoadLibraryExW");
	create_insn	(0X140007036);
	set_name	(0X140007036,	"EnumResourceTypesW");
	create_insn	(0X14000703C);
	set_name	(0X14000703C,	"FreeLibrary");
	create_insn	(0X140007042);
	set_name	(0X140007042,	"RemoveDirectoryW");
	create_insn	(0X140007048);
	set_name	(0X140007048,	"GetExitCodeProcess");
	create_insn	(0X14000704E);
	set_name	(0X14000704E,	"EnumResourceNamesW");
	create_insn	(0X140007054);
	set_name	(0X140007054,	"GetCommandLineW");
	create_insn	(0X14000705A);
	set_name	(0X14000705A,	"LoadResource");
	create_insn	(0X140007060);
	set_name	(0X140007060,	"SizeofResource");
	create_insn	(0X140007066);
	set_name	(0X140007066,	"FreeResource");
	create_insn	(0X14000706C);
	set_name	(0X14000706C,	"FindResourceW");
	create_insn	(0X140007072);
	set_name	(0X140007072,	"GetShortPathNameW");
	create_insn	(0X140007078);
	set_name	(0X140007078,	"GetSystemDirectoryW");
	create_insn	(0X14000707E);
	set_name	(0X14000707E,	"ShellExecuteExW");
	create_insn	(0X140007084);
	set_name	(0X140007084,	"PathAddBackslashW");
	create_insn	(0X14000708A);
	set_name	(0X14000708A,	"PathRenameExtensionW");
	create_insn	(0X140007090);
	set_name	(0X140007090,	"PathQuoteSpacesW");
	create_insn	(0X140007096);
	set_name	(0X140007096,	"PathRemoveArgsW");
	create_insn	(0X14000709C);
	set_name	(0X14000709C,	"PathRemoveBackslashW");
	create_insn	(0X1400070A2);
	set_name	(0X1400070A2,	"wcsncmp");
	create_insn	(0X1400070A8);
	set_name	(0X1400070A8,	"memmove");
	create_insn	(0X1400070AE);
	set_name	(0X1400070AE,	"wcsncpy");
	create_insn	(0X1400070B4);
	set_name	(0X1400070B4,	"wcsstr");
	create_insn	(0X1400070BA);
	set_name	(0X1400070BA,	"_wcsnicmp");
	create_insn	(0X1400070C0);
	set_name	(0X1400070C0,	"_wcsdup");
	create_insn	(0X1400070C6);
	set_name	(0X1400070C6,	"free");
	create_insn	(0X1400070CC);
	set_name	(0X1400070CC,	"_wcsicmp");
	create_insn	(0X1400070D2);
	set_name	(0X1400070D2,	"wcslen");
	create_insn	(0X1400070D8);
	set_name	(0X1400070D8,	"wcscpy");
	create_insn	(0X1400070DE);
	set_name	(0X1400070DE,	"wcscmp");
	create_insn	(0X1400070E4);
	set_name	(0X1400070E4,	"memcpy");
	create_insn	(0X1400070EA);
	set_name	(0X1400070EA,	"tolower");
	create_insn	(0X1400070F0);
	set_name	(0X1400070F0,	"wcscat");
	create_insn	(0X1400070F6);
	set_name	(0X1400070F6,	"malloc");
	create_insn	(0X1400070FC);
	set_name	(0X1400070FC,	"TlsGetValue");
	create_insn	(0X140007102);
	set_name	(0X140007102,	"GetLastError");
	create_insn	(0X140007108);
	set_name	(0X140007108,	"SetLastError");
	make_array	(0X14000710E,	0X2);
	create_insn	(0X140007110);
	set_name	(0X140007110,	"g_tree_stru0x20_closehandles");
	create_insn	(x=0X140007112);
	op_hex		(x,	1);
	set_cmt	(0X140007116,	"lpCriticalSection",	0);
	create_insn	(x=0X140007116);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140007125);
	set_cmt	(0X140007129,	"hObject",	0);
	create_insn	(x=0X140007132);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000714D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007154);
	op_hex		(x,	1);
	create_insn	(x=0X140007160);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X140007160,	"InitCriticalSection");
	make_array	(0X14000716E,	0X2);
	create_insn	(0X140007170);
	create_insn	(x=0X140007172);
	op_hex		(x,	1);
	set_cmt	(0X140007182,	"dwMilliseconds",	0);
	set_cmt	(0X140007184,	"hHandle",	0);
	create_insn	(x=0X140007195);
	op_hex		(x,	1);
	create_insn	(x=0X14000719C);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400071A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400071A7);
	op_hex		(x,	1);
	set_cmt	(0X1400071AE,	"lpCriticalSection",	0);
	create_insn	(x=0X1400071AE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1400071C6);
	set_cmt	(0X1400071D6,	"hHandle",	0);
	create_insn	(0X1400071D6);
	set_cmt	(0X1400071DA,	"dwMilliseconds",	0);
	set_cmt	(0X1400071EA,	"lpCriticalSection",	0);
	create_insn	(x=0X1400071EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400071F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400071FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007204);
	op_hex		(x,	1);
	make_array	(0X14000720A,	0X2);
	create_insn	(x=0X14000720C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007212);
	op_hex		(x,	1);
	set_cmt	(0X14000721E,	"dwExitCode",	0);
	set_cmt	(0X140007220,	"hThread",	0);
	set_cmt	(0X140007229,	"lpCriticalSection",	0);
	create_insn	(x=0X140007229);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14000723F);
	set_cmt	(0X14000724F,	"hObject",	0);
	create_insn	(0X14000724F);
	create_insn	(x=0X14000725D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007269);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007270);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007275);
	op_hex		(x,	1);
	make_array	(0X140007281,	0X3);
	create_insn	(0X140007284);
	set_name	(0X140007284,	"add_results_to_tree");
	create_insn	(x=0X140007294);
	op_hex		(x,	1);
	set_cmt	(0X14000729C,	"lpParameter",	0);
	set_cmt	(0X14000729F,	"lpStartAddress",	0);
	set_cmt	(0X1400072A8,	"dwStackSize",	0);
	set_cmt	(0X1400072AD,	"lpThreadAttributes",	0);
	set_cmt	(0X1400072AF,	"dwCreationFlags",	0);
	create_insn	(x=0X1400072AF);
	op_stkvar	(x,	0);
	set_cmt	(0X1400072C5,	"lpCriticalSection",	0);
	create_insn	(x=0X1400072C5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1400072DB);
	set_cmt	(0X1400072DF,	"dwMilliseconds",	0);
	set_cmt	(0X1400072E1,	"hHandle",	0);
	set_cmt	(0X1400072EE,	"hObject",	0);
	create_insn	(x=0X1400072FA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14000730B);
	create_insn	(x=0X14000731A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140007336,	"lpCriticalSection",	0);
	create_insn	(x=0X140007336);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000734A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000734F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007354);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000735C);
	op_hex		(x,	1);
	make_array	(0X140007362,	0X2);
	create_insn	(0X140007364);
	set_name	(0X140007364,	"MySleep");
	create_insn	(x=0X140007366);
	op_hex		(x,	1);
	set_cmt	(0X140007375,	"uPeriod",	0);
	create_insn	(x=0X14000738C);
	op_hex		(x,	1);
	make_array	(0X140007398,	0X8);
	create_insn	(0X1400073A0);
	set_name	(0X1400073A0,	"wtoc_alloc");
	create_insn	(x=0X1400073B0);
	op_hex		(x,	1);
	create_insn	(x=0X1400073B7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400073C4,	"cchWideChar",	0);
	create_insn	(x=0X1400073C4);
	op_hex		(x,	1);
	set_cmt	(0X1400073D3,	"lpWideCharStr",	0);
	set_cmt	(0X1400073D6,	"dwFlags",	0);
	set_cmt	(0X1400073D8,	"CodePage",	0);
	set_cmt	(0X1400073EA,	"dwBytes_1",	0);
	set_cmt	(0X1400073FA,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X1400073FA);
	op_stkvar	(x,	0);
	set_cmt	(0X1400073FF,	"lpDefaultChar",	0);
	create_insn	(x=0X1400073FF);
	op_stkvar	(x,	0);
	set_cmt	(0X140007404,	"cchWideChar",	0);
	create_insn	(x=0X140007404);
	op_hex		(x,	1);
	set_cmt	(0X140007408,	"lpWideCharStr",	0);
	set_cmt	(0X14000740B,	"dwFlags",	0);
	set_cmt	(0X14000740D,	"CodePage",	0);
	set_cmt	(0X140007412,	"cbMultiByte",	0);
	create_insn	(x=0X140007412);
	op_stkvar	(x,	0);
	set_cmt	(0X140007416,	"lpMultiByteStr",	0);
	create_insn	(x=0X140007416);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007424);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007429);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000742E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007433);
	op_hex		(x,	1);
	make_array	(0X140007439,	0X7);
	create_insn	(x=0X140007440);
	op_hex		(x,	1);
	set_name	(0X140007440,	"myCmpItem");
	create_insn	(x=0X140007454);
	op_stkvar	(x,	0);
	create_insn	(0X1400074BC);
	create_insn	(x=0X1400074C7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400074CE);
	op_hex		(x,	1);
	make_array	(0X1400074D3,	0XD);
	create_insn	(0X1400074E0);
	set_name	(0X1400074E0,	"STR_TREE_MOVE_COPY");
	create_insn	(x=0X1400074E8);
	op_hex		(x,	1);
	create_insn	(x=0X140007501);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007509);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000750E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007513);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007518);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000754B);
	op_hex		(x,	1);
	set_cmt	(0X140007560,	"MaxCount",	0);
	set_cmt	(0X140007563,	"String2",	0);
	set_cmt	(0X140007566,	"String1",	0);
	create_insn	(0X14000757D);
	create_insn	(0X140007592);
	create_insn	(x=0X140007598);
	op_hex		(x,	1);
	create_insn	(x=0X1400075A6);
	op_stkvar	(x,	1);
	set_cmt	(0X1400075BC,	"Src",	0);
	set_cmt	(0X1400075BF,	"void *",	0);
	set_cmt	(0X1400075C2,	"Size",	0);
	create_insn	(x=0X1400075D6);
	op_stkvar	(x,	1);
	set_cmt	(0X1400075E0,	"Count",	0);
	set_cmt	(0X1400075E3,	"Source",	0);
	set_cmt	(0X1400075E6,	"Destination",	0);
	create_insn	(x=0X1400075EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400075FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007600);
	op_hex		(x,	1);
	make_array	(0X14000760C,	0X4);
	create_insn	(0X140007610);
	create_insn	(0X140007636);
	create_insn	(x=0X14000763C);
	op_hex		(x,	1);
	create_insn	(0X140007644);
	create_insn	(x=0X140007647);
	op_hex		(x,	1);
	make_array	(0X140007657,	0X9);
	create_insn	(0X140007660);
	set_name	(0X140007660,	"mywcsstr");
	create_insn	(x=0X140007662);
	op_hex		(x,	1);
	create_insn	(x=0X14000768C);
	op_hex		(x,	1);
	create_insn	(x=0X140007692);
	op_hex		(x,	1);
	create_insn	(0X140007698);
	create_insn	(x=0X14000769A);
	op_hex		(x,	1);
	create_insn	(0X1400076A0);
	set_name	(0X1400076A0,	"INLINED_sub_1400076A0");
	create_insn	(x=0X1400076A2);
	op_hex		(x,	1);
	create_insn	(x=0X1400076E5);
	op_hex		(x,	1);
	create_insn	(x=0X1400076F0);
	op_hex		(x,	1);
	create_insn	(0X1400076FB);
	set_cmt	(0X140007705,	"SubStr",	0);
	set_cmt	(0X140007708,	"Str",	0);
	create_insn	(x=0X140007719);
	op_hex		(x,	1);
	create_insn	(x=0X14000771F);
	op_hex		(x,	1);
	create_insn	(0X140007725);
	create_insn	(x=0X140007727);
	op_hex		(x,	1);
	make_array	(0X14000772D,	0X3);
	create_insn	(x=0X140007730);
	op_hex		(x,	1);
	set_name	(0X140007730,	"INLINED_sub_140007730");
	create_insn	(x=0X140007763);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007786);
	op_hex		(x,	1);
	create_insn	(x=0X140007791);
	op_hex		(x,	1);
	create_insn	(0X14000779E);
	set_cmt	(0X1400077A8,	"SubStr",	0);
	set_cmt	(0X1400077AB,	"Str",	0);
	create_insn	(x=0X1400077AF);
	op_hex		(x,	1);
	create_insn	(0X1400077BC);
	create_insn	(x=0X1400077C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400077CE);
	op_hex		(x,	1);
	create_insn	(x=0X1400077D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400077D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400077DE);
	op_hex		(x,	1);
	create_insn	(0X1400077E3);
	create_insn	(x=0X1400077E5);
	op_hex		(x,	1);
	make_array	(0X1400077EA,	0X6);
	create_insn	(0X1400077F0);
	set_name	(0X1400077F0,	"act_itoa");
	create_insn	(0X140007815);
	create_insn	(0X140007826);
	create_insn	(x=0X14000783C);
	op_hex		(x,	1);
	create_insn	(x=0X140007879);
	op_hex		(x,	1);
	create_insn	(x=0X140007882);
	op_hex		(x,	1);
	create_insn	(0X14000789A);
	create_insn	(0X1400078A7);
	create_insn	(0X1400078E0);
	make_array	(0X140007914,	0XC);
	create_insn	(x=0X140007920);
	op_stkvar	(x,	0);
	set_name	(0X140007920,	"act_mywstrcpy");
	create_insn	(x=0X140007925);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000792A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000792F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000793A);
	op_hex		(x,	1);
	create_insn	(0X1400079A4);
	create_insn	(x=0X1400079A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400079AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400079B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400079B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400079BC);
	op_hex		(x,	1);
	make_array	(0X1400079C7,	0X9);
	create_insn	(x=0X1400079D0);
	op_hex		(x,	1);
	set_name	(0X1400079D0,	"act_wcsncmp");
	create_insn	(x=0X1400079D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400079E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400079EF);
	op_hex		(x,	1);
	make_array	(0X1400079F4,	0XC);
	create_insn	(x=0X140007A00);
	op_hex		(x,	1);
	set_name	(0X140007A00,	"INLINED_sub_140007A00");
	create_insn	(x=0X140007A04);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007A0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007A1C);
	op_hex		(x,	1);
	make_array	(0X140007A21,	0XF);
	create_insn	(x=0X140007A30);
	op_hex		(x,	1);
	set_name	(0X140007A30,	"INLINED_sub_140007A30");
	create_insn	(x=0X140007A34);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007A38);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007A3C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007A49);
	op_hex		(x,	1);
	make_array	(0X140007A4E,	0X2);
	create_insn	(x=0X140007A50);
	op_stkvar	(x,	0);
	set_name	(0X140007A50,	"act_wcsncmp2");
	create_insn	(x=0X140007A55);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007A64);
	op_hex		(x,	1);
	create_insn	(x=0X140007A6A);
	op_hex		(x,	1);
	create_insn	(0X140007A8B);
	create_insn	(x=0X140007A9C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007AA8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007AD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007AD7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007B02);
	op_stkvar	(x,	0);
	set_cmt	(0X140007B20,	"hHeap",	0);
	set_cmt	(0X140007B2B,	"dwFlags",	0);
	set_cmt	(0X140007B30,	"dwBytes",	0);
	create_insn	(x=0X140007B66);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007B6B);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X140007B73);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007B7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007B85);
	op_stkvar	(x,	1);
	set_cmt	(0X140007B93,	"Source",	0);
	set_cmt	(0X140007B96,	"Destination",	0);
	set_cmt	(0X140007B9C,	"Count",	0);
	create_insn	(x=0X140007BB2);
	op_stkvar	(x,	1);
	set_cmt	(0X140007BE5,	"Source",	0);
	create_insn	(x=0X140007BE8);
	op_stkvar	(x,	1);
	set_cmt	(0X140007BED,	"Destination",	0);
	create_insn	(x=0X140007BF0);
	op_hex		(x,	1);
	set_cmt	(0X140007BF6,	"Count",	0);
	create_insn	(x=0X140007C02);
	op_stkvar	(x,	0);
	set_cmt	(0X140007C09,	"hHeap",	0);
	set_cmt	(0X140007C10,	"lpMem",	0);
	set_cmt	(0X140007C13,	"dwFlags",	0);
	create_insn	(0X140007C1D);
	create_insn	(0X140007C35);
	create_insn	(x=0X140007C5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007C60);
	op_hex		(x,	1);
	create_insn	(x=0X140007C6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007C77);
	op_hex		(x,	1);
	make_array	(0X140007C86,	0XA);
	create_insn	(0X140007C90);
	set_name	(0X140007C90,	"add_to_STR_tree_CHAR");
	create_insn	(x=0X140007C92);
	op_hex		(x,	1);
	create_insn	(x=0X140007CAB);
	op_hex		(x,	1);
	make_array	(0X140007CB1,	0XF);
	create_insn	(0X140007CC0);
	set_name	(0X140007CC0,	"mywstrlen");
	create_insn	(x=0X140007CC5);
	op_hex		(x,	1);
	create_insn	(0X140007CDB);
	make_array	(0X140007CDE,	0X2);
	create_insn	(x=0X140007CE0);
	op_stkvar	(x,	0);
	set_name	(0X140007CE0,	"wStrReverse");
	create_insn	(x=0X140007CE5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007CEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007CEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007CF6);
	op_hex		(x,	1);
	create_insn	(x=0X140007CFD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140007D0A);
	op_hex		(x,	1);
	create_insn	(x=0X140007D8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007D93);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007D98);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007DA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007DAC);
	op_hex		(x,	1);
	make_array	(0X140007DB3,	0XD);
	create_insn	(x=0X140007DC0);
	op_stkvar	(x,	0);
	set_name	(0X140007DC0,	"MyCharUpperW");
	create_insn	(x=0X140007DC5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007DCA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007DD0);
	op_hex		(x,	1);
	set_cmt	(0X140007E21,	"lpsz",	0);
	create_insn	(0X140007E2C);
	create_insn	(x=0X140007E31);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007E36);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007E3B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007E40);
	op_hex		(x,	1);
	make_array	(0X140007E46,	0XA);
	create_insn	(x=0X140007E50);
	op_stkvar	(x,	0);
	set_name	(0X140007E50,	"wstrstuff");
	create_insn	(x=0X140007E55);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007E5A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007E64);
	op_hex		(x,	1);
	create_insn	(0X140007EC6);
	create_insn	(x=0X140007ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007ECF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007ED9);
	op_hex		(x,	1);
	make_array	(0X140007EE3,	0XD);
	set_cmt	(0X140007EF0,	"a3",	0);
	create_insn	(0X140007EF0);
	set_name	(0X140007EF0,	"mywstrcpy_space");
	set_cmt	(0X140007EF3,	"a2",	0);
	create_insn	(x=0X140007EF3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140007F00);
	set_name	(0X140007F00,	"mywstrcpy_space2");
	create_insn	(x=0X140007F06);
	op_hex		(x,	1);
	create_insn	(x=0X140007F0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007F17);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007F27);
	op_stkvar	(x,	0);
	create_insn	(x=0X140007F54);
	op_hex		(x,	1);
	create_insn	(x=0X140007F86);
	op_hex		(x,	1);
	create_insn	(0X140007F90);
	create_insn	(x=0X140007F99);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007FB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007FCF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007FE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140007FEB);
	op_hex		(x,	1);
	create_insn	(0X140007FF9);
	create_insn	(x=0X140007FFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008001);
	op_hex		(x,	1);
	make_array	(0X14000800B,	0X5);
	create_insn	(0X140008010);
	set_name	(0X140008010,	"tree_stuff02");
	create_insn	(x=0X140008018);
	op_hex		(x,	1);
	set_cmt	(0X14000802F,	"a4",	0);
	set_cmt	(0X140008036,	"asrc",	0);
	set_cmt	(0X140008039,	"alen",	0);
	create_insn	(0X140008041);
	make_array	(0X140008049,	0X7);
	create_insn	(x=0X140008050);
	op_stkvar	(x,	0);
	set_name	(0X140008050,	"tree_stuff01");
	create_insn	(x=0X140008055);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000805A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008064);
	op_hex		(x,	1);
	create_insn	(x=0X1400080EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400080F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400080F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008101);
	op_hex		(x,	1);
	make_array	(0X14000810B,	0X5);
	create_insn	(x=0X140008110);
	op_stkvar	(x,	0);
	set_name	(0X140008110,	"my_atoi");
	create_insn	(x=0X140008115);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000811B);
	op_hex		(x,	1);
	create_insn	(x=0X14000813C);
	op_hex		(x,	1);
	create_insn	(x=0X14000814E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008153);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008158);
	op_hex		(x,	1);
	make_array	(0X140008162,	0XE);
	create_insn	(x=0X140008170);
	op_stkvar	(x,	0);
	set_name	(0X140008170,	"alloc_to_STR_SPACE_tree");
	create_insn	(x=0X140008176);
	op_hex		(x,	1);
	create_insn	(x=0X1400081A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400081AD);
	op_hex		(x,	1);
	create_insn	(0X1400081B3);
	create_insn	(x=0X1400081B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400081BB);
	op_hex		(x,	1);
	make_array	(0X1400081C1,	0XF);
	create_insn	(x=0X1400081D0);
	op_hex		(x,	1);
	set_name	(0X1400081D0,	"my_wcsn_cmpcpy");
	create_insn	(x=0X1400081D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400081DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400081E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400081F1);
	op_hex		(x,	1);
	make_array	(0X1400081F6,	0XA);
	create_insn	(x=0X140008200);
	op_hex		(x,	1);
	set_name	(0X140008200,	"INLINED_sub_140008200");
	create_insn	(x=0X140008204);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008208);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000820C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008214);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008221);
	op_hex		(x,	1);
	make_array	(0X140008226,	0XA);
	create_insn	(x=0X140008230);
	op_hex		(x,	1);
	set_name	(0X140008230,	"INLINED_sub_140008230");
	create_insn	(x=0X140008234);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008238);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000823C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008240);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008248);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008251);
	op_hex		(x,	1);
	make_array	(0X140008256,	0XA);
	create_insn	(0X140008260);
	set_name	(0X140008260,	"my_wcsn_cmpcpy2");
	create_insn	(x=0X14000826D);
	op_hex		(x,	1);
	create_insn	(x=0X140008276);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140008296);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400082A1);
	op_hex		(x,	1);
	create_insn	(x=0X1400082A9);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400082B0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400082B7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400082C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400082C7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400082CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400082D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400082DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400082FB);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008300);
	op_hex		(x,	1);
	create_insn	(x=0X140008313);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000835B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008363);
	op_stkvar	(x,	1);
	set_cmt	(0X140008368,	"Source",	0);
	create_insn	(x=0X140008368);
	op_stkvar	(x,	1);
	set_cmt	(0X14000836D,	"Destination",	0);
	set_cmt	(0X140008370,	"Count",	0);
	create_insn	(0X140008384);
	create_insn	(0X140008397);
	create_insn	(x=0X14000839F);
	op_stkvar	(x,	0);
	set_cmt	(0X1400083AA,	"String",	0);
	create_insn	(x=0X1400083B5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400083C2);
	op_stkvar	(x,	0);
	set_cmt	(0X1400083CD,	"String",	0);
	create_insn	(x=0X1400083E0);
	op_stkvar	(x,	0);
	set_cmt	(0X1400083EB,	"String",	0);
	create_insn	(x=0X1400083F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400083F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008400);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000841B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008455);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000845A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000846A);
	op_stkvar	(x,	1);
	create_insn	(0X1400084A6);
	create_insn	(x=0X1400084B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400084DC);
	op_stkvar	(x,	1);
	set_cmt	(0X1400084ED,	"Count",	0);
	set_cmt	(0X1400084F0,	"Source",	0);
	set_cmt	(0X1400084F3,	"Destination",	0);
	create_insn	(x=0X14000851A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000853A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008559);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008563);
	op_stkvar	(x,	0);
	set_cmt	(0X14000856D,	"Block",	0);
	create_insn	(x=0X140008575);
	op_stkvar	(x,	0);
	set_cmt	(0X14000857F,	"Block",	0);
	create_insn	(x=0X140008587);
	op_stkvar	(x,	0);
	set_cmt	(0X140008591,	"Block",	0);
	create_insn	(x=0X140008591);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000859B);
	op_hex		(x,	1);
	create_insn	(0X1400085AC);
	create_insn	(x=0X1400085B8);
	op_stkvar	(x,	0);
	set_cmt	(0X1400085C0,	"Source",	0);
	create_insn	(x=0X1400085C0);
	op_stkvar	(x,	1);
	set_cmt	(0X1400085C8,	"Destination",	0);
	set_cmt	(0X1400085CB,	"Count",	0);
	make_array	(0X1400085E2,	0XE);
	create_insn	(x=0X1400085F0);
	op_stkvar	(x,	0);
	set_name	(0X1400085F0,	"INLINED2_sub_1400085F0");
	create_insn	(x=0X140008600);
	op_hex		(x,	1);
	set_cmt	(0X140008617,	"lpsz",	0);
	create_insn	(x=0X140008620);
	op_hex		(x,	1);
	create_insn	(x=0X140008627);
	op_stkvar	(x,	0);
	set_cmt	(0X14000864C,	"lpsz",	0);
	set_cmt	(0X140008670,	"lpsz",	0);
	set_cmt	(0X140008683,	"lpsz",	0);
	create_insn	(x=0X1400086A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400086AB);
	op_hex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	create_insn	(x=0X1400086BB);
	op_stkvar	(x,	1);
	create_insn	(0X1400086C5);
	make_array	(0X1400086C9,	0X7);
	create_insn	(x=0X1400086D0);
	op_stkvar	(x,	0);
	set_name	(0X1400086D0,	"INLINED_sub_1400086D0");
	create_insn	(x=0X1400086D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400086DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400086F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400086F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400086FA);
	op_hex		(x,	1);
	create_insn	(x=0X140008701);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008709);
	op_stkvar	(x,	0);
	set_cmt	(0X140008710,	"lpsz",	0);
	set_cmt	(0X140008722,	"lpsz",	0);
	create_insn	(x=0X14000873E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008743);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008748);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000874D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008752);
	op_hex		(x,	1);
	make_array	(0X140008759,	0X7);
	create_insn	(0X140008760);
	set_name	(0X140008760,	"INLINED_sub_140008760");
	create_insn	(x=0X140008769);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000876E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000877A);
	op_hex		(x,	1);
	create_insn	(0X1400087A9);
	create_insn	(x=0X1400087F1);
	op_stkvar	(x,	0);
	set_cmt	(0X1400087FD,	"switch 25 cases",	0);
	create_insn	(x=0X140008811);
	op_plain_offset	(x,	1,	0X140000000);
	op_plain_offset	(x,	129,	0X140000000);
	set_cmt	(0X14000881B,	"switch jump",	0);
	set_cmt	(0X14000881D,	"jumptable 000000014000881B case 24",	1);
	create_insn	(0X14000881D);
	create_insn	(x=0X14000882E);
	op_hex		(x,	1);
	create_insn	(0X14000883E);
	set_cmt	(0X140008848,	"jumptable 000000014000881B case 1",	1);
	create_insn	(0X140008848);
	create_insn	(x=0X140008859);
	op_hex		(x,	1);
	create_insn	(0X140008869);
	set_cmt	(0X140008873,	"jumptable 000000014000881B case 3",	1);
	create_insn	(0X140008873);
	create_insn	(x=0X140008884);
	op_hex		(x,	1);
	create_insn	(0X140008894);
	set_cmt	(0X14000889E,	"jumptable 000000014000881B case 5",	1);
	create_insn	(0X14000889E);
	create_insn	(x=0X1400088AF);
	op_hex		(x,	1);
	create_insn	(0X1400088BF);
	set_cmt	(0X1400088C9,	"jumptable 000000014000881B case 8",	1);
	create_insn	(0X1400088C9);
	create_insn	(x=0X1400088DA);
	op_hex		(x,	1);
	create_insn	(x=0X1400088E0);
	op_hex		(x,	1);
	create_insn	(0X1400088F0);
	create_insn	(x=0X1400088FA);
	op_hex		(x,	1);
	create_insn	(0X14000890A);
	set_cmt	(0X140008914,	"jumptable 000000014000881B case 9",	1);
	create_insn	(0X140008914);
	create_insn	(x=0X140008925);
	op_hex		(x,	1);
	create_insn	(0X140008935);
	set_cmt	(0X14000893F,	"jumptable 000000014000881B case 11",	1);
	create_insn	(0X14000893F);
	create_insn	(x=0X140008950);
	op_hex		(x,	1);
	create_insn	(0X14000895D);
	set_cmt	(0X140008964,	"jumptable 000000014000881B case 12",	1);
	create_insn	(0X140008964);
	create_insn	(x=0X140008975);
	op_hex		(x,	1);
	create_insn	(0X140008982);
	set_cmt	(0X140008989,	"jumptable 000000014000881B cases 13,21",	1);
	create_insn	(0X140008989);
	create_insn	(x=0X14000899A);
	op_hex		(x,	1);
	create_insn	(0X1400089A7);
	set_cmt	(0X1400089AE,	"jumptable 000000014000881B case 25",	1);
	create_insn	(0X1400089AE);
	create_insn	(x=0X1400089BF);
	op_hex		(x,	1);
	create_insn	(0X1400089CC);
	set_cmt	(0X1400089D1,	"jumptable 000000014000881B default case, cases 2,4,6,7,10,14-20,22,23",	1);
	set_name	(0X1400089D1,	"def_14000881B");
	create_insn	(0X1400089EE);
	create_insn	(x=0X1400089F1);
	op_stkvar	(x,	1);
	create_insn	(0X140008A05);
	create_insn	(x=0X140008A0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008A12);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008A17);
	op_hex		(x,	1);
	set_cmt	(0X140008A20,	"jump table for switch statement",	0);
	create_dword	(x=0X140008A20);
	make_array	(x,	0X19);
	op_plain_offset	(x,	0,	0X140000000);
	op_plain_offset	(x,	128,	0X140000000);
	set_name	(0X140008A20,	"jpt_14000881B");
	make_array	(0X140008A84,	0XC);
	create_insn	(0X140008A90);
	set_name	(0X140008A90,	"INLINED_sub_140008A90");
	create_insn	(x=0X140008A9E);
	op_hex		(x,	1);
	create_insn	(x=0X140008AB9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008ACA);
	op_stkvar	(x,	0);
	set_cmt	(0X140008AD5,	"switch 25 cases",	0);
	create_insn	(x=0X140008AE9);
	op_plain_offset	(x,	1,	0X140000000);
	op_plain_offset	(x,	129,	0X140000000);
	set_cmt	(0X140008AF4,	"switch jump",	0);
	set_cmt	(0X140008AF6,	"jumptable 0000000140008AF4 case 24",	1);
	create_insn	(x=0X140008AF6);
	op_hex		(x,	1);
	create_insn	(0X140008B13);
	set_cmt	(0X140008B1D,	"jumptable 0000000140008AF4 case 1",	1);
	create_insn	(x=0X140008B1D);
	op_hex		(x,	1);
	create_insn	(0X140008B3A);
	set_cmt	(0X140008B44,	"jumptable 0000000140008AF4 case 3",	1);
	create_insn	(x=0X140008B44);
	op_hex		(x,	1);
	create_insn	(0X140008B61);
	set_cmt	(0X140008B6B,	"jumptable 0000000140008AF4 case 5",	1);
	create_insn	(x=0X140008B6B);
	op_hex		(x,	1);
	create_insn	(0X140008B88);
	set_cmt	(0X140008B92,	"jumptable 0000000140008AF4 case 8",	1);
	create_insn	(0X140008B92);
	create_insn	(x=0X140008B9C);
	op_hex		(x,	1);
	create_insn	(x=0X140008BA1);
	op_hex		(x,	1);
	create_insn	(0X140008BB4);
	create_insn	(x=0X140008BBE);
	op_hex		(x,	1);
	create_insn	(0X140008BD1);
	set_cmt	(0X140008BDB,	"jumptable 0000000140008AF4 case 9",	1);
	create_insn	(x=0X140008BDB);
	op_hex		(x,	1);
	create_insn	(0X140008BF8);
	set_cmt	(0X140008C02,	"jumptable 0000000140008AF4 case 11",	1);
	create_insn	(x=0X140008C02);
	op_hex		(x,	1);
	create_insn	(0X140008C1C);
	set_cmt	(0X140008C23,	"jumptable 0000000140008AF4 case 12",	1);
	create_insn	(x=0X140008C23);
	op_hex		(x,	1);
	create_insn	(0X140008C3D);
	set_cmt	(0X140008C44,	"jumptable 0000000140008AF4 cases 13,21",	1);
	create_insn	(x=0X140008C44);
	op_hex		(x,	1);
	create_insn	(0X140008C5E);
	set_cmt	(0X140008C65,	"jumptable 0000000140008AF4 case 25",	1);
	create_insn	(x=0X140008C65);
	op_hex		(x,	1);
	create_insn	(0X140008C7F);
	set_cmt	(0X140008C84,	"jumptable 0000000140008AF4 default case, cases 2,4,6,7,10,14-20,22,23",	1);
	set_name	(0X140008C84,	"def_140008AF4");
	create_insn	(0X140008CA1);
	create_insn	(x=0X140008CA4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008CB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008CBF);
	op_hex		(x,	1);
	create_insn	(0X140008CC6);
	create_insn	(x=0X140008CCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008CD3);
	op_hex		(x,	1);
	make_array	(0X140008CDA,	0X2);
	set_cmt	(0X140008CDC,	"jump table for switch statement",	0);
	create_dword	(x=0X140008CDC);
	make_array	(x,	0X19);
	op_plain_offset	(x,	0,	0X140000000);
	op_plain_offset	(x,	128,	0X140000000);
	set_name	(0X140008CDC,	"jpt_140008AF4");
	create_insn	(0X140008D40);
	set_name	(0X140008D40,	"Qsort_");
	create_insn	(x=0X140008D53);
	op_hex		(x,	1);
	create_insn	(x=0X140008D6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008D73);
	op_stkvar	(x,	0);
	create_insn	(0X140008D90);
	create_insn	(x=0X140008DD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140008DE0);
	op_stkvar	(x,	0);
	set_cmt	(0X140008DF2,	"switch 25 cases",	0);
	create_insn	(x=0X140008E09);
	op_plain_offset	(x,	1,	0X140000000);
	op_plain_offset	(x,	129,	0X140000000);
	set_cmt	(0X140008E13,	"switch jump",	0);
	set_cmt	(0X140008E15,	"jumptable 0000000140008E13 case 24",	1);
	create_insn	(0X140008E15);
	create_insn	(x=0X140008E1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E23);
	op_hex		(x,	1);
	create_insn	(0X140008E33);
	set_cmt	(0X140008E3D,	"jumptable 0000000140008E13 case 1",	1);
	create_insn	(0X140008E3D);
	create_insn	(x=0X140008E43);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E47);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E4B);
	op_hex		(x,	1);
	create_insn	(0X140008E5B);
	set_cmt	(0X140008E65,	"jumptable 0000000140008E13 case 3",	1);
	create_insn	(0X140008E65);
	create_insn	(x=0X140008E6B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E73);
	op_hex		(x,	1);
	create_insn	(0X140008E83);
	set_cmt	(0X140008E8D,	"jumptable 0000000140008E13 case 5",	1);
	create_insn	(0X140008E8D);
	create_insn	(x=0X140008E93);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E97);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008E9B);
	op_hex		(x,	1);
	create_insn	(0X140008EAB);
	set_cmt	(0X140008EB5,	"jumptable 0000000140008E13 case 8",	1);
	create_insn	(0X140008EB5);
	create_insn	(x=0X140008EBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008EBF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008EC3);
	op_hex		(x,	1);
	create_insn	(x=0X140008EC9);
	op_hex		(x,	1);
	create_insn	(0X140008ED9);
	create_insn	(x=0X140008EE3);
	op_hex		(x,	1);
	create_insn	(0X140008EF3);
	set_cmt	(0X140008EFD,	"jumptable 0000000140008E13 case 9",	1);
	create_insn	(0X140008EFD);
	create_insn	(x=0X140008F03);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F07);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F0B);
	op_hex		(x,	1);
	create_insn	(0X140008F1B);
	set_cmt	(0X140008F25,	"jumptable 0000000140008E13 case 11",	1);
	create_insn	(0X140008F25);
	create_insn	(x=0X140008F2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F33);
	op_hex		(x,	1);
	create_insn	(0X140008F40);
	set_cmt	(0X140008F47,	"jumptable 0000000140008E13 case 12",	1);
	create_insn	(0X140008F47);
	create_insn	(x=0X140008F4D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F51);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F55);
	op_hex		(x,	1);
	create_insn	(0X140008F62);
	set_cmt	(0X140008F69,	"jumptable 0000000140008E13 cases 13,21",	1);
	create_insn	(0X140008F69);
	create_insn	(x=0X140008F6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F73);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F77);
	op_hex		(x,	1);
	create_insn	(0X140008F84);
	set_cmt	(0X140008F8B,	"jumptable 0000000140008E13 case 25",	1);
	create_insn	(0X140008F8B);
	create_insn	(x=0X140008F91);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F95);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008F99);
	op_hex		(x,	1);
	create_insn	(0X140008FA6);
	set_cmt	(0X140008FAB,	"jumptable 0000000140008E13 default case, cases 2,4,6,7,10,14-20,22,23",	1);
	create_insn	(x=0X140008FAB);
	op_stkvar	(x,	1);
	set_name	(0X140008FAB,	"def_140008E13");
	create_insn	(x=0X140008FB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008FBA);
	op_stkvar	(x,	1);
	create_insn	(0X140008FC8);
	create_insn	(x=0X140008FCC);
	op_stkvar	(x,	1);
	create_insn	(0X140008FDB);
	create_insn	(x=0X140008FDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008FE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008FEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140008FF3);
	op_hex		(x,	1);
	set_cmt	(0X140009000,	"jump table for switch statement",	0);
	create_dword	(x=0X140009000);
	make_array	(x,	0X19);
	op_plain_offset	(x,	0,	0X140000000);
	op_plain_offset	(x,	128,	0X140000000);
	set_name	(0X140009000,	"jpt_140008E13");
	make_array	(0X140009064,	0XC);
	create_insn	(x=0X140009070);
	op_hex		(x,	1);
	set_name	(0X140009070,	"Qsort");
	create_insn	(x=0X140009074);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000907D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000908B);
	op_hex		(x,	1);
	create_insn	(x=0X140009090);
	op_stkvar	(x,	0);
	set_name	(0X140009090,	"qsort_1_a_");
	create_insn	(x=0X140009095);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400090A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400090DE);
	op_hex		(x,	1);
	create_insn	(0X1400090E6);
	create_insn	(x=0X1400090F0);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009100);
	op_hex		(x,	1);
	create_insn	(x=0X14000910C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009123);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009133);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000913D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009146);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000914A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009159);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000915D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009164);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009168);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009187);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009192);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009196);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000919D);
	op_stkvar	(x,	0);
	create_insn	(0X1400091A3);
	create_insn	(x=0X1400091A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091BC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400091D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400091EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400091FE);
	op_hex		(x,	1);
	create_insn	(0X140009206);
	create_insn	(x=0X140009213);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000921B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009222);
	op_stkvar	(x,	0);
	make_array	(0X14000922D,	0X3);
	create_insn	(x=0X140009230);
	op_stkvar	(x,	0);
	set_name	(0X140009230,	"qsort_1_a");
	create_insn	(x=0X140009235);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009240);
	op_hex		(x,	1);
	create_insn	(x=0X14000927E);
	op_hex		(x,	1);
	create_insn	(0X140009286);
	create_insn	(x=0X140009290);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400092A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400092AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400092C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400092D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400092DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400092E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400092EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400092F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400092FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009304);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009308);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009327);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009332);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009336);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000933D);
	op_stkvar	(x,	0);
	create_insn	(0X140009343);
	create_insn	(x=0X140009346);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009351);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009355);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000935C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009373);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000937B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009382);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000938B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000938F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009397);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000939E);
	op_hex		(x,	1);
	create_insn	(0X1400093A6);
	create_insn	(x=0X1400093B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400093BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400093C2);
	op_stkvar	(x,	0);
	make_array	(0X1400093CD,	0X3);
	create_insn	(x=0X1400093D0);
	op_stkvar	(x,	0);
	set_name	(0X1400093D0,	"qsort_0xb_a");
	create_insn	(x=0X1400093D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400093E0);
	op_hex		(x,	1);
	create_insn	(x=0X14000941F);
	op_hex		(x,	1);
	create_insn	(0X140009427);
	create_insn	(x=0X140009431);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009441);
	op_hex		(x,	1);
	create_insn	(x=0X14000944D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009463);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009473);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000947D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009486);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000948A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009499);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000949D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400094C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094DE);
	op_stkvar	(x,	0);
	create_insn	(0X1400094E4);
	create_insn	(x=0X1400094E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400094FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009513);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000951B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009522);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000952B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000952F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009537);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000953E);
	op_hex		(x,	1);
	create_insn	(0X140009546);
	create_insn	(x=0X140009553);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000955B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009562);
	op_stkvar	(x,	0);
	make_array	(0X14000956D,	0X3);
	create_insn	(x=0X140009570);
	op_stkvar	(x,	0);
	set_name	(0X140009570,	"qsort_d_a");
	create_insn	(x=0X140009575);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009580);
	op_hex		(x,	1);
	create_insn	(x=0X1400095C1);
	op_hex		(x,	1);
	create_insn	(0X1400095C9);
	create_insn	(x=0X1400095D3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400095E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400095EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009603);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009613);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000961D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009626);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000962A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009639);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000963D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009644);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009648);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009669);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009674);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009678);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000967F);
	op_stkvar	(x,	0);
	create_insn	(0X140009685);
	create_insn	(x=0X140009688);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009693);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009697);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000969E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400096B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096C2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400096CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096DE);
	op_hex		(x,	1);
	create_insn	(0X1400096E6);
	create_insn	(x=0X1400096F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400096FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009702);
	op_stkvar	(x,	0);
	make_array	(0X14000970D,	0X3);
	create_insn	(x=0X140009710);
	op_stkvar	(x,	0);
	set_name	(0X140009710,	"qsort_f_a");
	create_insn	(x=0X140009715);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009720);
	op_hex		(x,	1);
	create_insn	(x=0X140009760);
	op_hex		(x,	1);
	create_insn	(0X140009768);
	create_insn	(x=0X140009772);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009782);
	op_hex		(x,	1);
	create_insn	(x=0X14000978E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400097A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400097B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400097C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400097E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009808);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009813);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009817);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000981E);
	op_stkvar	(x,	0);
	create_insn	(0X140009824);
	create_insn	(x=0X140009827);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009832);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009836);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000983D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009853);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000985B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009862);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000986B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000986F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009877);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000987E);
	op_hex		(x,	1);
	create_insn	(0X140009886);
	create_insn	(x=0X140009893);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000989B);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400098A2);
	op_stkvar	(x,	0);
	make_array	(0X1400098AD,	0X3);
	create_insn	(x=0X1400098B0);
	op_stkvar	(x,	0);
	set_name	(0X1400098B0,	"qsort_4_a");
	create_insn	(x=0X1400098B5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400098C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400098FD);
	op_hex		(x,	1);
	create_insn	(0X140009905);
	create_insn	(x=0X14000990F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000991F);
	op_hex		(x,	1);
	create_insn	(x=0X14000992B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009937);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009947);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009951);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000995A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000995E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000996D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009971);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009978);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000997C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000999A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099A5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099B0);
	op_stkvar	(x,	0);
	create_insn	(0X1400099B6);
	create_insn	(x=0X1400099B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099CF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400099E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099F2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400099FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400099FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009A07);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009A0E);
	op_hex		(x,	1);
	create_insn	(0X140009A16);
	create_insn	(x=0X140009A23);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009A2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009A32);
	op_stkvar	(x,	0);
	make_array	(0X140009A3D,	0X3);
	create_insn	(x=0X140009A40);
	op_stkvar	(x,	0);
	set_name	(0X140009A40,	"qsort_8_a");
	create_insn	(x=0X140009A45);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009A50);
	op_hex		(x,	1);
	create_insn	(x=0X140009A8D);
	op_hex		(x,	1);
	create_insn	(0X140009A95);
	create_insn	(x=0X140009A9F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009AAF);
	op_hex		(x,	1);
	create_insn	(x=0X140009ABB);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009AC7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009AD7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009AE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009AEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009AEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009AFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B01);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B08);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B0C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009B2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B36);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B3A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B41);
	op_stkvar	(x,	0);
	create_insn	(0X140009B47);
	create_insn	(x=0X140009B4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B55);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B59);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B60);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009B73);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B82);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009B8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B97);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009B9E);
	op_hex		(x,	1);
	create_insn	(0X140009BA6);
	create_insn	(x=0X140009BB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009BBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009BC2);
	op_stkvar	(x,	0);
	make_array	(0X140009BCD,	0X3);
	create_insn	(x=0X140009BD0);
	op_stkvar	(x,	0);
	set_name	(0X140009BD0,	"qsort_s_a");
	create_insn	(x=0X140009BD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009BDA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009BE6);
	op_hex		(x,	1);
	create_insn	(x=0X140009BFC);
	op_stkvar	(x,	1);
	set_cmt	(0X140009C03,	"String1",	0);
	set_cmt	(0X140009C07,	"String2",	0);
	create_insn	(x=0X140009C34);
	op_hex		(x,	1);
	create_insn	(0X140009C3D);
	create_insn	(x=0X140009C43);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009C52);
	op_hex		(x,	1);
	create_insn	(x=0X140009C5E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009C73);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009C83);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009C8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009C96);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009C9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CA9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CB8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009CCA);
	op_stkvar	(x,	1);
	set_cmt	(0X140009CCE,	"String2",	0);
	set_cmt	(0X140009CD2,	"String1",	0);
	create_insn	(x=0X140009CDF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CF5);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009CFC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009D02);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D14);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D18);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D1F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009D28);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D34);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D3C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D43);
	op_stkvar	(x,	0);
	create_insn	(0X140009D4E);
	create_insn	(x=0X140009D63);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D6B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D72);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009D7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D86);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009D8D);
	op_hex		(x,	1);
	make_array	(0X140009D96,	0XA);
	create_insn	(x=0X140009DA0);
	op_stkvar	(x,	0);
	set_name	(0X140009DA0,	"qsort_si_a");
	create_insn	(x=0X140009DA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009DAA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009DB6);
	op_hex		(x,	1);
	create_insn	(x=0X140009DCC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E04);
	op_hex		(x,	1);
	create_insn	(0X140009E0D);
	create_insn	(x=0X140009E13);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E22);
	op_hex		(x,	1);
	create_insn	(x=0X140009E2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009E43);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009E53);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009E66);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E79);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E84);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009E88);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009E9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EB9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EC1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009ECC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009ED2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EDC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009EEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009EF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F04);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F13);
	op_stkvar	(x,	0);
	create_insn	(0X140009F1E);
	create_insn	(x=0X140009F33);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F3B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F42);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009F4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X140009F5D);
	op_hex		(x,	1);
	make_array	(0X140009F66,	0XA);
	create_insn	(x=0X140009F70);
	op_stkvar	(x,	0);
	set_name	(0X140009F70,	"qsort_2_a_");
	create_insn	(x=0X140009F75);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009F80);
	op_hex		(x,	1);
	create_insn	(x=0X140009FBF);
	op_hex		(x,	1);
	create_insn	(0X140009FC7);
	create_insn	(x=0X140009FD1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140009FE1);
	op_hex		(x,	1);
	create_insn	(x=0X140009FED);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A003);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A013);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A01D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A026);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A02A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A039);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A03D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A044);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A048);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A068);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A073);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A077);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A07E);
	op_stkvar	(x,	0);
	create_insn	(0X14000A084);
	create_insn	(x=0X14000A087);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A092);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A096);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A09D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A0B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0C2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A0CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0DE);
	op_hex		(x,	1);
	create_insn	(0X14000A0E6);
	create_insn	(x=0X14000A0F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A0FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A102);
	op_stkvar	(x,	0);
	make_array	(0X14000A10D,	0X3);
	create_insn	(x=0X14000A110);
	op_stkvar	(x,	0);
	set_name	(0X14000A110,	"qsort_2_a");
	create_insn	(x=0X14000A115);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A120);
	op_hex		(x,	1);
	create_insn	(x=0X14000A15F);
	op_hex		(x,	1);
	create_insn	(0X14000A167);
	create_insn	(x=0X14000A171);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A181);
	op_hex		(x,	1);
	create_insn	(x=0X14000A18D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A1A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A1B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A1C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A1E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A208);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A213);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A217);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A21E);
	op_stkvar	(x,	0);
	create_insn	(0X14000A224);
	create_insn	(x=0X14000A227);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A232);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A236);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A23D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A253);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A25B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A262);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A26B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A26F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A277);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A27E);
	op_hex		(x,	1);
	create_insn	(0X14000A286);
	create_insn	(x=0X14000A293);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A29B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A2A2);
	op_stkvar	(x,	0);
	make_array	(0X14000A2AD,	0X3);
	create_insn	(x=0X14000A2B0);
	op_stkvar	(x,	0);
	set_name	(0X14000A2B0,	"qsort_1_d_");
	create_insn	(x=0X14000A2B5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A2C0);
	op_hex		(x,	1);
	create_insn	(x=0X14000A2FE);
	op_hex		(x,	1);
	create_insn	(0X14000A306);
	create_insn	(x=0X14000A310);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A320);
	op_hex		(x,	1);
	create_insn	(x=0X14000A32C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A343);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A353);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A35D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A366);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A36A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A379);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A37D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A384);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A388);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A3A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3BD);
	op_stkvar	(x,	0);
	create_insn	(0X14000A3C3);
	create_insn	(x=0X14000A3C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A3F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A3FB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A402);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A40B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A40F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A417);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A41E);
	op_hex		(x,	1);
	create_insn	(0X14000A426);
	create_insn	(x=0X14000A433);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A43B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A442);
	op_stkvar	(x,	0);
	make_array	(0X14000A44D,	0X3);
	create_insn	(x=0X14000A450);
	op_stkvar	(x,	0);
	set_name	(0X14000A450,	"qsort_1_d");
	create_insn	(x=0X14000A455);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A460);
	op_hex		(x,	1);
	create_insn	(x=0X14000A49E);
	op_hex		(x,	1);
	create_insn	(0X14000A4A6);
	create_insn	(x=0X14000A4B0);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A4C0);
	op_hex		(x,	1);
	create_insn	(x=0X14000A4CC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A4E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A4F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A4FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A506);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A50A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A519);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A51D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A524);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A528);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A547);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A552);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A556);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A55D);
	op_stkvar	(x,	0);
	create_insn	(0X14000A563);
	create_insn	(x=0X14000A566);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A571);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A575);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A57C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A593);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A59B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A5AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5BE);
	op_hex		(x,	1);
	create_insn	(0X14000A5C6);
	create_insn	(x=0X14000A5D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A5E2);
	op_stkvar	(x,	0);
	make_array	(0X14000A5ED,	0X3);
	create_insn	(x=0X14000A5F0);
	op_stkvar	(x,	0);
	set_name	(0X14000A5F0,	"qsort_0xb_d");
	create_insn	(x=0X14000A5F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A600);
	op_hex		(x,	1);
	create_insn	(x=0X14000A63F);
	op_hex		(x,	1);
	create_insn	(0X14000A647);
	create_insn	(x=0X14000A651);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A661);
	op_hex		(x,	1);
	create_insn	(x=0X14000A66D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A683);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A693);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A69D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A6A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A6E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A6FE);
	op_stkvar	(x,	0);
	create_insn	(0X14000A704);
	create_insn	(x=0X14000A707);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A712);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A716);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A71D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A733);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A73B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A742);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A74B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A74F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A757);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A75E);
	op_hex		(x,	1);
	create_insn	(0X14000A766);
	create_insn	(x=0X14000A773);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A77B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A782);
	op_stkvar	(x,	0);
	make_array	(0X14000A78D,	0X3);
	create_insn	(x=0X14000A790);
	op_stkvar	(x,	0);
	set_name	(0X14000A790,	"qsort_d_d");
	create_insn	(x=0X14000A795);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A7A0);
	op_hex		(x,	1);
	create_insn	(x=0X14000A7E1);
	op_hex		(x,	1);
	create_insn	(0X14000A7E9);
	create_insn	(x=0X14000A7F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A803);
	op_hex		(x,	1);
	create_insn	(x=0X14000A80F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A823);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A833);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A83D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A846);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A84A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A859);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A85D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A864);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A868);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A889);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A894);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A898);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A89F);
	op_stkvar	(x,	0);
	create_insn	(0X14000A8A5);
	create_insn	(x=0X14000A8A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A8D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A8EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A8FE);
	op_hex		(x,	1);
	create_insn	(0X14000A906);
	create_insn	(x=0X14000A913);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A91B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A922);
	op_stkvar	(x,	0);
	make_array	(0X14000A92D,	0X3);
	create_insn	(x=0X14000A930);
	op_stkvar	(x,	0);
	set_name	(0X14000A930,	"qsort_f_d");
	create_insn	(x=0X14000A935);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A940);
	op_hex		(x,	1);
	create_insn	(x=0X14000A980);
	op_hex		(x,	1);
	create_insn	(0X14000A988);
	create_insn	(x=0X14000A992);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A9A2);
	op_hex		(x,	1);
	create_insn	(x=0X14000A9AE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A9C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A9D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A9DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000A9E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A9EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A9F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000A9FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA04);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA08);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AA28);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA33);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA37);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA3E);
	op_stkvar	(x,	0);
	create_insn	(0X14000AA44);
	create_insn	(x=0X14000AA47);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA52);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA56);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AA73);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA82);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AA8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA8F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA97);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AA9E);
	op_hex		(x,	1);
	create_insn	(0X14000AAA6);
	create_insn	(x=0X14000AAB3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AABB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AAC2);
	op_stkvar	(x,	0);
	make_array	(0X14000AACD,	0X3);
	create_insn	(x=0X14000AAD0);
	op_stkvar	(x,	0);
	set_name	(0X14000AAD0,	"qsort_4_d");
	create_insn	(x=0X14000AAD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AAE0);
	op_hex		(x,	1);
	create_insn	(x=0X14000AB1D);
	op_hex		(x,	1);
	create_insn	(0X14000AB25);
	create_insn	(x=0X14000AB2F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AB3F);
	op_hex		(x,	1);
	create_insn	(x=0X14000AB4B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AB57);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AB67);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB71);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AB7A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB7E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB8D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB91);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB98);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AB9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ABBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABD0);
	op_stkvar	(x,	0);
	create_insn	(0X14000ABD6);
	create_insn	(x=0X14000ABD9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABE8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ABEF);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AC03);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC0B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC12);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AC1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC1F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC27);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC2E);
	op_hex		(x,	1);
	create_insn	(0X14000AC36);
	create_insn	(x=0X14000AC43);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AC52);
	op_stkvar	(x,	0);
	make_array	(0X14000AC5D,	0X3);
	create_insn	(x=0X14000AC60);
	op_stkvar	(x,	0);
	set_name	(0X14000AC60,	"qsort_8_d");
	create_insn	(x=0X14000AC65);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AC70);
	op_hex		(x,	1);
	create_insn	(x=0X14000ACAD);
	op_hex		(x,	1);
	create_insn	(0X14000ACB5);
	create_insn	(x=0X14000ACBF);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ACCF);
	op_hex		(x,	1);
	create_insn	(x=0X14000ACDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ACE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ACF7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD01);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AD0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD0E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD1D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD21);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD28);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AD4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD56);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD61);
	op_stkvar	(x,	0);
	create_insn	(0X14000AD67);
	create_insn	(x=0X14000AD6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD75);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD79);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD80);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AD93);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AD9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADA2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ADAB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADBE);
	op_hex		(x,	1);
	create_insn	(0X14000ADC6);
	create_insn	(x=0X14000ADD3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000ADE2);
	op_stkvar	(x,	0);
	make_array	(0X14000ADED,	0X3);
	create_insn	(x=0X14000ADF0);
	op_stkvar	(x,	0);
	set_name	(0X14000ADF0,	"qsort_s_d");
	create_insn	(x=0X14000ADF5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ADFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AE06);
	op_hex		(x,	1);
	create_insn	(x=0X14000AE1C);
	op_stkvar	(x,	1);
	set_cmt	(0X14000AE23,	"String1",	0);
	set_cmt	(0X14000AE27,	"String2",	0);
	create_insn	(x=0X14000AE54);
	op_hex		(x,	1);
	create_insn	(0X14000AE5D);
	create_insn	(x=0X14000AE63);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AE72);
	op_hex		(x,	1);
	create_insn	(x=0X14000AE7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AE93);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AEA3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AEAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AEB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AEBA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AEC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AECD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AED8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AEEA);
	op_stkvar	(x,	1);
	set_cmt	(0X14000AEEE,	"String2",	0);
	set_cmt	(0X14000AEF2,	"String1",	0);
	create_insn	(x=0X14000AEFF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF09);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF11);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF15);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AF22);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF34);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF38);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF3F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AF48);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF54);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF63);
	op_stkvar	(x,	0);
	create_insn	(0X14000AF6E);
	create_insn	(x=0X14000AF83);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF92);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AF9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AF9F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AFA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000AFAD);
	op_hex		(x,	1);
	make_array	(0X14000AFB6,	0XA);
	create_insn	(x=0X14000AFC0);
	op_stkvar	(x,	0);
	set_name	(0X14000AFC0,	"qsort_si_d");
	create_insn	(x=0X14000AFC5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AFCA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000AFD6);
	op_hex		(x,	1);
	create_insn	(x=0X14000AFEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B024);
	op_hex		(x,	1);
	create_insn	(0X14000B02D);
	create_insn	(x=0X14000B033);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B042);
	op_hex		(x,	1);
	create_insn	(x=0X14000B04E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B063);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B073);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B07D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B086);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B08A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B099);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B09D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B0BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B0F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B0FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B104);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B108);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B10F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B118);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B124);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B12C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B133);
	op_stkvar	(x,	0);
	create_insn	(0X14000B13E);
	create_insn	(x=0X14000B153);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B15B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B162);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B16B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B16F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B176);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B17D);
	op_hex		(x,	1);
	make_array	(0X14000B186,	0XA);
	create_insn	(x=0X14000B190);
	op_stkvar	(x,	0);
	set_name	(0X14000B190,	"qsort_2_d_");
	create_insn	(x=0X14000B195);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B1A0);
	op_hex		(x,	1);
	create_insn	(x=0X14000B1DF);
	op_hex		(x,	1);
	create_insn	(0X14000B1E7);
	create_insn	(x=0X14000B1F1);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B201);
	op_hex		(x,	1);
	create_insn	(x=0X14000B20D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B223);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B233);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B23D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B246);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B24A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B259);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B25D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B264);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B268);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B288);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B293);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B297);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B29E);
	op_stkvar	(x,	0);
	create_insn	(0X14000B2A4);
	create_insn	(x=0X14000B2A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B2D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B2EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B2FE);
	op_hex		(x,	1);
	create_insn	(0X14000B306);
	create_insn	(x=0X14000B313);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B31B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B322);
	op_stkvar	(x,	0);
	make_array	(0X14000B32D,	0X3);
	create_insn	(x=0X14000B330);
	op_stkvar	(x,	0);
	set_name	(0X14000B330,	"qsort_2_d");
	create_insn	(x=0X14000B335);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B340);
	op_hex		(x,	1);
	create_insn	(x=0X14000B37F);
	op_hex		(x,	1);
	create_insn	(0X14000B387);
	create_insn	(x=0X14000B391);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B3A1);
	op_hex		(x,	1);
	create_insn	(x=0X14000B3AD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B3C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B3D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B3DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B3E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B3EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B3F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B3FD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B404);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B408);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B428);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B433);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B437);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B43E);
	op_stkvar	(x,	0);
	create_insn	(0X14000B444);
	create_insn	(x=0X14000B447);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B452);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B456);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B45D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B473);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B47B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B482);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B48B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B48F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B497);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B49E);
	op_hex		(x,	1);
	create_insn	(0X14000B4A6);
	create_insn	(x=0X14000B4B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B4BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B4C2);
	op_stkvar	(x,	0);
	make_array	(0X14000B4CD,	0X3);
	create_insn	(0X14000B4D0);
	set_name	(0X14000B4D0,	"mywcsicmp2");
	create_insn	(0X14000B4F5);
	create_insn	(x=0X14000B4F7);
	op_hex		(x,	1);
	create_insn	(0X14000B4FB);
	create_insn	(0X14000B501);
	create_insn	(x=0X14000B50C);
	op_hex		(x,	1);
	create_insn	(0X14000B510);
	set_name	(0X14000B510,	"mywcsicmp");
	create_insn	(0X14000B524);
	create_insn	(x=0X14000B52F);
	op_hex		(x,	1);
	create_insn	(0X14000B533);
	make_array	(0X14000B536,	0X2);
	create_insn	(x=0X14000B538);
	op_hex		(x,	1);
	set_name	(0X14000B538,	"MyInitCommonControls");
	set_cmt	(0X14000B53C,	"Val",	0);
	set_cmt	(0X14000B53E,	"void *",	0);
	create_insn	(x=0X14000B53E);
	op_stkvar	(x,	1);
	set_cmt	(0X14000B543,	"Size",	0);
	set_cmt	(0X14000B54C,	"picce",	0);
	create_insn	(x=0X14000B54C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B551);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B559);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B567,	"pvReserved",	0);
	create_insn	(x=0X14000B56F);
	op_hex		(x,	1);
	create_insn	(x=0X14000B574);
	op_stkvar	(x,	0);
	set_name	(0X14000B574,	"MyMessageBox");
	create_insn	(x=0X14000B579);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B57E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B584);
	op_hex		(x,	1);
	set_cmt	(0X14000B5A3,	"uType",	0);
	set_cmt	(0X14000B5A6,	"lpCaption",	0);
	set_cmt	(0X14000B5A9,	"lpText",	0);
	set_cmt	(0X14000B5AC,	"hWnd",	0);
	create_insn	(x=0X14000B5BF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B5C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B5CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B5D1);
	op_hex		(x,	1);
	create_insn	(x=0X14000B5D8);
	op_stkvar	(x,	0);
	set_name	(0X14000B5D8,	"wcscpy_heap_alloc");
	create_insn	(x=0X14000B5DE);
	op_hex		(x,	1);
	set_cmt	(0X14000B5EF,	"hHeap",	0);
	set_cmt	(0X14000B5F6,	"dwFlags",	0);
	set_cmt	(0X14000B5F8,	"dwBytes",	0);
	set_cmt	(0X14000B60E,	"Source",	0);
	set_cmt	(0X14000B611,	"Destination",	0);
	create_insn	(0X14000B61E);
	create_insn	(x=0X14000B620);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B625);
	op_hex		(x,	1);
	create_insn	(x=0X14000B62C);
	op_hex		(x,	1);
	set_name	(0X14000B62C,	"INLINED_sub_14000B62C");
	set_cmt	(0X14000B635,	"lpMem",	0);
	set_cmt	(0X14000B638,	"hHeap",	0);
	set_cmt	(0X14000B63F,	"dwFlags",	0);
	create_insn	(x=0X14000B647);
	op_hex		(x,	1);
	create_insn	(x=0X14000B64C);
	op_stkvar	(x,	0);
	set_name	(0X14000B64C,	"wndproc");
	create_insn	(x=0X14000B651);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B657);
	op_hex		(x,	1);
	create_insn	(0X14000B67F);
	set_cmt	(0X14000B695,	"nIndex",	0);
	create_insn	(0X14000B695);
	set_cmt	(0X14000B69A,	"hWnd",	0);
	set_cmt	(0X14000B6A3,	"hWnd",	0);
	set_cmt	(0X14000B6B3,	"hHeap",	0);
	set_cmt	(0X14000B6BD,	"dwFlags",	0);
	set_cmt	(0X14000B6C2,	"dwBytes",	0);
	set_cmt	(0X14000B6CB,	"hWnd",	0);
	set_cmt	(0X14000B6D2,	"nMaxCount",	0);
	set_cmt	(0X14000B6D5,	"lpString",	0);
	set_cmt	(0X14000B6EA,	"hWnd",	0);
	set_cmt	(0X14000B6F1,	"bEnable",	0);
	set_cmt	(0X14000B703,	"hWnd",	0);
	set_cmt	(0X14000B70E,	"hInstance",	0);
	create_insn	(0X14000B70E);
	set_cmt	(0X14000B715,	"lpClassName",	0);
	create_insn	(x=0X14000B72E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B733);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B738);
	op_hex		(x,	1);
	make_array	(0X14000B73E,	0X2);
	create_insn	(x=0X14000B740);
	op_hex		(x,	1);
	set_name	(0X14000B740,	"INLINED_sub_14000B740");
	create_insn	(x=0X14000B744);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B751);
	op_hex		(x,	1);
	make_array	(0X14000B756,	0X2);
	create_insn	(0X14000B758);
	set_name	(0X14000B758,	"create_InputRequester");
	create_insn	(x=0X14000B774);
	op_hex		(x,	1);
	create_insn	(x=0X14000B784);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B7B2,	"i",	0);
	set_cmt	(0X14000B7C3,	"hInstance",	0);
	create_insn	(x=0X14000B7CA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000B7D6,	"lpIconName",	0);
	create_insn	(x=0X14000B7D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B7DF);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B7E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B7EA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B7EE);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B7F8,	"lpCursorName",	0);
	set_cmt	(0X14000B7FD,	"hInstance",	0);
	create_insn	(x=0X14000B7FF);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B809,	"WNDCLASSEXW *",	0);
	create_insn	(x=0X14000B809);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000B815);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B81A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B825);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B829);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B84D,	"hWnd",	0);
	set_cmt	(0X14000B863,	"hWnd",	0);
	set_cmt	(0X14000B86A,	"bEnable",	0);
	create_insn	(0X14000B87A);
	set_cmt	(0X14000B886,	"nIndex",	0);
	set_cmt	(0X14000B891,	"nIndex",	0);
	create_insn	(x=0X14000B896);
	op_hex		(x,	1);
	set_cmt	(0X14000B8A8,	"lpParam",	0);
	create_insn	(x=0X14000B8A8);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8AD,	"hInstance",	0);
	create_insn	(x=0X14000B8AD);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8B3,	"hMenu",	0);
	create_insn	(x=0X14000B8B3);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8BA,	"lpClassName",	0);
	set_cmt	(0X14000B8C1,	"hWndParent",	0);
	create_insn	(x=0X14000B8C1);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8C6,	"nHeight",	0);
	create_insn	(x=0X14000B8C6);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B8CE);
	op_hex		(x,	1);
	set_cmt	(0X14000B8D5,	"nWidth",	0);
	create_insn	(x=0X14000B8D5);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8DD,	"dwStyle",	0);
	set_cmt	(0X14000B8E3,	"lpWindowName",	0);
	set_cmt	(0X14000B8E6,	"dwExStyle",	0);
	set_cmt	(0X14000B8E8,	"Y",	0);
	create_insn	(x=0X14000B8E8);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B8EC,	"X",	0);
	create_insn	(x=0X14000B8EC);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B902,	"dwNewLong",	0);
	create_insn	(x=0X14000B902);
	op_stkvar	(x,	1);
	set_cmt	(0X14000B906,	"nIndex",	0);
	set_cmt	(0X14000B90B,	"hWnd",	0);
	set_cmt	(0X14000B91B,	"lpParam",	0);
	create_insn	(x=0X14000B91B);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B920,	"hInstance",	0);
	create_insn	(x=0X14000B920);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B925,	"hMenu",	0);
	create_insn	(x=0X14000B925);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B92A,	"hWndParent",	0);
	create_insn	(x=0X14000B92A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B92F,	"nHeight",	0);
	create_insn	(x=0X14000B92F);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B93C,	"nWidth",	0);
	create_insn	(x=0X14000B93C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B944);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000B94B,	"dwStyle",	0);
	set_cmt	(0X14000B951,	"lpWindowName",	0);
	set_cmt	(0X14000B954,	"dwExStyle",	0);
	set_cmt	(0X14000B956,	"Y",	0);
	create_insn	(x=0X14000B956);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B95A,	"X",	0);
	create_insn	(x=0X14000B95A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B964,	"wParam",	0);
	set_cmt	(0X14000B96B,	"lParam",	0);
	set_cmt	(0X14000B96F,	"Msg",	0);
	set_cmt	(0X14000B972,	"hWnd",	0);
	set_cmt	(0X14000B989,	"lpParam",	0);
	create_insn	(x=0X14000B989);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B98E,	"hInstance",	0);
	create_insn	(x=0X14000B98E);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B993,	"hMenu",	0);
	create_insn	(x=0X14000B993);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B99B,	"hWndParent",	0);
	create_insn	(x=0X14000B99B);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B9A0,	"nHeight",	0);
	create_insn	(x=0X14000B9A0);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B9AB,	"nWidth",	0);
	create_insn	(x=0X14000B9AB);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B9B3,	"Y",	0);
	create_insn	(x=0X14000B9B3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000B9B7);
	op_hex		(x,	1);
	create_insn	(x=0X14000B9BF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000B9C6,	"dwExStyle",	0);
	set_cmt	(0X14000B9CB,	"dwStyle",	0);
	create_insn	(x=0X14000B9CB);
	op_hex		(x,	1);
	set_cmt	(0X14000B9D2,	"lpWindowName",	0);
	set_cmt	(0X14000B9D5,	"X",	0);
	create_insn	(x=0X14000B9D5);
	op_stkvar	(x,	0);
	set_cmt	(0X14000B9DF,	"wParam",	0);
	set_cmt	(0X14000B9EA,	"Msg",	0);
	set_cmt	(0X14000B9ED,	"lParam",	0);
	set_cmt	(0X14000B9F0,	"hWnd",	0);
	set_cmt	(0X14000BA00,	"hWnd",	0);
	set_cmt	(0X14000BA12,	"hWnd",	0);
	set_cmt	(0X14000BA19,	"Msg",	0);
	set_cmt	(0X14000BA1C,	"lParam",	0);
	set_cmt	(0X14000BA1F,	"wParam",	0);
	set_cmt	(0X14000BA28,	"String",	0);
	set_cmt	(0X14000BA30,	"String",	0);
	set_cmt	(0X14000BA3B,	"hWnd",	0);
	set_cmt	(0X14000BA42,	"lParam",	0);
	set_cmt	(0X14000BA45,	"Msg",	0);
	set_cmt	(0X14000BA4A,	"wParam",	0);
	set_cmt	(0X14000BA5A,	"lpParam",	0);
	create_insn	(x=0X14000BA5A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BA64,	"hInstance",	0);
	create_insn	(x=0X14000BA64);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BA69,	"hMenu",	0);
	create_insn	(x=0X14000BA69);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BA6E,	"hWndParent",	0);
	create_insn	(x=0X14000BA6E);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BA73,	"nHeight",	0);
	create_insn	(x=0X14000BA73);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BA7B,	"nWidth",	0);
	create_insn	(x=0X14000BA7B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BA83);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000BA8A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BA91,	"dwStyle",	0);
	set_cmt	(0X14000BA97,	"dwExStyle",	0);
	set_cmt	(0X14000BA99,	"Y",	0);
	create_insn	(x=0X14000BA99);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BAA1,	"X",	0);
	create_insn	(x=0X14000BAA1);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BAAF,	"wParam",	0);
	set_cmt	(0X14000BAB6,	"lParam",	0);
	set_cmt	(0X14000BAB9,	"Msg",	0);
	set_cmt	(0X14000BABE,	"hWnd",	0);
	set_cmt	(0X14000BACE,	"paccel",	0);
	create_insn	(x=0X14000BACE);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BAD2,	"cAccel",	0);
	create_insn	(x=0X14000BAD7);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BADB);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BAE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BAE6);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BAF3,	"hWnd",	0);
	set_cmt	(0X14000BAFF,	"hWnd",	0);
	set_cmt	(0X14000BB0A,	"lpMsg",	0);
	create_insn	(x=0X14000BB0A);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB0E,	"wMsgFilterMax",	0);
	set_cmt	(0X14000BB11,	"wMsgFilterMin",	0);
	set_cmt	(0X14000BB14,	"hWnd",	0);
	set_cmt	(0X14000BB20,	"lpMsg",	0);
	create_insn	(x=0X14000BB20);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB24,	"hAccTable",	0);
	set_cmt	(0X14000BB27,	"hWnd",	0);
	set_cmt	(0X14000BB34,	"lpMsg",	0);
	create_insn	(x=0X14000BB34);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB3E,	"lpMsg",	0);
	create_insn	(x=0X14000BB3E);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB56,	"hAccel",	0);
	set_cmt	(0X14000BB5F,	"String",	0);
	create_insn	(x=0X14000BB5F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BB6D);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB77,	"Source",	0);
	create_insn	(x=0X14000BB77);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB7B,	"Destination",	0);
	set_cmt	(0X14000BB83,	"lpMem",	0);
	create_insn	(x=0X14000BB83);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BB87,	"hHeap",	0);
	set_cmt	(0X14000BB8E,	"dwFlags",	0);
	create_insn	(x=0X14000BB96);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BB9C);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BBA9,	"hHeap",	0);
	set_cmt	(0X14000BBB0,	"lpMem",	0);
	set_cmt	(0X14000BBB3,	"dwFlags",	0);
	set_cmt	(0X14000BBC0,	"hHeap",	0);
	set_cmt	(0X14000BBC7,	"lpMem",	0);
	set_cmt	(0X14000BBCA,	"dwFlags",	0);
	set_cmt	(0X14000BBD7,	"hHeap",	0);
	set_cmt	(0X14000BBDE,	"lpMem",	0);
	set_cmt	(0X14000BBE1,	"dwFlags",	0);
	create_insn	(x=0X14000BBE9);
	op_stkvar	(x,	1);
	make_array	(0X14000BC0A,	0X2);
	create_insn	(x=0X14000BC0C);
	op_hex		(x,	1);
	set_name	(0X14000BC0C,	"INLINED_sub_14000BC0C");
	set_cmt	(0X14000BC19,	"hWnd",	0);
	set_cmt	(0X14000BC20,	"bEnable",	0);
	create_insn	(x=0X14000BC2D);
	op_hex		(x,	1);
	make_array	(0X14000BC36,	0X2);
	create_insn	(x=0X14000BC38);
	op_stkvar	(x,	0);
	set_name	(0X14000BC38,	"BrowseCallbackProc");
	create_insn	(x=0X14000BC3E);
	op_hex		(x,	1);
	set_cmt	(0X14000BC51,	"Msg",	0);
	set_cmt	(0X14000BC56,	"wParam",	0);
	set_cmt	(0X14000BC62,	"dwMilliseconds",	0);
	set_cmt	(0X14000BC6D,	"lParam",	0);
	set_cmt	(0X14000BC70,	"Msg",	0);
	set_cmt	(0X14000BC75,	"wParam",	0);
	set_cmt	(0X14000BC7B,	"hWnd",	0);
	create_insn	(x=0X14000BC86);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BC8B);
	op_hex		(x,	1);
	make_array	(0X14000BC91,	0X3);
	create_insn	(0X14000BC94);
	set_name	(0X14000BC94,	"mySHBrowseForFolderW");
	create_insn	(x=0X14000BCB3);
	op_hex		(x,	1);
	set_cmt	(0X14000BCCF,	"pvReserved",	0);
	set_cmt	(0X14000BCE1,	"Val",	0);
	set_cmt	(0X14000BCE3,	"void *",	0);
	create_insn	(x=0X14000BCE3);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BCE8,	"Size",	0);
	create_insn	(x=0X14000BCF1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000BD12);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BD19,	"hModule",	0);
	create_insn	(x=0X14000BD22);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BD29,	"hModule",	0);
	create_insn	(x=0X14000BD35);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BD3F,	"Count",	0);
	set_cmt	(0X14000BD43,	"Destination",	0);
	create_insn	(x=0X14000BD43);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BD48,	"Source",	0);
	create_insn	(x=0X14000BD4C);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BD58,	"String",	0);
	create_insn	(x=0X14000BD58);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BD5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BD75);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BD7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BD81);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BD90);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BD95);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000BD9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BDA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BDA9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BDAE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BDB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BDE9);
	op_stkvar	(x,	0);
	set_cmt	(0X14000BDEF,	"pv",	0);
	set_cmt	(0X14000BDF8,	"String",	0);
	set_cmt	(0X14000BE15,	"hLibModule",	0);
	create_insn	(x=0X14000BE39);
	op_stkvar	(x,	1);
	make_array	(0X14000BE5A,	0X2);
	create_insn	(x=0X14000BE5C);
	op_stkvar	(x,	0);
	set_name	(0X14000BE5C,	"MyProcess_ForegroundWindow");
	create_insn	(x=0X14000BE62);
	op_hex		(x,	1);
	set_cmt	(0X14000BE76,	"lpdwProcessId",	0);
	create_insn	(x=0X14000BE76);
	op_stkvar	(x,	1);
	set_cmt	(0X14000BE7B,	"hWnd",	0);
	create_insn	(x=0X14000BE8A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BE95);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BE9A);
	op_hex		(x,	1);
	create_insn	(x=0X14000BEA0);
	op_stkvar	(x,	0);
	set_name	(0X14000BEA0,	"EnumFunc");
	create_insn	(x=0X14000BEA6);
	op_hex		(x,	1);
	set_cmt	(0X14000BEAA,	"lpdwProcessId",	0);
	set_cmt	(0X14000BEC1,	"hWnd",	0);
	create_insn	(x=0X14000BECE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BEEC,	"nIndex",	0);
	set_cmt	(0X14000BEF1,	"hWnd",	0);
	create_insn	(x=0X14000BF02);
	op_hex		(x,	1);
	set_cmt	(0X14000BF15,	"hWnd",	0);
	set_cmt	(0X14000BF22,	"bEnable",	0);
	set_cmt	(0X14000BF24,	"hWnd",	0);
	create_insn	(x=0X14000BF36);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000BF3B);
	op_hex		(x,	1);
	make_array	(0X14000BF41,	0X3);
	create_insn	(x=0X14000BF44);
	op_stkvar	(x,	0);
	set_name	(0X14000BF44,	"wnd_set_back");
	create_insn	(x=0X14000BF49);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BF4F);
	op_hex		(x,	1);
	set_cmt	(0X14000BF57,	"lParam",	0);
	set_cmt	(0X14000BF5A,	"lpEnumFunc",	0);
	create_insn	(x=0X14000BF5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000BF8B,	"hWnd",	0);
	set_cmt	(0X14000BF8F,	"Y",	0);
	set_cmt	(0X14000BF92,	"uFlags",	0);
	create_insn	(x=0X14000BF92);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BF9A);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X14000BF9F);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X14000BFA4,	"hWndInsertAfter",	0);
	set_cmt	(0X14000BFA8,	"X",	0);
	create_insn	(0X14000BFBB);
	set_cmt	(0X14000BFDB,	"hWnd",	0);
	set_cmt	(0X14000BFDF,	"bEnable",	0);
	set_cmt	(0X14000BFF0,	"hWnd",	0);
	set_cmt	(0X14000BFF4,	"uFlags",	0);
	create_insn	(x=0X14000BFF4);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000BFFC);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X14000C001);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X14000C006,	"Y",	0);
	set_cmt	(0X14000C009,	"X",	0);
	set_cmt	(0X14000C00C,	"hWndInsertAfter",	0);
	create_insn	(x=0X14000C00C);
	op_hex		(x,	1);
	create_insn	(x=0X14000C01A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000C02E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C033);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C038);
	op_hex		(x,	1);
	make_array	(0X14000C03E,	0X2);
	create_insn	(0X14000C040);
	set_name	(0X14000C040,	"MyCloseHandle");
	create_insn	(x=0X14000C042);
	op_hex		(x,	1);
	set_cmt	(0X14000C05D,	"hObject",	0);
	create_insn	(x=0X14000C075);
	op_hex		(x,	1);
	create_insn	(x=0X14000C07C);
	op_hex		(x,	1);
	set_name	(0X14000C07C,	"init_g_TLS_8_g_stru60_4");
	set_cmt	(0X14000C08D,	"int",	0);
	set_cmt	(0X14000C092,	"__int64",	0);
	create_insn	(x=0X14000C092);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000C099,	"int",	0);
	create_insn	(x=0X14000C0A8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000C0B6);
	op_hex		(x,	1);
	make_array	(0X14000C0C1,	0X3);
	create_insn	(x=0X14000C0C4);
	op_stkvar	(x,	0);
	set_name	(0X14000C0C4,	"MyGetModuleFileNameW");
	create_insn	(x=0X14000C0C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C0CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C0D4);
	op_hex		(x,	1);
	set_cmt	(0X14000C0E6,	"hModule",	0);
	set_cmt	(0X14000C0ED,	"nSize",	0);
	set_cmt	(0X14000C0F0,	"lpFilename",	0);
	create_insn	(x=0X14000C0FC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000C103,	"String1",	0);
	set_cmt	(0X14000C116,	"Src",	0);
	set_cmt	(0X14000C11A,	"void *",	0);
	set_cmt	(0X14000C120,	"Size",	0);
	create_insn	(x=0X14000C134);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C13D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C142);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C147);
	op_hex		(x,	1);
	make_array	(0X14000C14D,	0X3);
	create_insn	(0X14000C150);
	set_name	(0X14000C150,	"INLINED_sub_14000C150");
	create_insn	(0X14000C158);
	create_insn	(0X14000C168);
	make_array	(0X14000C186,	0X2);
	create_insn	(x=0X14000C188);
	op_stkvar	(x,	0);
	set_name	(0X14000C188,	"asm_MyGetCommandLine2");
	create_insn	(x=0X14000C18D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C196);
	op_hex		(x,	1);
	create_insn	(x=0X14000C1AB);
	op_hex		(x,	1);
	create_insn	(x=0X14000C1C5);
	op_stkvar	(x,	1);
	create_insn	(0X14000C21D);
	create_insn	(0X14000C25D);
	create_insn	(0X14000C262);
	create_insn	(0X14000C28F);
	create_insn	(x=0X14000C29A);
	op_hex		(x,	1);
	create_insn	(0X14000C2A4);
	create_insn	(x=0X14000C2A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C2AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C2B0);
	op_hex		(x,	1);
	make_array	(0X14000C2B9,	0X3);
	create_insn	(x=0X14000C2BC);
	op_hex		(x,	1);
	set_name	(0X14000C2BC,	"asm_MyGetCommandLine_TLS_8");
	set_cmt	(0X14000C2CC,	"a1",	0);
	create_insn	(x=0X14000C2CE);
	op_hex		(x,	1);
	set_cmt	(0X14000C2D8,	"a2",	0);
	create_insn	(0X14000C2D8);
	set_name	(0X14000C2D8,	"INLINED_sub_14000C2D8");
	set_cmt	(0X14000C2E7,	"_DWORD *",	0);
	create_insn	(x=0X14000C2E8);
	op_hex		(x,	1);
	set_cmt	(0X14000C2EE,	"a1",	0);
	create_insn	(x=0X14000C2FC);
	op_stkvar	(x,	1);
	create_insn	(0X14000C310);
	create_insn	(0X14000C321);
	create_insn	(x=0X14000C336);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C33B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C340);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C345);
	op_hex		(x,	1);
	create_insn	(0X14000C350);
	set_name	(0X14000C350,	"cmdline_to_STR_Tree");
	set_cmt	(0X14000C35F,	"_DWORD *",	0);
	create_insn	(x=0X14000C360);
	op_hex		(x,	1);
	set_cmt	(0X14000C37F,	"a1",	0);
	create_insn	(x=0X14000C37F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C389);
	op_stkvar	(x,	1);
	create_insn	(0X14000C39D);
	create_insn	(0X14000C3AE);
	create_insn	(x=0X14000C3C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C3C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C3CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C3D2);
	op_hex		(x,	1);
	create_insn	(x=0X14000C3DC);
	op_stkvar	(x,	0);
	set_name	(0X14000C3DC,	"INLINED_sub_14000C3DC");
	create_insn	(x=0X14000C3E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C3E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C3EC);
	op_hex		(x,	1);
	set_cmt	(0X14000C3F2,	"nSize",	0);
	set_cmt	(0X14000C3F5,	"lpBuffer",	0);
	set_cmt	(0X14000C413,	"nSize",	0);
	set_cmt	(0X14000C417,	"lpName",	0);
	set_cmt	(0X14000C41A,	"lpBuffer",	0);
	create_insn	(x=0X14000C426);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C432);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C437);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C43C);
	op_hex		(x,	1);
	make_array	(0X14000C442,	0X2);
	create_insn	(x=0X14000C444);
	op_hex		(x,	1);
	set_name	(0X14000C444,	"INLINED_sub_14000C444");
	set_cmt	(0X14000C44D,	"lpValue",	0);
	create_insn	(x=0X14000C455);
	op_hex		(x,	1);
	make_array	(0X14000C45A,	0X2);
	create_insn	(x=0X14000C45C);
	op_hex		(x,	1);
	set_name	(0X14000C45C,	"MySetEnvironmentVariableW");
	create_insn	(x=0X14000C46B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000C472,	"lpValue",	0);
	create_insn	(x=0X14000C47C);
	op_hex		(x,	1);
	make_array	(0X14000C481,	0XF);
	create_insn	(x=0X14000C490);
	op_hex		(x,	1);
	set_name	(0X14000C490,	"fn_VECTORED_EXCEPTION_HANDLER");
	set_cmt	(0X14000C4BB,	"uExitCode",	0);
	set_cmt	(0X14000C4BD,	"hProcess",	0);
	create_insn	(x=0X14000C4C8);
	op_hex		(x,	1);
	make_array	(0X14000C4CD,	0X3);
	create_insn	(0X14000C4D0);
	set_name	(0X14000C4D0,	"AddVectoredExceptionHandler__");
	set_cmt	(0X14000C4D7,	"First",	0);
	create_insn	(x=0X14000C4D7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X14000C4E3,	0XD);
	create_insn	(0X14000C4F0);
	set_name	(0X14000C4F0,	"EXCEPTION_sub");
	create_insn	(x=0X14000C4F2);
	op_hex		(x,	1);
	create_insn	(x=0X14000C4FD);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C565,	"HistoryTable",	0);
	create_insn	(x=0X14000C568);
	op_stkvar	(x,	0);
	set_cmt	(0X14000C58F,	"ImageBase",	0);
	create_insn	(x=0X14000C58F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C59B);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C5A3,	"ControlPc",	0);
	create_insn	(x=0X14000C5B4);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C5BC,	"ImageBase",	0);
	create_insn	(x=0X14000C5BC);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C5C4,	"HistoryTable",	0);
	set_cmt	(0X14000C5CE,	"ControlPc",	0);
	create_insn	(x=0X14000C5D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C5D9);
	op_stkvar	(x,	0);
	set_cmt	(0X14000C603,	"ImageBase",	0);
	create_insn	(x=0X14000C603);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C60F);
	op_hex		(x,	1);
	set_cmt	(0X14000C61B,	"ContextPointers",	0);
	create_insn	(x=0X14000C61B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C620);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C628,	"FunctionEntry",	0);
	set_cmt	(0X14000C62B,	"EstablisherFrame",	0);
	create_insn	(x=0X14000C62B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C630);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C638,	"ControlPc",	0);
	set_cmt	(0X14000C63B,	"HandlerData",	0);
	create_insn	(x=0X14000C63B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000C640);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C645,	"HandlerType",	0);
	set_cmt	(0X14000C647,	"ContextRecord",	0);
	create_insn	(x=0X14000C647);
	op_stkvar	(x,	0);
	set_cmt	(0X14000C652,	"ControlPc",	0);
	create_insn	(x=0X14000C652);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C664,	"ImageBase",	0);
	create_insn	(x=0X14000C664);
	op_stkvar	(x,	1);
	set_cmt	(0X14000C66C,	"HistoryTable",	0);
	create_insn	(x=0X14000C682);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C68A);
	op_hex		(x,	1);
	create_insn	(0X14000C693);
	create_insn	(x=0X14000C697);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000C6A2);
	op_hex		(x,	1);
	make_array	(0X14000C6AB,	0X5);
	create_insn	(x=0X14000C6B0);
	op_hex		(x,	1);
	set_name	(0X14000C6B0,	"myRemoveVectoredExceptionHandler");
	set_cmt	(0X14000C6B4,	"Handle",	0);
	create_insn	(x=0X14000C6D1);
	op_hex		(x,	1);
	make_array	(0X14000C6D6,	0XA);
	create_insn	(0X14000C6E0);
	set_name	(0X14000C6E0,	"EXCEPTION_sub2");
	create_insn	(x=0X14000C6E2);
	op_hex		(x,	1);
	create_insn	(x=0X14000C6F5);
	op_hex		(x,	1);
	create_insn	(0X14000C6FB);
	create_insn	(0X14000C70D);
	create_insn	(0X14000C750);
	create_insn	(x=0X14000C887);
	op_hex		(x,	1);
	make_array	(0X14000C88D,	0X3);
	create_insn	(0X14000C890);
	set_name	(0X14000C890,	"AddVectoredExceptionHandler_");
	create_insn	(x=0X14000C892);
	op_hex		(x,	1);
	set_cmt	(0X14000C899,	"Handle",	0);
	set_cmt	(0X14000C8BB,	"Handler",	0);
	set_cmt	(0X14000C8BE,	"First",	0);
	create_insn	(x=0X14000C8CD);
	op_hex		(x,	1);
	make_array	(0X14000C8D3,	0XD);
	create_insn	(0X14000C8E0);
	set_name	(0X14000C8E0,	"exErrStr_");
	make_array	(0X14000C8ED,	0X3);
	create_insn	(0X14000C8F0);
	set_name	(0X14000C8F0,	"exErrStr");
	create_insn	(x=0X14000C8F2);
	op_hex		(x,	1);
	create_insn	(x=0X14000C8F6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000C8FD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14000C927);
	create_insn	(x=0X14000C932);
	op_hex		(x,	1);
	create_insn	(x=0X14000C961);
	op_hex		(x,	1);
	make_array	(0X14000C967,	0X9);
	create_insn	(0X14000C970);
	set_name	(0X14000C970,	"ZHeapDestroy");
	make_array	(0X14000C97E,	0X2);
	create_insn	(x=0X14000C980);
	op_hex		(x,	1);
	set_name	(0X14000C980,	"ZHeapCreate");
	set_cmt	(0X14000C984,	"dwMaximumSize",	0);
	set_cmt	(0X14000C987,	"dwInitialSize",	0);
	set_cmt	(0X14000C98C,	"flOptions",	0);
	create_insn	(x=0X14000C99B);
	op_hex		(x,	1);
	create_insn	(0X14000C9A0);
	set_name	(0X14000C9A0,	"ZHeapSize");
	create_insn	(0X14000C9B8);
	make_array	(0X14000C9BB,	0X5);
	create_insn	(0X14000C9C0);
	set_name	(0X14000C9C0,	"ZHeapFree");
	make_array	(0X14000C9D3,	0XD);
	create_insn	(0X14000C9E0);
	set_name	(0X14000C9E0,	"ZHeapAlloc");
	create_insn	(0X14000C9FB);
	make_array	(0X14000C9FE,	0X2);
	create_insn	(x=0X14000CA00);
	op_stkvar	(x,	0);
	set_name	(0X14000CA00,	"add_to_STR_tree_AT");
	create_insn	(x=0X14000CA05);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CA0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CA10);
	op_hex		(x,	1);
	create_insn	(x=0X14000CA20);
	op_hex		(x,	1);
	set_cmt	(0X14000CA3E,	"Src",	0);
	set_cmt	(0X14000CA41,	"void *",	0);
	set_cmt	(0X14000CA44,	"Size",	0);
	create_insn	(x=0X14000CA4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CA58);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CA5D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CA62);
	op_hex		(x,	1);
	make_array	(0X14000CA68,	0X8);
	create_insn	(0X14000CA70);
	set_name	(0X14000CA70,	"ptr");
	make_array	(0X14000CA75,	0XB);
	create_insn	(x=0X14000CA80);
	op_stkvar	(x,	0);
	set_name	(0X14000CA80,	"add_to_STR_tree_AT2");
	create_insn	(x=0X14000CA86);
	op_hex		(x,	1);
	create_insn	(x=0X14000CA99);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CA9E);
	op_hex		(x,	1);
	create_insn	(x=0X14000CAA8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CAAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CAF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CAF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CAFE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CB03);
	op_hex		(x,	1);
	make_array	(0X14000CB09,	0X7);
	create_insn	(x=0X14000CB10);
	op_stkvar	(x,	0);
	set_name	(0X14000CB10,	"memcpy_end");
	create_insn	(x=0X14000CB16);
	op_hex		(x,	1);
	set_cmt	(0X14000CB1D,	"Src",	0);
	set_cmt	(0X14000CB23,	"void *",	0);
	create_insn	(x=0X14000CB2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CB34);
	op_hex		(x,	1);
	make_array	(0X14000CB3A,	0X6);
	create_insn	(0X14000CB40);
	set_name	(0X14000CB40,	"ptr64");
	make_array	(0X14000CB44,	0XC);
	create_insn	(0X14000CB50);
	set_name	(0X14000CB50,	"SETDW");
	make_array	(0X14000CB53,	0XD);
	create_insn	(x=0X14000CB60);
	op_stkvar	(x,	0);
	set_name	(0X14000CB60,	"myMultiByteToWideCharEx");
	create_insn	(x=0X14000CB65);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CB6F);
	op_hex		(x,	1);
	create_insn	(x=0X14000CB7C);
	op_hex		(x,	1);
	create_insn	(x=0X14000CBEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CBFF);
	op_hex		(x,	1);
	create_insn	(0X14000CC12);
	create_insn	(x=0X14000CC1B);
	op_hex		(x,	1);
	create_insn	(0X14000CC2B);
	set_cmt	(0X14000CC44,	"cbMultiByte",	0);
	set_cmt	(0X14000CC47,	"lpMultiByteStr",	0);
	set_cmt	(0X14000CC4A,	"dwFlags",	0);
	set_cmt	(0X14000CC4C,	"CodePage",	0);
	set_cmt	(0X14000CC4E,	"cchWideChar",	0);
	create_insn	(x=0X14000CC4E);
	op_stkvar	(x,	0);
	set_cmt	(0X14000CC53,	"lpWideCharStr",	0);
	create_insn	(x=0X14000CC53);
	op_stkvar	(x,	0);
	set_cmt	(0X14000CC6D,	"cbMultiByte",	0);
	set_cmt	(0X14000CC70,	"cchWideChar",	0);
	create_insn	(x=0X14000CC70);
	op_stkvar	(x,	0);
	set_cmt	(0X14000CC74,	"lpMultiByteStr",	0);
	set_cmt	(0X14000CC77,	"CodePage",	0);
	set_cmt	(0X14000CC79,	"dwFlags",	0);
	set_cmt	(0X14000CC7E,	"lpWideCharStr",	0);
	create_insn	(x=0X14000CC7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CC89);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CC96);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CC9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CCA0);
	op_hex		(x,	1);
	make_array	(0X14000CCAA,	0X2);
	create_insn	(x=0X14000CCAC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X14000CCAC,	"init_VT_0x60");
	create_insn	(x=0X14000CCBA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000CCC8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000CCD8);
	op_stkvar	(x,	0);
	set_name	(0X14000CCD8,	"ctor_0x60");
	create_insn	(x=0X14000CCDD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CCE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CCEC);
	op_hex		(x,	1);
	set_cmt	(0X14000CD04,	"hHeap",	0);
	set_cmt	(0X14000CD0B,	"dwFlags",	0);
	set_cmt	(0X14000CD0D,	"dwBytes",	0);
	create_insn	(x=0X14000CD23);
	op_stkvar	(x,	1);
	set_cmt	(0X14000CD27,	"hHeap",	0);
	set_cmt	(0X14000CD35,	"dwFlags",	0);
	set_cmt	(0X14000CD3E,	"dwBytes",	0);
	create_insn	(x=0X14000CD3E);
	op_hex		(x,	1);
	create_insn	(x=0X14000CD51);
	op_hex		(x,	1);
	create_insn	(x=0X14000CD55);
	op_hex		(x,	1);
	create_insn	(x=0X14000CD59);
	op_hex		(x,	1);
	create_insn	(x=0X14000CD5D);
	op_hex		(x,	1);
	create_insn	(x=0X14000CD82);
	op_hex		(x,	1);
	set_cmt	(0X14000CD86,	"a2",	0);
	set_cmt	(0X14000CD8B,	"asize_plus_0x10",	0);
	set_cmt	(0X14000CD8F,	"a3",	0);
	set_cmt	(0X14000CD95,	"a4",	0);
	set_cmt	(0X14000CD9E,	"dwBytes",	0);
	set_cmt	(0X14000CDA2,	"dwFlags",	0);
	set_cmt	(0X14000CDAB,	"hHeap",	0);
	create_insn	(x=0X14000CDB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000CDCC,	"hHeap",	0);
	create_insn	(0X14000CDCC);
	set_cmt	(0X14000CDD3,	"lpMem",	0);
	set_cmt	(0X14000CDD6,	"dwFlags",	0);
	create_insn	(x=0X14000CDE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CDE5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CDEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CDF2);
	op_hex		(x,	1);
	create_insn	(x=0X14000CDFC);
	op_stkvar	(x,	0);
	set_name	(0X14000CDFC,	"stu602_add_if_not_exists");
	create_insn	(x=0X14000CE02);
	op_hex		(x,	1);
	create_insn	(x=0X14000CE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CE29);
	op_hex		(x,	1);
	create_insn	(0X14000CE30);
	set_name	(0X14000CE30,	"dtor_0x60");
	create_insn	(x=0X14000CE39);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CE3F);
	op_hex		(x,	1);
	set_cmt	(0X14000CE54,	"lpMem",	0);
	set_cmt	(0X14000CE58,	"hHeap",	0);
	set_cmt	(0X14000CE5F,	"dwFlags",	0);
	set_cmt	(0X14000CE67,	"lpMem",	0);
	set_cmt	(0X14000CE6B,	"hHeap",	0);
	set_cmt	(0X14000CE72,	"dwFlags",	0);
	set_cmt	(0X14000CE7A,	"lpMem",	0);
	set_cmt	(0X14000CE83,	"hHeap",	0);
	set_cmt	(0X14000CE8D,	"dwFlags",	0);
	set_cmt	(0X14000CEA1,	"lpMem",	0);
	set_cmt	(0X14000CEA4,	"dwFlags",	0);
	create_insn	(x=0X14000CEA6);
	op_hex		(x,	1);
	set_cmt	(0X14000CEAA,	"hHeap",	0);
	create_insn	(x=0X14000CEB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CEBC);
	op_hex		(x,	1);
	make_array	(0X14000CEC2,	0X2);
	create_insn	(x=0X14000CEC4);
	op_stkvar	(x,	0);
	set_name	(0X14000CEC4,	"fn_0_0x60");
	create_insn	(x=0X14000CEC9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CECE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CED8);
	op_hex		(x,	1);
	create_insn	(0X14000CF0C);
	create_insn	(x=0X14000CF13);
	op_hex		(x,	1);
	create_insn	(0X14000CF23);
	create_insn	(x=0X14000CF57);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CF5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CF61);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000CF69);
	op_hex		(x,	1);
	create_insn	(x=0X14000CF74);
	op_stkvar	(x,	0);
	set_name	(0X14000CF74,	"stu602_get_by_name");
	create_insn	(x=0X14000CF79);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CF7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000CF84);
	op_hex		(x,	1);
	create_insn	(x=0X14000CF8B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000CF99);
	op_hex		(x,	1);
	set_cmt	(0X14000CFB8,	"String1",	0);
	create_insn	(0X14000CFB8);
	set_cmt	(0X14000CFBC,	"String2",	0);
	create_insn	(0X14000CFD6);
	create_insn	(0X14000CFE2);
	set_cmt	(0X14000CFF8,	"String1",	0);
	create_insn	(0X14000CFF8);
	set_cmt	(0X14000CFFC,	"String2",	0);
	create_insn	(x=0X14000D016);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D01B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D020);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D025);
	op_hex		(x,	1);
	create_insn	(x=0X14000D02C);
	op_stkvar	(x,	0);
	set_name	(0X14000D02C,	"stu602_add");
	create_insn	(x=0X14000D031);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D036);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D03C);
	op_hex		(x,	1);
	set_cmt	(0X14000D059,	"aMASK",	0);
	set_cmt	(0X14000D066,	"aRoot",	0);
	create_insn	(0X14000D073);
	create_insn	(x=0X14000D076);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000D081);
	op_hex		(x,	1);
	create_insn	(0X14000D091);
	set_cmt	(0X14000D0AE,	"String",	0);
	set_cmt	(0X14000D0B6,	"hHeap",	0);
	set_cmt	(0X14000D0BD,	"dwFlags",	0);
	set_cmt	(0X14000D0BF,	"dwBytes",	0);
	set_cmt	(0X14000D0CD,	"Source",	0);
	set_cmt	(0X14000D0D0,	"Destination",	0);
	create_insn	(x=0X14000D0F1);
	op_hex		(x,	1);
	set_cmt	(0X14000D108,	"Size",	0);
	set_cmt	(0X14000D10C,	"Val",	0);
	set_cmt	(0X14000D10E,	"void *",	0);
	create_insn	(x=0X14000D116);
	op_hex		(x,	1);
	create_insn	(x=0X14000D128);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D12D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D132);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D13A);
	op_hex		(x,	1);
	create_insn	(x=0X14000D140);
	op_stkvar	(x,	0);
	set_name	(0X14000D140,	"dtor_s602");
	create_insn	(x=0X14000D145);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D14B);
	op_hex		(x,	1);
	create_insn	(x=0X14000D15D);
	op_hex		(x,	1);
	set_cmt	(0X14000D163,	"lpMem",	0);
	set_cmt	(0X14000D167,	"hHeap",	0);
	set_cmt	(0X14000D16E,	"dwFlags",	0);
	set_cmt	(0X14000D17B,	"aRoot",	0);
	set_cmt	(0X14000D17E,	"aMASK",	0);
	create_insn	(x=0X14000D192);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D197);
	op_stkvar	(x,	1);
	set_cmt	(0X14000D1B7,	"void *",	0);
	set_cmt	(0X14000D1BB,	"Val",	0);
	create_insn	(x=0X14000D1BD);
	op_hex		(x,	1);
	set_cmt	(0X14000D1C0,	"Size",	0);
	create_insn	(x=0X14000D1D0);
	op_hex		(x,	1);
	create_insn	(x=0X14000D1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D1D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D1DE);
	op_hex		(x,	1);
	create_insn	(x=0X14000D1E4);
	op_hex		(x,	1);
	set_name	(0X14000D1E4,	"s602_reset_parent");
	create_insn	(x=0X14000D1E8);
	op_hex		(x,	1);
	make_array	(0X14000D1ED,	0X3);
	create_insn	(x=0X14000D1F0);
	op_stkvar	(x,	0);
	set_name	(0X14000D1F0,	"stu602_idx_f2");
	create_insn	(x=0X14000D1F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D1FA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D200);
	op_hex		(x,	1);
	set_cmt	(0X14000D21D,	"aMASK",	0);
	set_cmt	(0X14000D226,	"aRoot",	0);
	create_insn	(0X14000D230);
	create_insn	(x=0X14000D26A);
	op_hex		(x,	1);
	set_cmt	(0X14000D281,	"Size",	0);
	set_cmt	(0X14000D285,	"Val",	0);
	set_cmt	(0X14000D287,	"void *",	0);
	create_insn	(x=0X14000D28F);
	op_hex		(x,	1);
	create_insn	(x=0X14000D2A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D2A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D2AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D2B3);
	op_hex		(x,	1);
	make_array	(0X14000D2B9,	0X3);
	create_insn	(0X14000D2BC);
	set_name	(0X14000D2BC,	"INLINED_sub_14000D2BC");
	create_insn	(0X14000D2E1);
	create_insn	(0X14000D2EC);
	set_name	(0X14000D2EC,	"s602_get_parent_f2");
	create_insn	(0X14000D338);
	create_insn	(0X14000D343);
	create_insn	(0X14000D375);
	create_insn	(0X14000D381);
	make_array	(0X14000D389,	0X3);
	create_insn	(0X14000D38C);
	set_name	(0X14000D38C,	"str_hash_65599");
	create_insn	(0X14000D390);
	create_insn	(x=0X14000D3A4);
	op_stkvar	(x,	0);
	set_name	(0X14000D3A4,	"str_hash_65599_lower");
	create_insn	(x=0X14000D3AA);
	op_hex		(x,	1);
	create_insn	(0X14000D3B8);
	set_cmt	(0X14000D3C4,	"C",	0);
	create_insn	(x=0X14000D3D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D3D7);
	op_hex		(x,	1);
	make_array	(0X14000D3DD,	0X3);
	create_insn	(0X14000D3E0);
	set_name	(0X14000D3E0,	"fn_602_index_todo");
	create_insn	(0X14000D3F9);
	create_insn	(0X14000D40C);
	create_insn	(x=0X14000D418);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X14000D418,	"init_VT_0x60_2");
	create_insn	(x=0X14000D426);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000D434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14000D444);
	set_name	(0X14000D444,	"ctor_0x60_2");
	create_insn	(x=0X14000D459);
	op_hex		(x,	1);
	set_cmt	(0X14000D460,	"dwFlags",	0);
	set_cmt	(0X14000D465,	"hHeap",	0);
	set_cmt	(0X14000D46F,	"dwBytes",	0);
	set_cmt	(0X14000D484,	"hHeap",	0);
	set_cmt	(0X14000D48B,	"dwBytes",	0);
	set_cmt	(0X14000D48F,	"dwFlags",	0);
	create_insn	(0X14000D4A0);
	create_insn	(x=0X14000D4A4);
	op_hex		(x,	1);
	create_insn	(x=0X14000D4A9);
	op_hex		(x,	1);
	create_insn	(x=0X14000D4AD);
	op_hex		(x,	1);
	create_insn	(x=0X14000D4B2);
	op_hex		(x,	1);
	create_insn	(x=0X14000D4DB);
	op_hex		(x,	1);
	set_cmt	(0X14000D4E0,	"a2",	0);
	set_cmt	(0X14000D4EC,	"a4",	0);
	set_cmt	(0X14000D4F0,	"a3",	0);
	set_cmt	(0X14000D4F6,	"asize_plus_0x10",	0);
	create_insn	(x=0X14000D501);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D506);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D50B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D517);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D51C);
	op_hex		(x,	1);
	create_insn	(0X14000D524);
	set_name	(0X14000D524,	"dtor_0x60_2");
	create_insn	(x=0X14000D52D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D533);
	op_hex		(x,	1);
	create_insn	(x=0X14000D54C);
	op_hex		(x,	1);
	create_insn	(x=0X14000D554);
	op_hex		(x,	1);
	set_cmt	(0X14000D559,	"lpMem",	0);
	set_cmt	(0X14000D562,	"hHeap",	0);
	set_cmt	(0X14000D56C,	"dwFlags",	0);
	set_cmt	(0X14000D582,	"lpMem",	0);
	set_cmt	(0X14000D586,	"hHeap",	0);
	set_cmt	(0X14000D58D,	"dwFlags",	0);
	set_cmt	(0X14000D595,	"hHeap",	0);
	set_cmt	(0X14000D59C,	"lpMem",	0);
	set_cmt	(0X14000D59F,	"dwFlags",	0);
	create_insn	(x=0X14000D5A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D5AC);
	op_hex		(x,	1);
	make_array	(0X14000D5B2,	0X2);
	create_insn	(0X14000D5B4);
	set_name	(0X14000D5B4,	"stru601_f4");
	make_array	(0X14000D5B9,	0X3);
	create_insn	(0X14000D5BC);
	set_name	(0X14000D5BC,	"stru601_root_next");
	create_insn	(x=0X14000D5C0);
	op_hex		(x,	1);
	create_insn	(x=0X14000D5C9);
	op_hex		(x,	1);
	make_array	(0X14000D5CE,	0X2);
	create_insn	(0X14000D5D0);
	set_name	(0X14000D5D0,	"stru601_f0f2");
	create_insn	(0X14000D5EB);
	create_insn	(x=0X14000D5EE);
	op_hex		(x,	1);
	create_insn	(x=0X14000D60C);
	op_stkvar	(x,	0);
	set_name	(0X14000D60C,	"stru601_dtor");
	create_insn	(x=0X14000D611);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D616);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D61C);
	op_hex		(x,	1);
	create_insn	(0X14000D631);
	set_cmt	(0X14000D634,	"aRoot",	0);
	set_cmt	(0X14000D638,	"aMASK",	0);
	create_insn	(0X14000D656);
	create_insn	(x=0X14000D66A);
	op_hex		(x,	1);
	create_insn	(x=0X14000D673);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D678);
	op_hex		(x,	1);
	create_insn	(x=0X14000D67C);
	op_hex		(x,	1);
	create_insn	(x=0X14000D680);
	op_hex		(x,	1);
	create_insn	(x=0X14000D685);
	op_hex		(x,	1);
	create_insn	(x=0X14000D68A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D693);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D698);
	op_hex		(x,	1);
	make_array	(0X14000D69E,	0X2);
	create_insn	(x=0X14000D6A0);
	op_stkvar	(x,	0);
	set_name	(0X14000D6A0,	"fn_stru601");
	create_insn	(x=0X14000D6A6);
	op_hex		(x,	1);
	set_cmt	(0X14000D6C2,	"Size",	0);
	set_cmt	(0X14000D6C6,	"Val",	0);
	set_cmt	(0X14000D6C8,	"void *",	0);
	create_insn	(x=0X14000D703);
	op_hex		(x,	1);
	create_insn	(x=0X14000D70B);
	op_hex		(x,	1);
	create_insn	(0X14000D716);
	create_insn	(x=0X14000D766);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D76B);
	op_hex		(x,	1);
	make_array	(0X14000D771,	0X3);
	create_insn	(0X14000D774);
	set_name	(0X14000D774,	"after_qsort");
	create_insn	(x=0X14000D7A6);
	op_hex		(x,	1);
	create_insn	(0X14000D7B3);
	create_insn	(0X14000D7CC);
	create_insn	(0X14000D7E3);
	create_insn	(0X14000D800);
	create_insn	(0X14000D812);
	create_insn	(0X14000D825);
	create_insn	(0X14000D832);
	create_insn	(0X14000D845);
	create_insn	(0X14000D857);
	create_insn	(0X14000D873);
	create_insn	(x=0X14000D87C);
	op_stkvar	(x,	0);
	set_name	(0X14000D87C,	"fn_0x60_2");
	create_insn	(x=0X14000D881);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D886);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D88C);
	op_hex		(x,	1);
	set_cmt	(0X14000D8B4,	"a601",	0);
	create_insn	(0X14000D8B4);
	create_insn	(x=0X14000D8DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D8E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D8EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D8F1);
	op_hex		(x,	1);
	create_insn	(x=0X14000D8F8);
	op_hex		(x,	1);
	set_name	(0X14000D8F8,	"free_g_tree_stru28_fld04");
	create_insn	(x=0X14000D90D);
	op_hex		(x,	1);
	make_array	(0X14000D912,	0X2);
	create_insn	(0X14000D914);
	set_name	(0X14000D914,	"CreateDirectoryW1");
	create_insn	(x=0X14000D916);
	op_hex		(x,	1);
	set_cmt	(0X14000D924,	"Source",	0);
	set_cmt	(0X14000D927,	"Destination",	0);
	create_insn	(x=0X14000D927);
	op_stkvar	(x,	1);
	set_cmt	(0X14000D92C,	"Count",	0);
	set_cmt	(0X14000D937,	"String",	0);
	create_insn	(x=0X14000D937);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D93C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000D949);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D952);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000D96D);
	op_hex		(x,	1);
	create_insn	(x=0X14000D97D);
	op_stkvar	(x,	1);
	set_cmt	(0X14000D98D,	"lpPathName",	0);
	create_insn	(x=0X14000D98D);
	op_stkvar	(x,	1);
	set_cmt	(0X14000D992,	"lpSecurityAttributes",	0);
	create_insn	(0X14000D99E);
	create_insn	(x=0X14000D9A0);
	op_hex		(x,	1);
	make_array	(0X14000D9A9,	0X3);
	create_insn	(x=0X14000D9AC);
	op_hex		(x,	1);
	set_name	(0X14000D9AC,	"MySetFileAttributesW");
	create_insn	(x=0X14000D9BF);
	op_hex		(x,	1);
	create_insn	(0X14000D9C4);
	set_name	(0X14000D9C4,	"TempPathW_to_tree");
	create_insn	(x=0X14000D9D9);
	op_hex		(x,	1);
	set_cmt	(0X14000D9EB,	"nBufferLength",	0);
	set_cmt	(0X14000D9ED,	"lpBuffer",	0);
	create_insn	(x=0X14000D9F9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000DA13);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DA1A,	"hModule",	0);
	set_cmt	(0X14000DA35,	"hLibModule",	0);
	create_insn	(x=0X14000DA47);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DA4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DA54);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DA5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DA63);
	op_hex		(x,	1);
	make_array	(0X14000DA6A,	0X2);
	create_insn	(0X14000DA6C);
	set_name	(0X14000DA6C,	"DeleteFileW2");
	create_insn	(0X14000DA74);
	set_name	(0X14000DA74,	"DeleteFileW1");
	create_insn	(x=0X14000DA76);
	op_hex		(x,	1);
	create_insn	(x=0X14000DA82);
	op_hex		(x,	1);
	set_cmt	(0X14000DA87,	"dwFileAttributes",	0);
	set_cmt	(0X14000DA92,	"lpFileName",	0);
	create_insn	(0X14000DA9F);
	create_insn	(x=0X14000DAA1);
	op_hex		(x,	1);
	create_insn	(x=0X14000DAA8);
	op_stkvar	(x,	0);
	set_name	(0X14000DAA8,	"MyGetCurrentDirectoryW");
	create_insn	(x=0X14000DAAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DAB2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DAB8);
	op_hex		(x,	1);
	set_cmt	(0X14000DACA,	"nBufferLength",	0);
	set_cmt	(0X14000DACC,	"lpBuffer",	0);
	create_insn	(x=0X14000DAFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DB02);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DB0B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DB10);
	op_hex		(x,	1);
	make_array	(0X14000DB16,	0X2);
	create_insn	(x=0X14000DB18);
	op_stkvar	(x,	0);
	set_name	(0X14000DB18,	"GetKnownFolderPath");
	create_insn	(x=0X14000DB1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DB26);
	op_hex		(x,	1);
	create_insn	(x=0X14000DB4A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000DB5F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DB66,	"hModule",	0);
	create_insn	(x=0X14000DB7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DB80);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DB92,	"Source",	0);
	create_insn	(x=0X14000DB92);
	op_stkvar	(x,	1);
	set_cmt	(0X14000DB97,	"Destination",	0);
	create_insn	(x=0X14000DB9F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DBA6,	"Destination",	0);
	set_cmt	(0X14000DBAE,	"String",	0);
	set_cmt	(0X14000DBB6,	"pv",	0);
	create_insn	(x=0X14000DBB6);
	op_stkvar	(x,	1);
	set_cmt	(0X14000DBC4,	"hLibModule",	0);
	create_insn	(x=0X14000DBE2);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DBE9,	"Destination",	0);
	set_cmt	(0X14000DBF1,	"String",	0);
	create_insn	(0X14000DBFB);
	create_insn	(0X14000DC25);
	create_insn	(0X14000DC2C);
	create_insn	(0X14000DC33);
	create_insn	(0X14000DC3A);
	create_insn	(0X14000DC41);
	create_insn	(0X14000DC48);
	create_insn	(0X14000DC4F);
	create_insn	(0X14000DC56);
	create_insn	(x=0X14000DC6C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DC71);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DC7E);
	op_hex		(x,	1);
	create_insn	(x=0X14000DC88);
	op_hex		(x,	1);
	set_name	(0X14000DC88,	"MySetCurrentDirectoryW");
	create_insn	(0X14000DC9B);
	create_insn	(x=0X14000DC9D);
	op_hex		(x,	1);
	make_array	(0X14000DCA2,	0X2);
	create_insn	(0X14000DCA4);
	set_name	(0X14000DCA4,	"mySHGetFolderLocation");
	create_insn	(x=0X14000DCB0);
	op_hex		(x,	1);
	set_cmt	(0X14000DCBB,	"csidl",	0);
	set_cmt	(0X14000DCBF,	"dwFlags",	0);
	set_cmt	(0X14000DCC2,	"hToken",	0);
	set_cmt	(0X14000DCC5,	"hwnd",	0);
	set_cmt	(0X14000DCD7,	"pidl",	0);
	create_insn	(x=0X14000DCD7);
	op_stkvar	(x,	1);
	set_cmt	(0X14000DCDC,	"pszPath",	0);
	set_cmt	(0X14000DCE9,	"String",	0);
	set_cmt	(0X14000DD0A,	"pv",	0);
	create_insn	(x=0X14000DD0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DD1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DD23);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DD28);
	op_hex		(x,	1);
	make_array	(0X14000DD2E,	0X2);
	create_insn	(0X14000DD30);
	set_name	(0X14000DD30,	"fn_free_obj_0x60_0");
	create_insn	(x=0X14000DD32);
	op_hex		(x,	1);
	create_insn	(x=0X14000DD46);
	op_hex		(x,	1);
	create_insn	(0X14000DD50);
	create_insn	(x=0X14000DD5A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DD7B,	"lpMem",	0);
	set_cmt	(0X14000DD7F,	"hHeap",	0);
	set_cmt	(0X14000DD86,	"dwFlags",	0);
	set_cmt	(0X14000DD8E,	"hObject",	0);
	create_insn	(x=0X14000DDA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DDAB);
	op_hex		(x,	1);
	make_array	(0X14000DDB1,	0XF);
	create_insn	(0X14000DDC0);
	set_name	(0X14000DDC0,	"MyWriteFile");
	create_insn	(x=0X14000DDC2);
	op_hex		(x,	1);
	create_insn	(x=0X14000DDCB);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DDD8,	"lpBuffer",	0);
	set_cmt	(0X14000DDDC,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X14000DDDC);
	op_stkvar	(x,	1);
	set_cmt	(0X14000DDE1,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X14000DDE5,	"hFile",	0);
	set_cmt	(0X14000DDE8,	"lpOverlapped",	0);
	create_insn	(x=0X14000DDE8);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DDF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000DDFE);
	op_hex		(x,	1);
	create_insn	(0X14000DE04);
	create_insn	(x=0X14000DE06);
	op_hex		(x,	1);
	make_array	(0X14000DE0C,	0X4);
	create_insn	(0X14000DE10);
	set_name	(0X14000DE10,	"free_stru60_0");
	make_array	(0X14000DE1C,	0X4);
	create_insn	(x=0X14000DE20);
	op_hex		(x,	1);
	set_name	(0X14000DE20,	"init_g_stru_0x60_10");
	set_cmt	(0X14000DE24,	"int",	0);
	set_cmt	(0X14000DE29,	"__int64",	0);
	create_insn	(x=0X14000DE29);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14000DE30,	"int",	0);
	create_insn	(x=0X14000DE3F);
	op_hex		(x,	1);
	make_array	(0X14000DE44,	0XC);
	create_insn	(x=0X14000DE50);
	op_stkvar	(x,	0);
	set_name	(0X14000DE50,	"CreateFileW_0");
	create_insn	(x=0X14000DE55);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DE62);
	op_hex		(x,	1);
	create_insn	(x=0X14000DE7B);
	op_hex		(x,	1);
	create_insn	(x=0X14000DE8C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DEA9);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DEC9,	"dwShareMode",	0);
	create_insn	(x=0X14000DEC9);
	op_hex		(x,	1);
	set_cmt	(0X14000DECD,	"hTemplateFile",	0);
	create_insn	(x=0X14000DECD);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DED2,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000DED5,	"dwDesiredAccess",	0);
	set_cmt	(0X14000DEDA,	"lpFileName",	0);
	set_cmt	(0X14000DEDD,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000DEDD);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DEE5,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000DEE5);
	op_stkvar	(x,	0);
	create_insn	(0X14000DEFB);
	set_cmt	(0X14000DF13,	"dwShareMode",	0);
	create_insn	(x=0X14000DF13);
	op_hex		(x,	1);
	set_cmt	(0X14000DF17,	"hTemplateFile",	0);
	create_insn	(x=0X14000DF17);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF1C,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000DF1F,	"dwDesiredAccess",	0);
	set_cmt	(0X14000DF24,	"lpFileName",	0);
	set_cmt	(0X14000DF27,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000DF27);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF2F,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000DF2F);
	op_stkvar	(x,	0);
	create_insn	(0X14000DF42);
	create_insn	(x=0X14000DF5B);
	op_hex		(x,	1);
	set_cmt	(0X14000DF5F,	"hTemplateFile",	0);
	create_insn	(x=0X14000DF5F);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF64,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000DF67,	"dwShareMode",	0);
	set_cmt	(0X14000DF6A,	"dwDesiredAccess",	0);
	set_cmt	(0X14000DF6F,	"lpFileName",	0);
	set_cmt	(0X14000DF72,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000DF72);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF7A,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000DF7A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF8D,	"hTemplateFile",	0);
	create_insn	(x=0X14000DF8D);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DF92,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000DF95,	"dwShareMode",	0);
	set_cmt	(0X14000DF98,	"dwDesiredAccess",	0);
	set_cmt	(0X14000DF9D,	"lpFileName",	0);
	set_cmt	(0X14000DFA0,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000DFA0);
	op_stkvar	(x,	0);
	set_cmt	(0X14000DFA4,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000DFA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000DFB7);
	op_stkvar	(x,	1);
	set_cmt	(0X14000DFE1,	"hHeap",	0);
	set_cmt	(0X14000DFE8,	"dwBytes",	0);
	set_cmt	(0X14000DFEB,	"dwFlags",	0);
	create_insn	(0X14000DFF9);
	create_insn	(x=0X14000E00D);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E036,	"lpDistanceToMoveHigh",	0);
	create_insn	(x=0X14000E036);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E03B,	"dwMoveMethod",	0);
	set_cmt	(0X14000E03E,	"lDistanceToMove",	0);
	set_cmt	(0X14000E040,	"hFile",	0);
	create_insn	(x=0X14000E043);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E074);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E07F);
	op_stkvar	(x,	1);
	create_insn	(0X14000E098);
	make_array	(0X14000E09D,	0X3);
	create_insn	(x=0X14000E0A0);
	op_stkvar	(x,	0);
	set_name	(0X14000E0A0,	"MyCreateFileW");
	create_insn	(x=0X14000E0A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E0AA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E0B1);
	op_hex		(x,	1);
	set_cmt	(0X14000E0D8,	"hTemplateFile",	0);
	create_insn	(x=0X14000E0D8);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E0DD,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000E0E0,	"dwShareMode",	0);
	set_cmt	(0X14000E0E3,	"dwDesiredAccess",	0);
	set_cmt	(0X14000E0E8,	"lpFileName",	0);
	set_cmt	(0X14000E0EB,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000E0EB);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E0F3,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000E0F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E0FB);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E10F,	"hTemplateFile",	0);
	create_insn	(x=0X14000E10F);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E114,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000E117,	"dwShareMode",	0);
	set_cmt	(0X14000E11A,	"dwDesiredAccess",	0);
	set_cmt	(0X14000E11F,	"lpFileName",	0);
	set_cmt	(0X14000E122,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000E122);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E126,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000E126);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E14D,	"hHeap",	0);
	set_cmt	(0X14000E154,	"dwBytes",	0);
	set_cmt	(0X14000E157,	"dwFlags",	0);
	create_insn	(0X14000E165);
	create_insn	(x=0X14000E1AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E1B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E1BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E1C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E1C5);
	op_hex		(x,	1);
	create_insn	(0X14000E1CC);
	make_array	(0X14000E1D1,	0XF);
	set_cmt	(0X14000E1E0,	"lpSecurityAttributes",	0);
	create_insn	(0X14000E1E0);
	set_name	(0X14000E1E0,	"CreateFileW_CREATE_ALWAYS");
	set_cmt	(0X14000E1E3,	"dwShareMode",	0);
	make_array	(0X14000E1EE,	0X2);
	create_insn	(x=0X14000E1F0);
	op_stkvar	(x,	0);
	set_name	(0X14000E1F0,	"INLINED_MyCreateFileW");
	create_insn	(x=0X14000E1F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E1FA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E200);
	op_hex		(x,	1);
	set_cmt	(0X14000E227,	"hTemplateFile",	0);
	create_insn	(x=0X14000E227);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E22C,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000E22F,	"dwShareMode",	0);
	set_cmt	(0X14000E232,	"dwDesiredAccess",	0);
	set_cmt	(0X14000E237,	"lpFileName",	0);
	set_cmt	(0X14000E23A,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000E23A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E242,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000E242);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E267,	"dwBytes",	0);
	set_cmt	(0X14000E26A,	"hHeap",	0);
	set_cmt	(0X14000E271,	"dwFlags",	0);
	create_insn	(0X14000E27F);
	create_insn	(x=0X14000E2C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E2CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E2D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E2DA);
	op_hex		(x,	1);
	create_insn	(x=0X14000E2E0);
	op_stkvar	(x,	0);
	set_name	(0X14000E2E0,	"INLINED_MyOpenFileExisting");
	create_insn	(x=0X14000E2E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E2EA);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E2F0);
	op_hex		(x,	1);
	set_cmt	(0X14000E317,	"hTemplateFile",	0);
	create_insn	(x=0X14000E317);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E31C,	"lpSecurityAttributes",	0);
	set_cmt	(0X14000E31F,	"dwShareMode",	0);
	set_cmt	(0X14000E322,	"dwDesiredAccess",	0);
	set_cmt	(0X14000E327,	"lpFileName",	0);
	set_cmt	(0X14000E32A,	"dwFlagsAndAttributes",	0);
	create_insn	(x=0X14000E32A);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E332,	"dwCreationDisposition",	0);
	create_insn	(x=0X14000E332);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E357,	"dwBytes",	0);
	set_cmt	(0X14000E35A,	"hHeap",	0);
	set_cmt	(0X14000E361,	"dwFlags",	0);
	create_insn	(0X14000E36F);
	create_insn	(x=0X14000E3BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E3C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E3CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E3D0);
	op_hex		(x,	1);
	make_array	(0X14000E3D6,	0XA);
	set_cmt	(0X14000E3E0,	"lpSecurityAttributes",	0);
	create_insn	(0X14000E3E0);
	set_name	(0X14000E3E0,	"OpenExistingFileW");
	set_cmt	(0X14000E3E3,	"dwShareMode",	0);
	make_array	(0X14000E3EE,	0X2);
	create_insn	(0X14000E3F0);
	set_name	(0X14000E3F0,	"MyWriteFileText_UTF8");
	create_insn	(x=0X14000E3F2);
	op_hex		(x,	1);
	create_insn	(x=0X14000E3F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E41A);
	op_hex		(x,	1);
	create_insn	(x=0X14000E445);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E44B);
	op_hex		(x,	1);
	create_insn	(0X14000E451);
	set_cmt	(0X14000E45D,	"hFile",	0);
	set_cmt	(0X14000E460,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X14000E464,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X14000E464);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E469,	"lpOverlapped",	0);
	create_insn	(x=0X14000E469);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E478);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E47D);
	op_hex		(x,	1);
	create_insn	(0X14000E483);
	create_insn	(x=0X14000E48E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E496);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E4AD,	"nNumberOfBytesToWrite",	0);
	create_insn	(x=0X14000E4AD);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E4B2,	"lpBuffer",	0);
	create_insn	(x=0X14000E4BF);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E4C5,	"hFile",	0);
	create_insn	(0X14000E4C5);
	set_cmt	(0X14000E4C8,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X14000E4C8);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E4CD,	"lpOverlapped",	0);
	create_insn	(x=0X14000E4CD);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E4DC,	"hHeap",	0);
	set_cmt	(0X14000E4E3,	"lpMem",	0);
	set_cmt	(0X14000E4E6,	"dwFlags",	0);
	create_insn	(x=0X14000E4EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E4F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E4F8);
	op_hex		(x,	1);
	make_array	(0X14000E4FE,	0X2);
	create_insn	(0X14000E500);
	set_name	(0X14000E500,	"MyWriteFileText_UTF8_AT");
	create_insn	(x=0X14000E502);
	op_hex		(x,	1);
	create_insn	(x=0X14000E527);
	op_hex		(x,	1);
	create_insn	(x=0X14000E531);
	op_hex		(x,	1);
	make_array	(0X14000E537,	0X9);
	create_insn	(x=0X14000E540);
	op_stkvar	(x,	0);
	set_name	(0X14000E540,	"INLINED_MyWriteFileText2");
	create_insn	(x=0X14000E546);
	op_hex		(x,	1);
	create_insn	(x=0X14000E56D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E572);
	op_hex		(x,	1);
	create_insn	(x=0X14000E57C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E581);
	op_hex		(x,	1);
	make_array	(0X14000E587,	0X9);
	create_insn	(x=0X14000E590);
	op_stkvar	(x,	0);
	set_name	(0X14000E590,	"MyWriteFile3");
	create_insn	(x=0X14000E595);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E59B);
	op_hex		(x,	1);
	create_insn	(x=0X14000E5A7);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E5C9,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X14000E5CC,	"lpBuffer",	0);
	create_insn	(x=0X14000E5E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E5E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E5EB);
	op_hex		(x,	1);
	set_cmt	(0X14000E5F1,	"hFile",	0);
	create_insn	(0X14000E5F1);
	set_cmt	(0X14000E5F4,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X14000E5F4);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E5F9,	"lpOverlapped",	0);
	create_insn	(x=0X14000E5F9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E604);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E608);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E610);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E615);
	op_hex		(x,	1);
	make_array	(0X14000E61B,	0X5);
	create_insn	(x=0X14000E620);
	op_stkvar	(x,	0);
	set_name	(0X14000E620,	"MyWriteFile2");
	create_insn	(x=0X14000E628);
	op_hex		(x,	1);
	create_insn	(x=0X14000E637);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E64D,	"hFile",	0);
	set_cmt	(0X14000E650,	"dwMoveMethod",	0);
	set_cmt	(0X14000E656,	"lpDistanceToMoveHigh",	0);
	create_insn	(x=0X14000E656);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E65D,	"lDistanceToMove",	0);
	set_cmt	(0X14000E688,	"void *",	0);
	set_cmt	(0X14000E699,	"Size",	0);
	set_cmt	(0X14000E69C,	"Src",	0);
	create_insn	(x=0X14000E6AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E6AF);
	op_hex		(x,	1);
	create_insn	(0X14000E6B7);
	create_insn	(x=0X14000E6C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E6C6);
	op_hex		(x,	1);
	create_insn	(0X14000E6CE);
	create_insn	(x=0X14000E6DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E6DF);
	op_hex		(x,	1);
	create_insn	(0X14000E6E7);
	create_insn	(x=0X14000E6F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E6F7);
	op_hex		(x,	1);
	create_insn	(0X14000E6FF);
	set_cmt	(0X14000E70A,	"Src",	0);
	set_cmt	(0X14000E711,	"hFile",	0);
	set_cmt	(0X14000E714,	"lpNumberOfBytesWritten",	0);
	create_insn	(x=0X14000E714);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E719,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X14000E71C,	"lpOverlapped",	0);
	create_insn	(x=0X14000E71C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E727);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E72C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E731);
	op_hex		(x,	1);
	create_insn	(0X14000E739);
	set_cmt	(0X14000E73C,	"Size",	0);
	set_cmt	(0X14000E742,	"void *",	0);
	create_insn	(x=0X14000E751);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E756);
	op_hex		(x,	1);
	create_insn	(0X14000E75E);
	create_insn	(x=0X14000E761);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E766);
	op_hex		(x,	1);
	make_array	(0X14000E76E,	0X2);
	create_insn	(0X14000E770);
	set_name	(0X14000E770,	"MyWideCharToMultiByte");
	create_insn	(x=0X14000E781);
	op_hex		(x,	1);
	set_cmt	(0X14000E796,	"lpWideCharStr",	0);
	set_cmt	(0X14000E79D,	"cchWideChar",	0);
	create_insn	(x=0X14000E79D);
	op_hex		(x,	1);
	set_cmt	(0X14000E7A1,	"dwFlags",	0);
	set_cmt	(0X14000E7B9,	"hHeap",	0);
	set_cmt	(0X14000E7C0,	"dwBytes",	0);
	set_cmt	(0X14000E7C3,	"dwFlags",	0);
	create_insn	(x=0X14000E7C5);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E7DA,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X14000E7DA);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E7DF,	"lpDefaultChar",	0);
	create_insn	(x=0X14000E7DF);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E7E4,	"cbMultiByte",	0);
	create_insn	(x=0X14000E7E4);
	op_stkvar	(x,	0);
	set_cmt	(0X14000E7E8,	"cchWideChar",	0);
	create_insn	(x=0X14000E7E8);
	op_hex		(x,	1);
	set_cmt	(0X14000E7EC,	"lpWideCharStr",	0);
	set_cmt	(0X14000E7EF,	"CodePage",	0);
	set_cmt	(0X14000E7F1,	"dwFlags",	0);
	set_cmt	(0X14000E7F3,	"lpMultiByteStr",	0);
	create_insn	(x=0X14000E7F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E804);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E809);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E80E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E813);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E818);
	op_hex		(x,	1);
	create_insn	(0X14000E81F);
	create_insn	(0X14000E824);
	set_name	(0X14000E824,	"md6_Stuff");
	make_array	(0X14000E831,	0X3);
	create_insn	(0X14000E834);
	set_name	(0X14000E834,	"md6_dtor");
	create_insn	(x=0X14000E848);
	op_stkvar	(x,	0);
	set_name	(0X14000E848,	"md6_ctor");
	create_insn	(x=0X14000E84E);
	op_hex		(x,	1);
	set_cmt	(0X14000E852,	"hHeap",	0);
	set_cmt	(0X14000E85B,	"dwBytes",	0);
	set_cmt	(0X14000E861,	"dwFlags",	0);
	create_insn	(x=0X14000E880);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E885);
	op_hex		(x,	1);
	create_insn	(x=0X14000E88C);
	op_hex		(x,	1);
	set_name	(0X14000E88C,	"ctor_md6_VT");
	create_insn	(x=0X14000E89F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E8AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E8B5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E8C0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E8D0);
	op_hex		(x,	1);
	make_array	(0X14000E8D5,	0X3);
	create_insn	(0X14000E8D8);
	set_name	(0X14000E8D8,	"md6_Update");
	make_array	(0X14000E8E1,	0X3);
	create_insn	(x=0X14000E8E4);
	op_stkvar	(x,	0);
	set_name	(0X14000E8E4,	"SHA1Final_");
	create_insn	(x=0X14000E8E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000E8F3);
	op_hex		(x,	1);
	create_insn	(x=0X14000E902);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E90F);
	op_hex		(x,	1);
	create_insn	(x=0X14000E917);
	op_hex		(x,	1);
	create_insn	(x=0X14000E936);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E957);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14000E97E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000E997);
	op_hex		(x,	1);
	create_insn	(x=0X14000E9A2);
	op_hex		(x,	1);
	create_insn	(x=0X14000E9A6);
	op_hex		(x,	1);
	set_cmt	(0X14000E9BE,	"void *",	0);
	set_cmt	(0X14000E9C2,	"Val",	0);
	set_cmt	(0X14000E9C4,	"Size",	0);
	set_cmt	(0X14000E9CC,	"Size",	0);
	set_cmt	(0X14000E9D0,	"Val",	0);
	set_cmt	(0X14000E9D2,	"void *",	0);
	set_cmt	(0X14000E9DA,	"Size",	0);
	set_cmt	(0X14000E9DD,	"Val",	0);
	set_cmt	(0X14000E9DF,	"void *",	0);
	set_cmt	(0X14000E9E7,	"void *",	0);
	create_insn	(x=0X14000E9E7);
	op_stkvar	(x,	1);
	set_cmt	(0X14000E9EC,	"Size",	0);
	set_cmt	(0X14000E9EF,	"Val",	0);
	set_cmt	(0X14000E9F6,	"void *",	0);
	set_cmt	(0X14000E9FA,	"Size",	0);
	set_cmt	(0X14000E9FD,	"Val",	0);
	create_insn	(x=0X14000EA04);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EA09);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EA0E);
	op_hex		(x,	1);
	create_insn	(x=0X14000EA18);
	op_hex		(x,	1);
	set_name	(0X14000EA18,	"md6_Init");
	create_insn	(x=0X14000EA1C);
	op_hex		(x,	1);
	make_array	(0X14000EA46,	0X2);
	create_insn	(x=0X14000EA48);
	op_stkvar	(x,	0);
	set_name	(0X14000EA48,	"SHA1Transform");
	create_insn	(x=0X14000EA4D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EA5D);
	op_hex		(x,	1);
	create_insn	(x=0X14000EA64);
	op_stkvar	(x,	0);
	set_cmt	(0X14000EA71,	"Size",	0);
	set_cmt	(0X14000EA77,	"void *",	0);
	create_insn	(0X14000EA81);
	create_insn	(x=0X14000EA84);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EAA0);
	op_hex		(x,	1);
	create_insn	(x=0X14000EAAC);
	op_hex		(x,	1);
	create_insn	(x=0X14000EAC8);
	op_hex		(x,	1);
	create_insn	(x=0X14000EAD9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EAE0);
	op_hex		(x,	1);
	create_insn	(x=0X14000EAF5);
	op_hex		(x,	1);
	create_insn	(x=0X14000EAFE);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB06);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB15);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EB1C);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB2F);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB38);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB41);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB4F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EB55);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB6B);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB72);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB7E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EB86);
	op_hex		(x,	1);
	create_insn	(x=0X14000EB96);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBAE);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBB7);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBC1);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBCB);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBCE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EBEF);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBF5);
	op_hex		(x,	1);
	create_insn	(x=0X14000EBFD);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC04);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EC08);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC1D);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC26);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC3A);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EC46);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC5D);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC66);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC79);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EC82);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC92);
	op_hex		(x,	1);
	create_insn	(x=0X14000EC96);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECB7);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ECBC);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECC5);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECD9);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECE1);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECEB);
	op_hex		(x,	1);
	create_insn	(x=0X14000ECF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ED01);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED0C);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED22);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED2B);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED3C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ED41);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED4C);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED5B);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED61);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED6D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000ED72);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED8A);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED91);
	op_hex		(x,	1);
	create_insn	(x=0X14000ED9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EDAE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EDB3);
	op_hex		(x,	1);
	create_insn	(x=0X14000EDCC);
	op_hex		(x,	1);
	create_insn	(x=0X14000EDD5);
	op_hex		(x,	1);
	create_insn	(x=0X14000EDE1);
	op_hex		(x,	1);
	create_insn	(x=0X14000EDF7);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE09);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EE11);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE1C);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE22);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EE2D);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE36);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE44);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EE4A);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE58);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EE62);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE6A);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE73);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE79);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE89);
	op_hex		(x,	1);
	create_insn	(x=0X14000EE8F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EE93);
	op_hex		(x,	1);
	create_insn	(x=0X14000EEA2);
	op_hex		(x,	1);
	create_insn	(x=0X14000EEA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EEB6);
	op_hex		(x,	1);
	create_insn	(x=0X14000EEC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EEC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EED1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EEDB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EEE5);
	op_hex		(x,	1);
	create_insn	(x=0X14000EEF0);
	op_hex		(x,	1);
	create_insn	(x=0X14000EEF5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EEFC);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF06);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF13);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF18);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF26);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF2D);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF33);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF3B);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF47);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF61);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF66);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF78);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF83);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EF8F);
	op_hex		(x,	1);
	create_insn	(x=0X14000EF91);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000EFA8);
	op_hex		(x,	1);
	create_insn	(x=0X14000EFAF);
	op_hex		(x,	1);
	create_insn	(x=0X14000EFBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFBF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFCA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFCE);
	op_hex		(x,	1);
	create_insn	(x=0X14000EFD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFD9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFE6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFEE);
	op_hex		(x,	1);
	create_insn	(x=0X14000EFF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000EFF7);
	op_hex		(x,	1);
	create_insn	(x=0X14000EFFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F00B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F00F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F016);
	op_hex		(x,	1);
	create_insn	(x=0X14000F019);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F034);
	op_hex		(x,	1);
	create_insn	(x=0X14000F03F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F048);
	op_hex		(x,	1);
	create_insn	(x=0X14000F05C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F067);
	op_hex		(x,	1);
	create_insn	(x=0X14000F073);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F07E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F08C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F09E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F0A3);
	op_hex		(x,	1);
	create_insn	(x=0X14000F0AC);
	op_hex		(x,	1);
	create_insn	(x=0X14000F0B5);
	op_hex		(x,	1);
	create_insn	(x=0X14000F0CB);
	op_hex		(x,	1);
	create_insn	(x=0X14000F0CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F0D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F0DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F0E1);
	op_hex		(x,	1);
	create_insn	(x=0X14000F0E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F0ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F0F7);
	op_hex		(x,	1);
	create_insn	(x=0X14000F106);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F10D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F111);
	op_hex		(x,	1);
	create_insn	(x=0X14000F117);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F11B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F122);
	op_hex		(x,	1);
	create_insn	(x=0X14000F127);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F12E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F138);
	op_hex		(x,	1);
	create_insn	(x=0X14000F143);
	op_hex		(x,	1);
	create_insn	(x=0X14000F147);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F14E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F154);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F15A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F16B);
	op_hex		(x,	1);
	create_insn	(x=0X14000F172);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F17F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F186);
	op_hex		(x,	1);
	create_insn	(x=0X14000F18A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F18E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F195);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F19A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1A0);
	op_hex		(x,	1);
	create_insn	(x=0X14000F1A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F1AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1B6);
	op_hex		(x,	1);
	create_insn	(x=0X14000F1C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1CA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1CE);
	op_hex		(x,	1);
	create_insn	(x=0X14000F1D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1DB);
	op_hex		(x,	1);
	create_insn	(x=0X14000F1DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F1E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F1FB);
	op_hex		(x,	1);
	create_insn	(x=0X14000F203);
	op_hex		(x,	1);
	create_insn	(x=0X14000F20C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F210);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F215);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F227);
	op_hex		(x,	1);
	create_insn	(x=0X14000F22F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F232);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F236);
	op_hex		(x,	1);
	create_insn	(x=0X14000F244);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F24B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F250);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F256);
	op_hex		(x,	1);
	create_insn	(x=0X14000F25A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F269);
	op_hex		(x,	1);
	create_insn	(x=0X14000F26D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F275);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F27B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F288);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F28D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F294);
	op_hex		(x,	1);
	create_insn	(x=0X14000F299);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F2A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2AB);
	op_hex		(x,	1);
	create_insn	(x=0X14000F2B8);
	op_hex		(x,	1);
	create_insn	(x=0X14000F2C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2D7);
	op_hex		(x,	1);
	create_insn	(x=0X14000F2DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F2E6);
	op_hex		(x,	1);
	create_insn	(x=0X14000F2EC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F2F8);
	op_hex		(x,	1);
	create_insn	(x=0X14000F306);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F30E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F315);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F32B);
	op_hex		(x,	1);
	create_insn	(x=0X14000F332);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F33A);
	op_hex		(x,	1);
	create_insn	(x=0X14000F347);
	op_hex		(x,	1);
	create_insn	(x=0X14000F34D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F355);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F35C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F361);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F372);
	op_hex		(x,	1);
	create_insn	(x=0X14000F37B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F38D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F393);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F398);
	op_hex		(x,	1);
	create_insn	(x=0X14000F39B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F3A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F3B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F3BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F3C1);
	op_hex		(x,	1);
	create_insn	(x=0X14000F3C9);
	op_hex		(x,	1);
	create_insn	(x=0X14000F3D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F3DE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F3EA);
	op_hex		(x,	1);
	create_insn	(x=0X14000F3EC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F3F0);
	op_hex		(x,	1);
	create_insn	(x=0X14000F3F6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F410);
	op_hex		(x,	1);
	create_insn	(x=0X14000F41F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F423);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F428);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F43C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F445);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F44D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F458);
	op_hex		(x,	1);
	create_insn	(x=0X14000F45C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F46B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F472);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F478);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F47C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F484);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F48E);
	op_hex		(x,	1);
	create_insn	(x=0X14000F493);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F497);
	op_hex		(x,	1);
	create_insn	(x=0X14000F49F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F4AC);
	op_hex		(x,	1);
	create_insn	(x=0X14000F4B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F4B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F4DD);
	op_hex		(x,	1);
	create_insn	(x=0X14000F4E5);
	op_hex		(x,	1);
	create_insn	(x=0X14000F4E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F4FE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F515);
	op_hex		(x,	1);
	create_insn	(x=0X14000F519);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F51D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F52F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F533);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F53E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F54F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F556);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F565);
	op_hex		(x,	1);
	create_insn	(x=0X14000F568);
	op_hex		(x,	1);
	create_insn	(x=0X14000F573);
	op_hex		(x,	1);
	create_insn	(x=0X14000F581);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F586);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F59D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F5A2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F5AE);
	op_hex		(x,	1);
	create_insn	(x=0X14000F5B7);
	op_hex		(x,	1);
	create_insn	(x=0X14000F5BB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F5C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F5DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F5EA);
	op_hex		(x,	1);
	create_insn	(x=0X14000F5F3);
	op_hex		(x,	1);
	create_insn	(x=0X14000F603);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F60A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F60E);
	op_hex		(x,	1);
	create_insn	(x=0X14000F612);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F616);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F61B);
	op_hex		(x,	1);
	create_insn	(x=0X14000F62D);
	op_hex		(x,	1);
	create_insn	(x=0X14000F630);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F63B);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F647);
	op_hex		(x,	1);
	create_insn	(x=0X14000F64A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F64E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F65F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F669);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F66D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F675);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F679);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F67D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F685);
	op_hex		(x,	1);
	create_insn	(x=0X14000F68D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F697);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F69C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F6A4);
	op_hex		(x,	1);
	create_insn	(x=0X14000F6AC);
	op_hex		(x,	1);
	create_insn	(x=0X14000F6B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F6C6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F6D4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F6DC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F6E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F6E4);
	op_hex		(x,	1);
	create_insn	(x=0X14000F6E7);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F6F3);
	op_hex		(x,	1);
	create_insn	(x=0X14000F6FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F714);
	op_hex		(x,	1);
	create_insn	(x=0X14000F721);
	op_hex		(x,	1);
	create_insn	(x=0X14000F737);
	op_hex		(x,	1);
	create_insn	(x=0X14000F73F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F75B);
	op_hex		(x,	1);
	create_insn	(x=0X14000F761);
	op_hex		(x,	1);
	create_insn	(x=0X14000F765);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F773);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F778);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F786);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F79D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7A5);
	op_hex		(x,	1);
	create_insn	(x=0X14000F7A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7AE);
	op_hex		(x,	1);
	create_insn	(x=0X14000F7B7);
	op_hex		(x,	1);
	create_insn	(x=0X14000F7BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F7D9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F7F7);
	op_hex		(x,	1);
	create_insn	(x=0X14000F801);
	op_hex		(x,	1);
	create_insn	(x=0X14000F80A);
	op_hex		(x,	1);
	create_insn	(x=0X14000F811);
	op_hex		(x,	1);
	create_insn	(x=0X14000F817);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F81F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F831);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F83F);
	op_hex		(x,	1);
	create_insn	(x=0X14000F853);
	op_hex		(x,	1);
	create_insn	(x=0X14000F85D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F862);
	op_hex		(x,	1);
	create_insn	(x=0X14000F868);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F87E);
	op_hex		(x,	1);
	create_insn	(x=0X14000F884);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F88E);
	op_hex		(x,	1);
	create_insn	(x=0X14000F892);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F898);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F89D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8C5);
	op_hex		(x,	1);
	create_insn	(x=0X14000F8D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F8EA);
	op_hex		(x,	1);
	create_insn	(x=0X14000F901);
	op_hex		(x,	1);
	create_insn	(x=0X14000F904);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F90C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F90F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F916);
	op_hex		(x,	1);
	create_insn	(x=0X14000F924);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F928);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F92F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F937);
	op_hex		(x,	1);
	create_insn	(x=0X14000F93A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F941);
	op_hex		(x,	1);
	create_insn	(x=0X14000F944);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F94C);
	op_hex		(x,	1);
	create_insn	(x=0X14000F96A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000F979);
	op_hex		(x,	1);
	create_insn	(x=0X14000F986);
	op_hex		(x,	1);
	create_insn	(x=0X14000F991);
	op_hex		(x,	1);
	create_insn	(x=0X14000F994);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F9A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F9AB);
	op_hex		(x,	1);
	create_insn	(x=0X14000F9B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F9C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F9CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000F9E4);
	op_hex		(x,	1);
	create_insn	(x=0X14000F9ED);
	op_hex		(x,	1);
	create_insn	(x=0X14000F9F6);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA00);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA20);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA24);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA2B);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA37);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA3D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA48);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FA4D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FA51);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA56);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FA5B);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA5D);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FA64);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA67);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FA80);
	op_hex		(x,	1);
	create_insn	(x=0X14000FA8D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAA1);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAAE);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAB1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FABA);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAC9);
	op_hex		(x,	1);
	create_insn	(x=0X14000FACF);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAD8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAE0);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FAE5);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAEC);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAF1);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FAF5);
	op_hex		(x,	1);
	create_insn	(x=0X14000FAFF);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FB08);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB10);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB22);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB25);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB36);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB48);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB4B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB52);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB5A);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB68);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FB7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FB83);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB8C);
	op_hex		(x,	1);
	create_insn	(x=0X14000FB9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FBB1);
	op_hex		(x,	1);
	create_insn	(x=0X14000FBBE);
	op_hex		(x,	1);
	create_insn	(x=0X14000FBC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FBD0);
	op_hex		(x,	1);
	create_insn	(x=0X14000FBD3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FBDD);
	op_hex		(x,	1);
	create_insn	(x=0X14000FBEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FBF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC03);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FC21);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC35);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC38);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC40);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC4F);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC5F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC6D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC70);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC75);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC7F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC83);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC8B);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC92);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC97);
	op_hex		(x,	1);
	create_insn	(x=0X14000FC9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FC9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FCA5);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FCB1);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCC3);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FCCB);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCD4);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCEA);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCF0);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCF3);
	op_hex		(x,	1);
	create_insn	(x=0X14000FCF6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD05);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD0D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD26);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD29);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD30);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD33);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD3B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD45);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD4D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD62);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD66);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD7A);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD81);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD86);
	op_hex		(x,	1);
	create_insn	(x=0X14000FD8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD92);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD99);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FD9E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FDA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FDB3);
	op_hex		(x,	1);
	create_insn	(x=0X14000FDB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FDBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FDC0);
	op_hex		(x,	1);
	create_insn	(x=0X14000FDC8);
	op_hex		(x,	1);
	create_insn	(x=0X14000FDCD);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FDE3);
	op_hex		(x,	1);
	create_insn	(x=0X14000FDE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FDF9);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE02);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE13);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE18);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE1D);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE24);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE2B);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE2E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE41);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FE54);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE5D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE66);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE70);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE7A);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE82);
	op_hex		(x,	1);
	create_insn	(x=0X14000FE8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FEA6);
	op_hex		(x,	1);
	create_insn	(x=0X14000FEB2);
	op_hex		(x,	1);
	create_insn	(x=0X14000FEB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FED1);
	op_hex		(x,	1);
	make_array	(0X14000FEE1,	0X3);
	create_insn	(x=0X14000FEE4);
	op_stkvar	(x,	0);
	set_name	(0X14000FEE4,	"SHA1Update");
	create_insn	(x=0X14000FEE9);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FEEE);
	op_stkvar	(x,	0);
	create_insn	(x=0X14000FEF8);
	op_hex		(x,	1);
	create_insn	(0X14000FF11);
	create_insn	(x=0X14000FF1D);
	op_hex		(x,	1);
	create_insn	(x=0X14000FF24);
	op_hex		(x,	1);
	create_insn	(x=0X14000FF27);
	op_hex		(x,	1);
	create_insn	(x=0X14000FF38);
	op_hex		(x,	1);
	set_cmt	(0X14000FF56,	"void *",	0);
	set_cmt	(0X14000FF59,	"Size",	0);
	create_insn	(0X14000FF76);
	create_insn	(0X14000FF97);
	set_cmt	(0X14000FFA4,	"void *",	0);
	set_cmt	(0X14000FFA7,	"Size",	0);
	set_cmt	(0X14000FFAA,	"Src",	0);
	create_insn	(x=0X14000FFAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FFB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FFB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X14000FFBC);
	op_hex		(x,	1);
	make_array	(0X14000FFCA,	0X2);
	create_insn	(0X14000FFCC);
	set_name	(0X14000FFCC,	"md5_stuff");
	make_array	(0X14000FFD9,	0X3);
	create_insn	(0X14000FFDC);
	set_name	(0X14000FFDC,	"md5_dtor");
	create_insn	(0X14000FFF0);
	set_name	(0X14000FFF0,	"md5_ctor");
	create_insn	(x=0X14000FFF2);
	op_hex		(x,	1);
	set_cmt	(0X14000FFF6,	"hHeap",	0);
	set_cmt	(0X14000FFFD,	"dwFlags",	0);
	set_cmt	(0X14000FFFF,	"dwBytes",	0);
	create_insn	(x=0X140010020);
	op_hex		(x,	1);
	make_array	(0X140010026,	0X2);
	create_insn	(x=0X140010028);
	op_hex		(x,	1);
	set_name	(0X140010028,	"ctor_md5_VT");
	create_insn	(x=0X14001003B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010046);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010051);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14001005C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14001006C);
	op_hex		(x,	1);
	make_array	(0X140010071,	0X3);
	create_insn	(0X140010074);
	set_name	(0X140010074,	"md5_Update");
	make_array	(0X14001007D,	0X3);
	create_insn	(0X140010080);
	set_name	(0X140010080,	"INLINED_sub_140010080");
	create_insn	(x=0X140010092);
	op_hex		(x,	1);
	create_insn	(x=0X1400100A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400100AD);
	op_hex		(x,	1);
	create_insn	(x=0X1400100B6);
	op_hex		(x,	1);
	create_insn	(0X1400100C8);
	set_name	(0X1400100C8,	"INLINED_sub_1400100C8");
	create_insn	(x=0X1400100D7);
	op_hex		(x,	1);
	make_array	(0X14001010D,	0X3);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	create_insn	(x=0X140010110);
	op_stkvar	(x,	0);
	set_name	(0X140010110,	"md5_stuff_");
	create_insn	(x=0X140010115);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001011B);
	op_hex		(x,	1);
	create_insn	(x=0X14001012E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001016C);
	op_hex		(x,	1);
	create_insn	(x=0X14001016F);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010176);
	op_hex		(x,	1);
	create_insn	(x=0X14001018D);
	op_stkvar	(x,	1);
	set_cmt	(0X1400101CF,	"Val",	0);
	set_cmt	(0X1400101D1,	"void *",	0);
	set_cmt	(0X1400101D4,	"Size",	0);
	create_insn	(x=0X1400101D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400101DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400101E2);
	op_hex		(x,	1);
	create_insn	(x=0X1400101EC);
	op_hex		(x,	1);
	set_name	(0X1400101EC,	"md5_Init");
	create_insn	(x=0X1400101F0);
	op_hex		(x,	1);
	create_insn	(x=0X140010210);
	op_stkvar	(x,	0);
	set_name	(0X140010210,	"md5_Step");
	create_insn	(x=0X140010215);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010228);
	op_hex		(x,	1);
	create_insn	(x=0X14001023C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010252);
	op_hex		(x,	1);
	create_insn	(x=0X14001025B);
	op_hex		(x,	1);
	create_insn	(x=0X140010264);
	op_hex		(x,	1);
	create_insn	(x=0X140010269);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001029C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400102A1);
	op_hex		(x,	1);
	create_insn	(x=0X1400102B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400102BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400102DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400102E5);
	op_hex		(x,	1);
	create_insn	(x=0X140010302);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010308);
	op_hex		(x,	1);
	create_insn	(x=0X140010326);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001032C);
	op_hex		(x,	1);
	create_insn	(x=0X140010340);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010345);
	op_hex		(x,	1);
	create_insn	(x=0X14001035B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010361);
	op_hex		(x,	1);
	create_insn	(x=0X140010370);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010374);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010378);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001037C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010395);
	op_hex		(x,	1);
	create_insn	(x=0X1400103B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400103BC);
	op_hex		(x,	1);
	create_insn	(x=0X1400103DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400103E2);
	op_hex		(x,	1);
	create_insn	(x=0X14001040A);
	op_hex		(x,	1);
	create_insn	(x=0X140010422);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010428);
	op_hex		(x,	1);
	create_insn	(x=0X140010444);
	op_hex		(x,	1);
	create_insn	(x=0X14001045C);
	op_hex		(x,	1);
	create_insn	(x=0X14001046E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010478);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010489);
	op_hex		(x,	1);
	create_insn	(x=0X1400104AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400104CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400104D5);
	op_hex		(x,	1);
	create_insn	(x=0X1400104FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010501);
	op_hex		(x,	1);
	create_insn	(x=0X140010517);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010524);
	op_hex		(x,	1);
	create_insn	(x=0X14001053B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010546);
	op_hex		(x,	1);
	create_insn	(x=0X140010556);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010563);
	op_hex		(x,	1);
	create_insn	(x=0X140010581);
	op_hex		(x,	1);
	create_insn	(x=0X1400105AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400105C7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400105D1);
	op_hex		(x,	1);
	create_insn	(x=0X1400105ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400105FA);
	op_hex		(x,	1);
	create_insn	(x=0X140010613);
	op_hex		(x,	1);
	create_insn	(x=0X140010633);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001063A);
	op_hex		(x,	1);
	create_insn	(x=0X14001064C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010659);
	op_hex		(x,	1);
	create_insn	(x=0X14001066B);
	op_hex		(x,	1);
	create_insn	(x=0X14001068F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010699);
	op_hex		(x,	1);
	create_insn	(x=0X1400106B2);
	op_hex		(x,	1);
	create_insn	(x=0X1400106D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400106E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400106EE);
	op_hex		(x,	1);
	create_insn	(x=0X140010702);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010708);
	op_hex		(x,	1);
	create_insn	(x=0X14001071F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010725);
	op_hex		(x,	1);
	create_insn	(x=0X140010747);
	op_hex		(x,	1);
	create_insn	(x=0X140010754);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001075A);
	op_hex		(x,	1);
	create_insn	(x=0X140010764);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010769);
	op_hex		(x,	1);
	create_insn	(x=0X140010794);
	op_hex		(x,	1);
	create_insn	(x=0X1400107B3);
	op_hex		(x,	1);
	create_insn	(x=0X1400107CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400107D7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400107DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400107FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010802);
	op_hex		(x,	1);
	create_insn	(x=0X140010818);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001081D);
	op_hex		(x,	1);
	create_insn	(x=0X140010825);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010837);
	op_hex		(x,	1);
	create_insn	(x=0X14001084D);
	op_hex		(x,	1);
	create_insn	(x=0X140010861);
	op_hex		(x,	1);
	create_insn	(x=0X14001086E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010878);
	op_hex		(x,	1);
	create_insn	(x=0X140010885);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400108AB);
	op_hex		(x,	1);
	create_insn	(x=0X1400108C8);
	op_hex		(x,	1);
	create_insn	(x=0X1400108E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400108EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010900);
	op_hex		(x,	1);
	create_insn	(x=0X14001091D);
	op_hex		(x,	1);
	create_insn	(x=0X14001092A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001093B);
	op_hex		(x,	1);
	create_insn	(x=0X140010951);
	op_hex		(x,	1);
	create_insn	(x=0X14001095D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010966);
	op_hex		(x,	1);
	create_insn	(x=0X140010971);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001097C);
	op_hex		(x,	1);
	create_insn	(x=0X14001099E);
	op_hex		(x,	1);
	create_insn	(x=0X1400109B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400109C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400109DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400109ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400109FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A01);
	op_hex		(x,	1);
	create_insn	(x=0X140010A13);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A19);
	op_hex		(x,	1);
	create_insn	(x=0X140010A24);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A29);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A3B);
	op_hex		(x,	1);
	create_insn	(x=0X140010A3E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A52);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010A59);
	op_hex		(x,	1);
	create_insn	(x=0X140010A6A);
	op_hex		(x,	1);
	make_array	(0X140010A7A,	0X2);
	create_insn	(x=0X140010A7C);
	op_stkvar	(x,	0);
	set_name	(0X140010A7C,	"md5_Update_");
	create_insn	(x=0X140010A81);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010A86);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010A8C);
	op_hex		(x,	1);
	create_insn	(x=0X140010AA2);
	op_hex		(x,	1);
	create_insn	(x=0X140010AA5);
	op_hex		(x,	1);
	create_insn	(x=0X140010AAB);
	op_hex		(x,	1);
	create_insn	(x=0X140010AC2);
	op_hex		(x,	1);
	create_insn	(0X140010B01);
	create_insn	(0X140010B1C);
	create_insn	(x=0X140010B48);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010B4D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010B52);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010B57);
	op_hex		(x,	1);
	make_array	(0X140010B5D,	0X3);
	create_insn	(0X140010B60);
	set_name	(0X140010B60,	"INLINDE_sub_140010B60");
	make_array	(0X140010B79,	0X3);
	create_insn	(x=0X140010B7C);
	op_hex		(x,	1);
	set_name	(0X140010B7C,	"INLINED_sub_140010B7C");
	set_cmt	(0X140010B85,	"Size",	0);
	create_insn	(x=0X140010B8D);
	op_hex		(x,	1);
	make_array	(0X140010B92,	0XE);
	create_insn	(0X140010BA0);
	set_name	(0X140010BA0,	"MD_stuff");
	set_cmt	(0X140010BAB,	"Trap to Debugger",	0);
	create_insn	(x=0X140010BAB);
	op_hex		(x,	0);
	set_cmt	(0X140010BAC,	"Trap to Debugger",	0);
	create_insn	(x=0X140010BAC);
	op_hex		(x,	0);
	set_cmt	(0X140010BAD,	"Trap to Debugger",	0);
	create_insn	(x=0X140010BAD);
	op_hex		(x,	0);
	set_cmt	(0X140010BAE,	"Trap to Debugger",	0);
	create_insn	(x=0X140010BAE);
	op_hex		(x,	0);
	set_cmt	(0X140010BAF,	"Trap to Debugger",	0);
	create_insn	(x=0X140010BAF);
	op_hex		(x,	0);
	create_insn	(x=0X140010BB3);
	op_hex		(x,	1);
	create_insn	(x=0X140010BB7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010BBF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010BC6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010BE0);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010BE5);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010C0C);
	op_hex		(x,	1);
	set_cmt	(0X140010C2C,	"Block",	0);
	create_insn	(x=0X140010C34);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010C44);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010C49);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010C4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010C5F);
	op_hex		(x,	1);
	create_insn	(x=0X140010C68);
	op_hex		(x,	1);
	create_insn	(0X140010C70);
	set_name	(0X140010C70,	"INLINED_sub_140010C70");
	create_insn	(x=0X140010C73);
	op_hex		(x,	1);
	create_insn	(x=0X140010C77);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010C7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010C86);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010CA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010CA9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010CD9);
	op_hex		(x,	1);
	create_insn	(0X140010CEB);
	create_insn	(x=0X140010CF8);
	op_hex		(x,	1);
	create_insn	(x=0X140010D0B);
	op_hex		(x,	1);
	set_cmt	(0X140010D33,	"Block",	0);
	create_insn	(0X140010D3D);
	set_cmt	(0X140010D42,	"Block",	0);
	create_insn	(x=0X140010D4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010D4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010D5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010D60);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010D65);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010D76);
	op_hex		(x,	1);
	create_insn	(x=0X140010D7F);
	op_hex		(x,	1);
	make_array	(0X140010D86,	0XA);
	create_insn	(x=0X140010D90);
	op_hex		(x,	1);
	set_name	(0X140010D90,	"md_Stuff3");
	create_insn	(x=0X140010D94);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010DA1);
	op_hex		(x,	1);
	make_array	(0X140010DA6,	0XA);
	create_insn	(x=0X140010DB0);
	op_stkvar	(x,	0);
	set_name	(0X140010DB0,	"md_Stuff2");
	create_insn	(x=0X140010DB5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010DBA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010DBF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010DC6);
	op_hex		(x,	1);
	create_insn	(x=0X140010E06);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010E1D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010E27);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010E31);
	op_hex		(x,	1);
	make_array	(0X140010E38,	0X8);
	create_insn	(0X140010E40);
	set_name	(0X140010E40,	"find_in_buf_0x28");
	create_insn	(x=0X140010E52);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140010E5A);
	create_insn	(x=0X140010E66);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X140010E85,	0XB);
	create_insn	(0X140010E90);
	set_name	(0X140010E90,	"put_in_buf_0x28");
	create_insn	(x=0X140010E95);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140010EAB);
	create_insn	(0X140010EDC);
	make_array	(0X140010EFE,	0X2);
	create_insn	(x=0X140010F00);
	op_stkvar	(x,	0);
	set_name	(0X140010F00,	"toHexStr");
	create_insn	(x=0X140010F05);
	op_stkvar	(x,	0);
	create_insn	(x=0X140010F0B);
	op_hex		(x,	1);
	create_insn	(x=0X140010F21);
	op_hex		(x,	1);
	create_insn	(x=0X140010F27);
	op_hex		(x,	1);
	create_insn	(x=0X140010F43);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140010F5C);
	op_hex		(x,	1);
	create_insn	(x=0X140010F6E);
	op_hex		(x,	1);
	create_insn	(x=0X140010F82);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010F87);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010F8C);
	op_hex		(x,	1);
	create_insn	(x=0X140010F92);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010F9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010F9F);
	op_hex		(x,	1);
	make_array	(0X140010FA5,	0X3);
	create_insn	(x=0X140010FA8);
	op_stkvar	(x,	0);
	set_name	(0X140010FA8,	"free_fn");
	create_insn	(x=0X140010FAE);
	op_hex		(x,	1);
	create_insn	(0X140010FBE);
	set_cmt	(0X140010FDD,	"hHeap",	0);
	set_cmt	(0X140010FE4,	"lpMem",	0);
	set_cmt	(0X140010FE7,	"dwFlags",	0);
	create_insn	(x=0X140010FEF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140010FF4);
	op_hex		(x,	1);
	make_array	(0X140010FFA,	0X2);
	create_insn	(x=0X140010FFC);
	op_hex		(x,	1);
	set_name	(0X140010FFC,	"free_g_TLS_8");
	set_cmt	(0X140011013,	"dwTlsIndex",	0);
	create_insn	(x=0X14001101F);
	op_hex		(x,	1);
	create_insn	(x=0X140011024);
	op_hex		(x,	1);
	set_name	(0X140011024,	"INLINED_sub_140011024");
	set_cmt	(0X140011032,	"dwTlsIndex",	0);
	create_insn	(x=0X14001103E);
	op_hex		(x,	1);
	create_insn	(x=0X140011044);
	op_stkvar	(x,	0);
	set_name	(0X140011044,	"TLS_8_GetLast_or_Recall");
	create_insn	(x=0X140011049);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001104F);
	op_hex		(x,	1);
	set_cmt	(0X140011056,	"dwTlsIndex",	0);
	set_cmt	(0X14001106A,	"dwBytes",	0);
	set_cmt	(0X140011071,	"hHeap",	0);
	set_cmt	(0X140011078,	"dwFlags",	0);
	set_cmt	(0X140011081,	"dwTlsIndex",	0);
	set_cmt	(0X140011087,	"lpTlsValue",	0);
	create_insn	(0X14001109C);
	set_cmt	(0X1400110B6,	"free_fn",	0);
	create_insn	(x=0X1400110B6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400110BD,	"un001",	0);
	create_insn	(x=0X1400110C5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400110CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400110D3);
	op_hex		(x,	1);
	make_array	(0X1400110D9,	0X3);
	create_insn	(x=0X1400110DC);
	op_stkvar	(x,	0);
	set_name	(0X1400110DC,	"add_to_TLS_8");
	create_insn	(x=0X1400110E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400110E6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400110EC);
	op_hex		(x,	1);
	create_insn	(x=0X1400110F8);
	op_hex		(x,	1);
	set_cmt	(0X140011118,	"hHeap",	0);
	set_cmt	(0X14001111F,	"dwBytes",	0);
	set_cmt	(0X140011122,	"dwFlags",	0);
	set_cmt	(0X140011133,	"dwTlsIndex",	0);
	set_cmt	(0X140011139,	"lpTlsValue",	0);
	set_cmt	(0X140011159,	"dwTlsIndex",	0);
	set_cmt	(0X140011165,	"dwBytes",	0);
	set_cmt	(0X14001116C,	"hHeap",	0);
	set_cmt	(0X140011173,	"lpMem",	0);
	set_cmt	(0X140011176,	"dwFlags",	0);
	set_cmt	(0X140011181,	"dwTlsIndex",	0);
	set_cmt	(0X140011187,	"lpTlsValue",	0);
	create_insn	(x=0X14001119D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400111C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400111C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400111D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400111D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400111DC);
	op_stkvar	(x,	0);
	set_name	(0X1400111DC,	"stru60_zeroAt");
	create_insn	(x=0X1400111E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400111E7);
	op_hex		(x,	1);
	set_cmt	(0X1400111EE,	"lpCriticalSection",	0);
	set_cmt	(0X14001120A,	"void *",	0);
	set_cmt	(0X140011213,	"Size",	0);
	set_cmt	(0X140011216,	"Val",	0);
	create_insn	(0X14001121F);
	create_insn	(x=0X14001122F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011234);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011239);
	op_hex		(x,	1);
	make_array	(0X140011245,	0X3);
	create_insn	(x=0X140011248);
	op_stkvar	(x,	0);
	set_name	(0X140011248,	"stru60_get_at");
	create_insn	(x=0X14001124D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011253);
	op_hex		(x,	1);
	set_cmt	(0X14001125A,	"lpCriticalSection",	0);
	set_cmt	(0X14001127A,	"lpCriticalSection",	0);
	create_insn	(x=0X140011295);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001129D);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400112A2);
	op_hex		(x,	1);
	create_insn	(x=0X1400112A8);
	op_stkvar	(x,	0);
	set_name	(0X1400112A8,	"ResizeStru60");
	create_insn	(x=0X1400112AD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400112B3);
	op_hex		(x,	1);
	set_cmt	(0X1400112C1,	"lpCriticalSection",	0);
	create_insn	(0X1400112E3);
	set_cmt	(0X1400112ED,	"lpMem",	0);
	set_cmt	(0X1400112F1,	"dwFlags",	0);
	set_cmt	(0X1400112FD,	"hHeap",	0);
	set_cmt	(0X140011304,	"dwBytes",	0);
	create_insn	(x=0X140011304);
	op_hex		(x,	1);
	set_cmt	(0X14001132D,	"dwBytes",	0);
	create_insn	(0X14001132D);
	set_cmt	(0X140011330,	"hHeap",	0);
	set_cmt	(0X140011337,	"dwFlags",	0);
	set_cmt	(0X140011352,	"lpCriticalSection",	0);
	create_insn	(x=0X14001135B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011363);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011368);
	op_hex		(x,	1);
	make_array	(0X14001136E,	0X2);
	create_insn	(x=0X140011370);
	op_stkvar	(x,	0);
	set_name	(0X140011370,	"ctor_0x60_0");
	create_insn	(x=0X140011375);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001137A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011381);
	op_hex		(x,	1);
	set_cmt	(0X140011388,	"dwFlags",	0);
	set_cmt	(0X14001138F,	"hHeap",	0);
	set_cmt	(0X140011399,	"dwBytes",	0);
	set_cmt	(0X1400113A6,	"dwFlags",	0);
	create_insn	(x=0X1400113AB);
	op_hex		(x,	1);
	set_cmt	(0X1400113BD,	"hHeap",	0);
	set_cmt	(0X1400113C4,	"dwBytes",	0);
	create_insn	(x=0X1400113C4);
	op_hex		(x,	1);
	set_cmt	(0X1400113D1,	"lpCriticalSection",	0);
	create_insn	(x=0X1400113DF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400113E4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400113E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400113F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400113F8);
	op_stkvar	(x,	0);
	set_name	(0X1400113F8,	"INLINED_sub_1400113F8");
	create_insn	(x=0X1400113FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011402);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011408);
	op_hex		(x,	1);
	set_cmt	(0X14001140F,	"lpCriticalSection",	0);
	create_insn	(0X140011440);
	create_insn	(0X140011446);
	set_cmt	(0X140011459,	"lpCriticalSection",	0);
	create_insn	(x=0X140011463);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011468);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011470);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011475);
	op_hex		(x,	1);
	create_insn	(x=0X14001147C);
	op_stkvar	(x,	0);
	set_name	(0X14001147C,	"fn_myv13");
	create_insn	(x=0X140011481);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011486);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001148C);
	op_hex		(x,	1);
	set_cmt	(0X14001149A,	"lpCriticalSection",	0);
	create_insn	(0X1400114CB);
	create_insn	(0X140011519);
	create_insn	(x=0X140011523);
	op_hex		(x,	1);
	create_insn	(0X140011543);
	create_insn	(x=0X14001154A);
	op_hex		(x,	1);
	create_insn	(x=0X14001154E);
	op_hex		(x,	1);
	set_cmt	(0X14001155E,	"hHeap",	0);
	set_cmt	(0X140011568,	"dwFlags",	0);
	set_cmt	(0X14001156F,	"dwBytes",	0);
	create_insn	(0X140011586);
	set_cmt	(0X14001158A,	"hHeap",	0);
	set_cmt	(0X140011591,	"dwFlags",	0);
	set_cmt	(0X140011593,	"dwBytes",	0);
	create_insn	(0X1400115D9);
	set_cmt	(0X1400115FC,	"lpCriticalSection",	0);
	create_insn	(0X140011614);
	create_insn	(x=0X140011616);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001161B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011620);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011625);
	op_hex		(x,	1);
	create_insn	(x=0X14001162C);
	op_stkvar	(x,	0);
	set_name	(0X14001162C,	"INLINED_sub_14001162C");
	create_insn	(x=0X140011632);
	op_hex		(x,	1);
	set_cmt	(0X140011649,	"Val",	0);
	set_cmt	(0X14001164E,	"Size",	0);
	set_cmt	(0X140011651,	"void *",	0);
	create_insn	(x=0X14001165C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011661);
	op_hex		(x,	1);
	create_insn	(x=0X140011668);
	op_stkvar	(x,	0);
	set_name	(0X140011668,	"free_myV13_0x60");
	create_insn	(x=0X14001166E);
	op_hex		(x,	1);
	set_cmt	(0X14001167B,	"lpCriticalSection",	0);
	set_cmt	(0X140011685,	"lpMem",	0);
	set_cmt	(0X14001168E,	"hHeap",	0);
	set_cmt	(0X140011698,	"dwFlags",	0);
	set_cmt	(0X1400116A8,	"lpMem",	0);
	set_cmt	(0X1400116B0,	"hHeap",	0);
	set_cmt	(0X1400116BA,	"dwFlags",	0);
	create_insn	(x=0X1400116CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400116CE);
	op_hex		(x,	1);
	create_insn	(x=0X1400116D3);
	op_hex		(x,	1);
	set_cmt	(0X1400116DE,	"lpCriticalSection",	0);
	create_insn	(x=0X1400116E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400116ED);
	op_hex		(x,	1);
	create_insn	(x=0X1400116F4);
	op_stkvar	(x,	0);
	set_name	(0X1400116F4,	"treeIter_dtor_todo");
	create_insn	(x=0X1400116FA);
	op_hex		(x,	1);
	set_cmt	(0X14001170A,	"lpCriticalSection",	0);
	set_cmt	(0X140011718,	"lpMem",	0);
	create_insn	(0X140011758);
	create_insn	(0X140011774);
	set_cmt	(0X14001177F,	"dwFlags",	0);
	set_cmt	(0X140011785,	"hHeap",	0);
	create_insn	(0X140011794);
	create_insn	(0X1400117BE);
	create_insn	(x=0X1400117C9);
	op_hex		(x,	1);
	set_cmt	(0X1400117E7,	"lpCriticalSection",	0);
	create_insn	(x=0X1400117F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400117F6);
	op_hex		(x,	1);
	create_insn	(x=0X1400117FC);
	op_stkvar	(x,	0);
	set_name	(0X1400117FC,	"TREE_iter");
	create_insn	(x=0X140011801);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011806);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001180D);
	op_hex		(x,	1);
	create_insn	(x=0X14001181C);
	op_hex		(x,	1);
	create_insn	(x=0X140011826);
	op_hex		(x,	1);
	create_insn	(x=0X140011831);
	op_hex		(x,	1);
	create_insn	(x=0X14001183B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011842);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14001184E,	"lpCriticalSection",	0);
	create_insn	(x=0X14001184E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140011877);
	set_cmt	(0X140011883,	"hHeap",	0);
	set_cmt	(0X14001188A,	"dwFlags",	0);
	set_cmt	(0X14001188C,	"dwBytes",	0);
	set_cmt	(0X14001189E,	"a3",	0);
	create_insn	(x=0X14001189E);
	op_stkvar	(x,	1);
	set_cmt	(0X1400118A3,	"a2",	0);
	create_insn	(x=0X1400118A3);
	op_stkvar	(x,	1);
	set_cmt	(0X1400118AA,	"asize_plus_0x10",	0);
	set_cmt	(0X1400118AE,	"a4",	0);
	create_insn	(x=0X1400118AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400118C3);
	op_hex		(x,	1);
	set_cmt	(0X1400118F4,	"lpCriticalSection",	0);
	create_insn	(x=0X1400118F4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140011903,	"hHeap",	0);
	create_insn	(0X140011903);
	set_cmt	(0X14001190A,	"dwFlags",	0);
	set_cmt	(0X14001190C,	"dwBytes",	0);
	create_insn	(x=0X14001192B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011936);
	op_stkvar	(x,	1);
	set_cmt	(0X140011947,	"lpCriticalSection",	0);
	create_insn	(0X140011947);
	create_insn	(x=0X14001195B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011960);
	op_hex		(x,	1);
	create_insn	(x=0X140011968);
	op_stkvar	(x,	0);
	set_name	(0X140011968,	"dtor_TREES");
	create_insn	(x=0X14001196E);
	op_hex		(x,	1);
	set_cmt	(0X14001197E,	"lpCriticalSection",	0);
	create_insn	(x=0X14001197E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14001199C);
	op_hex		(x,	1);
	set_cmt	(0X1400119DB,	"hHeap",	0);
	set_cmt	(0X1400119E2,	"lpMem",	0);
	set_cmt	(0X1400119E5,	"dwFlags",	0);
	set_cmt	(0X1400119ED,	"lpCriticalSection",	0);
	create_insn	(x=0X1400119ED);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1400119FC);
	set_cmt	(0X140011A07,	"lpCriticalSection",	0);
	set_cmt	(0X140011A11,	"hHeap",	0);
	set_cmt	(0X140011A18,	"lpMem",	0);
	set_cmt	(0X140011A1B,	"dwFlags",	0);
	create_insn	(x=0X140011A23);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011A28);
	op_hex		(x,	1);
	make_array	(0X140011A2E,	0X2);
	create_insn	(x=0X140011A30);
	op_hex		(x,	1);
	set_name	(0X140011A30,	"INIT_TREE_ROOT");
	set_cmt	(0X140011A34,	"lpCriticalSection",	0);
	create_insn	(x=0X140011A34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011A41);
	op_hex		(x,	1);
	create_insn	(x=0X140011A49);
	op_hex		(x,	1);
	make_array	(0X140011A4E,	0X2);
	create_insn	(0X140011A50);
	set_name	(0X140011A50,	"free_stru60");
	create_insn	(x=0X140011A52);
	op_hex		(x,	1);
	create_insn	(x=0X140011A67);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011A6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011A81);
	op_hex		(x,	1);
	create_insn	(0X140011A88);
	create_insn	(x=0X140011A8A);
	op_hex		(x,	1);
	create_insn	(x=0X140011A9F);
	op_hex		(x,	1);
	make_array	(0X140011AA5,	0X3);
	create_insn	(x=0X140011AA8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X140011AA8,	"INLINED2_sub_140011AA8");
	make_array	(0X140011AB6,	0X2);
	create_insn	(x=0X140011AB8);
	op_stkvar	(x,	0);
	set_name	(0X140011AB8,	"DOInitOnceExecuteOnce");
	create_insn	(x=0X140011ABD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011AC6);
	op_hex		(x,	1);
	set_cmt	(0X140011ACD,	"lpLibFileName",	0);
	create_insn	(x=0X140011ACD);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011AEB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140011AF2,	"hModule",	0);
	create_insn	(x=0X140011B00);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011B05);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140011B17,	"hLibModule",	0);
	set_cmt	(0X140011B38,	"dwMilliseconds",	0);
	create_insn	(0X140011B38);
	create_insn	(0X140011B46);
	create_insn	(x=0X140011B4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011B54);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011B59);
	op_hex		(x,	1);
	make_array	(0X140011B62,	0X2);
	create_insn	(x=0X140011B64);
	op_stkvar	(x,	0);
	set_name	(0X140011B64,	"INLINED_sub_140011B64");
	create_insn	(x=0X140011B69);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011B6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011B74);
	op_hex		(x,	1);
	create_insn	(x=0X140011B7D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011B84);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140011B96,	"lpCriticalSection",	0);
	create_insn	(x=0X140011B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140011BA9,	"__int64",	0);
	set_cmt	(0X140011BAC,	"int",	0);
	set_cmt	(0X140011BAE,	"int",	0);
	create_insn	(x=0X140011BB8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011BBF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011BC9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011BCE);
	op_hex		(x,	1);
	make_array	(0X140011BDA,	0X2);
	create_insn	(0X140011BDC);
	set_name	(0X140011BDC,	"stru60_getnotempty");
	create_insn	(x=0X140011BDE);
	op_hex		(x,	1);
	set_cmt	(0X140011C32,	"lpCriticalSection",	0);
	create_insn	(x=0X140011C3F);
	op_hex		(x,	1);
	make_array	(0X140011C45,	0X3);
	create_insn	(0X140011C48);
	set_name	(0X140011C48,	"EnterCriticalSection_stru60");
	create_insn	(x=0X140011C4A);
	op_hex		(x,	1);
	set_cmt	(0X140011C51,	"lpCriticalSection",	0);
	create_insn	(x=0X140011C5B);
	op_hex		(x,	1);
	create_insn	(x=0X140011C60);
	op_hex		(x,	1);
	make_array	(0X140011C66,	0X2);
	create_insn	(0X140011C68);
	set_name	(0X140011C68,	"del_fr_tree");
	create_insn	(x=0X140011C7F);
	op_hex		(x,	1);
	create_insn	(0X140011C86);
	create_insn	(0X140011CB0);
	set_name	(0X140011CB0,	"add_to_tree");
	create_insn	(x=0X140011CB2);
	op_hex		(x,	1);
	set_cmt	(0X140011CB9,	"hHeap",	0);
	set_cmt	(0X140011CC0,	"dwBytes",	0);
	set_cmt	(0X140011CC3,	"dwFlags",	0);
	create_insn	(x=0X140011CEC);
	op_hex		(x,	1);
	make_array	(0X140011CF2,	0X2);
	create_insn	(x=0X140011CF4);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X140011CF4,	"initMainVT");
	create_insn	(x=0X140011D02);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011D10);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140011D1E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X140011D2D,	0X3);
	create_insn	(x=0X140011D30);
	op_stkvar	(x,	0);
	set_name	(0X140011D30,	"fn_alloc_obj1");
	create_insn	(x=0X140011D35);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011D3A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011D48);
	op_hex		(x,	1);
	create_insn	(x=0X140011D4C);
	op_stkvar	(x,	1);
	set_cmt	(0X140011D6E,	"hHeap",	0);
	set_cmt	(0X140011D78,	"dwFlags",	0);
	set_cmt	(0X140011D7E,	"dwBytes",	0);
	set_cmt	(0X140011D94,	"Size",	0);
	set_cmt	(0X140011D97,	"Val",	0);
	set_cmt	(0X140011D99,	"void *",	0);
	create_insn	(x=0X140011DEC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011DF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011DF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011DFE);
	op_hex		(x,	1);
	create_insn	(0X140011E0C);
	set_name	(0X140011E0C,	"fn_01_obj1");
	create_insn	(x=0X140011E28);
	op_hex		(x,	1);
	create_insn	(x=0X140011E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011EA5);
	op_stkvar	(x,	1);
	set_cmt	(0X140011EAE,	"aMask",	0);
	set_cmt	(0X140011EB1,	"a3",	0);
	set_cmt	(0X140011EB4,	"aCnt",	0);
	set_cmt	(0X140011EB7,	"aElSize",	0);
	set_cmt	(0X140011EBA,	"aResult",	0);
	create_insn	(x=0X140011EBA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011ECA);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011ECF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011EDC);
	op_hex		(x,	1);
	make_array	(0X140011EEA,	0X2);
	create_insn	(0X140011EEC);
	set_name	(0X140011EEC,	"fn_free_obj1");
	make_array	(0X140011EF1,	0X3);
	create_insn	(0X140011EF4);
	set_name	(0X140011EF4,	"fn_free_obj1_");
	create_insn	(x=0X140011EF9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011EFE);
	op_stkvar	(x,	0);
	create_insn	(x=0X140011F04);
	op_hex		(x,	1);
	set_cmt	(0X140011F1D,	"aMASK",	0);
	set_cmt	(0X140011F21,	"aRoot",	0);
	set_cmt	(0X140011F3C,	"lpMem",	0);
	set_cmt	(0X140011F40,	"dwFlags",	0);
	create_insn	(x=0X140011F42);
	op_hex		(x,	1);
	set_cmt	(0X140011F46,	"hHeap",	0);
	create_insn	(x=0X140011F53);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011F58);
	op_stkvar	(x,	1);
	create_insn	(x=0X140011F5D);
	op_hex		(x,	1);
	create_insn	(0X140011F64);
	set_name	(0X140011F64,	"fn_02_obj1");
	create_insn	(x=0X140011F74);
	op_hex		(x,	1);
	set_cmt	(0X140011FAB,	"aMask",	0);
	set_cmt	(0X140011FAF,	"a3",	0);
	set_cmt	(0X140011FB3,	"aCnt",	0);
	set_cmt	(0X140011FB7,	"aElSize",	0);
	set_cmt	(0X140011FDA,	"Src",	0);
	set_cmt	(0X140011FDE,	"void *",	0);
	set_cmt	(0X140011FE2,	"Size",	0);
	create_insn	(x=0X140011FE2);
	op_hex		(x,	1);
	create_insn	(0X14001202F);
	set_cmt	(0X140012033,	"void *",	0);
	set_cmt	(0X140012037,	"Src",	0);
	set_cmt	(0X14001203A,	"Size",	0);
	create_insn	(x=0X140012048);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001204D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012055);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001205A);
	op_hex		(x,	1);
	create_insn	(x=0X140012060);
	op_hex		(x,	1);
	set_name	(0X140012060,	"create_and_alloc_STRtree");
	set_cmt	(0X140012064,	"dwMaximumSize",	0);
	set_cmt	(0X140012067,	"dwInitialSize",	0);
	set_cmt	(0X14001206C,	"flOptions",	0);
	create_insn	(x=0X14001208C);
	op_hex		(x,	1);
	make_array	(0X140012091,	0XF);
	create_insn	(x=0X1400120A0);
	op_hex		(x,	1);
	set_name	(0X1400120A0,	"MyHeapDestroy");
	set_cmt	(0X1400120A4,	"hHeap",	0);
	set_cmt	(0X1400120B1,	"dwTlsIndex",	0);
	create_insn	(x=0X1400120BD);
	op_hex		(x,	1);
	make_array	(0X1400120C2,	0XE);
	create_insn	(x=0X1400120D0);
	op_stkvar	(x,	0);
	set_name	(0X1400120D0,	"my_wstrcpy");
	create_insn	(x=0X1400120D5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400120DA);
	op_hex		(x,	1);
	create_insn	(x=0X1400120DE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400120E7);
	op_stkvar	(x,	0);
	set_cmt	(0X1400120F3,	"String",	0);
	create_insn	(x=0X1400120F3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400120FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012102);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001210D);
	op_stkvar	(x,	1);
	set_cmt	(0X140012117,	"dwBytes",	0);
	set_cmt	(0X14001211A,	"dwFlags",	0);
	set_cmt	(0X14001211C,	"hHeap",	0);
	create_insn	(x=0X140012129);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012133);
	op_stkvar	(x,	1);
	set_cmt	(0X14001213D,	"dwBytes",	0);
	create_insn	(x=0X140012140);
	op_stkvar	(x,	1);
	set_cmt	(0X140012145,	"lpMem",	0);
	set_cmt	(0X140012148,	"dwFlags",	0);
	set_cmt	(0X14001214A,	"hHeap",	0);
	create_insn	(x=0X140012157);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001215F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012164);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012169);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012178);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012183);
	op_stkvar	(x,	1);
	set_cmt	(0X140012188,	"lpMem",	0);
	set_cmt	(0X14001218B,	"dwFlags",	0);
	set_cmt	(0X14001218D,	"hHeap",	0);
	create_insn	(x=0X14001219A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400121A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400121B0);
	op_hex		(x,	1);
	make_array	(0X1400121B5,	0XB);
	create_insn	(x=0X1400121C0);
	op_hex		(x,	1);
	set_name	(0X1400121C0,	"GET_TLS_StrLen");
	create_insn	(x=0X1400121CA);
	op_stkvar	(x,	0);
	set_cmt	(0X1400121CE,	"dwTlsIndex",	0);
	create_insn	(x=0X1400121DA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400121DF);
	op_stkvar	(x,	1);
	set_cmt	(0X1400121ED,	"dwErrCode",	0);
	create_insn	(x=0X1400121ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400121FC);
	op_hex		(x,	1);
	make_array	(0X140012201,	0XF);
	create_insn	(x=0X140012210);
	op_stkvar	(x,	0);
	set_name	(0X140012210,	"dup_from_STR_tree");
	create_insn	(x=0X140012214);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012219);
	op_hex		(x,	1);
	set_cmt	(0X14001221D,	"dwTlsIndex",	0);
	create_insn	(x=0X140012229);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001222E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012233);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012242);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012246);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012251);
	op_stkvar	(x,	1);
	set_cmt	(0X14001225A,	"dwBytes",	0);
	set_cmt	(0X14001225D,	"dwFlags",	0);
	set_cmt	(0X14001225F,	"hHeap",	0);
	create_insn	(x=0X14001226C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012276);
	op_stkvar	(x,	1);
	set_cmt	(0X14001227F,	"dwBytes",	0);
	create_insn	(x=0X140012282);
	op_stkvar	(x,	1);
	set_cmt	(0X140012287,	"lpMem",	0);
	set_cmt	(0X14001228A,	"dwFlags",	0);
	set_cmt	(0X14001228C,	"hHeap",	0);
	create_insn	(x=0X140012299);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400122DE);
	op_hex		(x,	1);
	make_array	(0X1400122E3,	0XD);
	create_insn	(x=0X1400122F0);
	op_stkvar	(x,	0);
	set_name	(0X1400122F0,	"wstrdup_10");
	create_insn	(x=0X1400122F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400122FA);
	op_hex		(x,	1);
	create_insn	(x=0X1400122FE);
	op_stkvar	(x,	0);
	set_cmt	(0X140012306,	"String",	0);
	create_insn	(x=0X140012306);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012310);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012314);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001231D);
	op_hex		(x,	1);
	set_cmt	(0X140012320,	"dwBytes",	0);
	set_cmt	(0X140012323,	"dwFlags",	0);
	set_cmt	(0X140012325,	"hHeap",	0);
	create_insn	(x=0X140012332);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001233A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001233F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012344);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012351);
	op_hex		(x,	1);
	make_array	(0X140012356,	0XA);
	create_insn	(x=0X140012360);
	op_stkvar	(x,	0);
	set_name	(0X140012360,	"HeapFree__0");
	create_insn	(x=0X140012365);
	op_hex		(x,	1);
	create_insn	(x=0X140012369);
	op_stkvar	(x,	0);
	set_cmt	(0X140012371,	"lpMem",	0);
	create_insn	(x=0X140012371);
	op_stkvar	(x,	1);
	set_cmt	(0X140012376,	"dwFlags",	0);
	set_cmt	(0X140012378,	"hHeap",	0);
	create_insn	(x=0X140012385);
	op_hex		(x,	1);
	make_array	(0X14001238A,	0X6);
	create_insn	(x=0X140012390);
	op_stkvar	(x,	0);
	set_name	(0X140012390,	"unkfree_fn");
	create_insn	(x=0X140012395);
	op_hex		(x,	1);
	create_insn	(x=0X140012399);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001239E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400123A3);
	op_stkvar	(x,	1);
	set_cmt	(0X1400123A8,	"lpMem",	0);
	set_cmt	(0X1400123AB,	"dwFlags",	0);
	set_cmt	(0X1400123AD,	"hHeap",	0);
	set_cmt	(0X1400123BA,	"lpMem",	0);
	create_insn	(x=0X1400123BA);
	op_stkvar	(x,	1);
	set_cmt	(0X1400123BF,	"dwFlags",	0);
	set_cmt	(0X1400123C1,	"hHeap",	0);
	create_insn	(x=0X1400123CE);
	op_hex		(x,	1);
	make_array	(0X1400123D3,	0XD);
	create_insn	(x=0X1400123E0);
	op_hex		(x,	1);
	set_name	(0X1400123E0,	"init_RSO");
	set_cmt	(0X1400123F2,	"dwTlsIndex",	0);
	set_cmt	(0X1400123FE,	"un001",	0);
	set_cmt	(0X140012401,	"free_fn",	0);
	create_insn	(x=0X140012401);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X14001240F,	"dwTlsIndex",	0);
	create_insn	(0X14001240F);
	set_cmt	(0X140012425,	"dwTlsIndex",	0);
	set_cmt	(0X140012431,	"un001",	0);
	set_cmt	(0X140012434,	"free_fn",	0);
	create_insn	(x=0X140012434);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140012440);
	op_hex		(x,	1);
	make_array	(0X140012445,	0XB);
	create_insn	(x=0X140012450);
	op_stkvar	(x,	0);
	set_name	(0X140012450,	"add_to_STR_treeR");
	create_insn	(x=0X140012455);
	op_hex		(x,	1);
	create_insn	(x=0X140012459);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012461);
	op_stkvar	(x,	0);
	set_cmt	(0X140012469,	"String",	0);
	create_insn	(x=0X140012469);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012473);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001247C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012485);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001248A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012492);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012497);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001249C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400124A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400124AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400124B8);
	op_hex		(x,	1);
	make_array	(0X1400124BD,	0X3);
	create_insn	(x=0X1400124C0);
	op_stkvar	(x,	0);
	set_name	(0X1400124C0,	"mywcscmp");
	create_insn	(x=0X1400124C5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400124CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400124CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400124D6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400124DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400124E2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400124EA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400124F1);
	op_stkvar	(x,	0);
	set_cmt	(0X1400124F6,	"String2",	0);
	create_insn	(x=0X1400124F6);
	op_stkvar	(x,	1);
	set_cmt	(0X1400124FB,	"String1",	0);
	create_insn	(x=0X1400124FB);
	op_stkvar	(x,	1);
	create_insn	(0X140012510);
	create_insn	(0X140012512);
	create_insn	(x=0X140012514);
	op_hex		(x,	1);
	make_array	(0X140012519,	0X7);
	create_insn	(x=0X140012520);
	op_hex		(x,	1);
	set_name	(0X140012520,	"add2_to_StrTreeLen");
	set_cmt	(0X140012524,	"dwTlsIndex",	0);
	create_insn	(x=0X140012530);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012535);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012542);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001254B);
	op_hex		(x,	1);
	create_insn	(x=0X140012550);
	op_stkvar	(x,	0);
	set_name	(0X140012550,	"STR_Tree_Last");
	create_insn	(x=0X140012554);
	op_hex		(x,	1);
	set_cmt	(0X140012558,	"dwTlsIndex",	0);
	create_insn	(x=0X140012564);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012569);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001256E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012577);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001257F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012588);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001258D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012592);
	op_hex		(x,	1);
	make_array	(0X140012597,	0X9);
	create_insn	(x=0X1400125A0);
	op_hex		(x,	1);
	set_name	(0X1400125A0,	"STR_tree_root_0");
	set_cmt	(0X1400125A4,	"dwTlsIndex",	0);
	create_insn	(x=0X1400125B0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400125B5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400125BD);
	op_hex		(x,	1);
	make_array	(0X1400125C2,	0XE);
	create_insn	(x=0X1400125D0);
	op_hex		(x,	1);
	set_name	(0X1400125D0,	"STR_tree_root");
	set_cmt	(0X1400125D4,	"dwTlsIndex",	0);
	create_insn	(x=0X1400125E0);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400125E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400125ED);
	op_hex		(x,	1);
	make_array	(0X1400125F2,	0XE);
	create_insn	(x=0X140012600);
	op_hex		(x,	1);
	set_name	(0X140012600,	"str_tree_end");
	set_cmt	(0X140012604,	"dwTlsIndex",	0);
	create_insn	(x=0X140012610);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012615);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001261D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012626);
	op_hex		(x,	1);
	make_array	(0X14001262B,	0X5);
	create_insn	(x=0X140012630);
	op_stkvar	(x,	0);
	set_name	(0X140012630,	"GET_STR_IN_tree");
	create_insn	(x=0X140012635);
	op_hex		(x,	1);
	set_cmt	(0X140012639,	"dwTlsIndex",	0);
	create_insn	(x=0X140012645);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001264A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012652);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012659);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012661);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001266A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012671);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012679);
	op_stkvar	(x,	1);
	create_insn	(0X140012689);
	create_insn	(0X14001268B);
	create_insn	(x=0X14001268D);
	op_hex		(x,	1);
	make_array	(0X140012692,	0XE);
	create_insn	(x=0X1400126A0);
	op_stkvar	(x,	0);
	set_name	(0X1400126A0,	"STR_TREE_AT");
	create_insn	(x=0X1400126A4);
	op_hex		(x,	1);
	set_cmt	(0X1400126A8,	"dwTlsIndex",	0);
	create_insn	(x=0X1400126B4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400126B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400126BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400126C6);
	op_hex		(x,	1);
	make_array	(0X1400126CB,	0X5);
	create_insn	(x=0X1400126D0);
	op_stkvar	(x,	0);
	set_name	(0X1400126D0,	"alloc_to_STR_tree");
	create_insn	(x=0X1400126D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400126D8);
	op_hex		(x,	1);
	set_cmt	(0X1400126DC,	"dwTlsIndex",	0);
	create_insn	(x=0X1400126E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400126ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400126F4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400126FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012700);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012705);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012712);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012716);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001271B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001272D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012738);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012741);
	op_stkvar	(x,	1);
	set_cmt	(0X14001274E,	"dwBytes",	0);
	create_insn	(x=0X140012751);
	op_stkvar	(x,	1);
	set_cmt	(0X140012756,	"lpMem",	0);
	set_cmt	(0X140012759,	"dwFlags",	0);
	set_cmt	(0X14001275B,	"hHeap",	0);
	create_insn	(x=0X140012768);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012772);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012781);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001278B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012793);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012798);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127A1);
	op_stkvar	(x,	1);
	set_cmt	(0X1400127AE,	"dwBytes",	0);
	create_insn	(x=0X1400127B1);
	op_stkvar	(x,	1);
	set_cmt	(0X1400127B6,	"lpMem",	0);
	set_cmt	(0X1400127B9,	"dwFlags",	0);
	set_cmt	(0X1400127BB,	"hHeap",	0);
	create_insn	(x=0X1400127C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400127E2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127F0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400127FE);
	op_hex		(x,	1);
	make_array	(0X140012803,	0XD);
	create_insn	(x=0X140012810);
	op_stkvar	(x,	0);
	set_name	(0X140012810,	"str_setz");
	create_insn	(x=0X140012814);
	op_hex		(x,	1);
	set_cmt	(0X140012818,	"dwTlsIndex",	0);
	create_insn	(x=0X140012824);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012829);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001282E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012837);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001283C);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001284A);
	op_hex		(x,	1);
	create_insn	(x=0X140012850);
	op_stkvar	(x,	0);
	set_name	(0X140012850,	"GET_CHAR_AT_tree");
	create_insn	(x=0X140012854);
	op_hex		(x,	1);
	set_cmt	(0X140012858,	"dwTlsIndex",	0);
	create_insn	(x=0X140012864);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012869);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001286E);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001287B);
	op_hex		(x,	1);
	create_insn	(x=0X140012880);
	op_stkvar	(x,	0);
	set_name	(0X140012880,	"wstrcpy");
	create_insn	(x=0X140012885);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001288A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001288F);
	op_hex		(x,	1);
	create_insn	(x=0X140012893);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012898);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400128A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400128AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400128C8);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400128D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128DF);
	op_stkvar	(x,	0);
	create_insn	(0X1400128E5);
	create_insn	(x=0X1400128E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400128EE);
	op_hex		(x,	1);
	make_array	(0X1400128F3,	0XD);
	create_insn	(x=0X140012900);
	op_stkvar	(x,	0);
	set_name	(0X140012900,	"TLS_cutr_str");
	create_insn	(x=0X140012904);
	op_hex		(x,	1);
	set_cmt	(0X140012908,	"dwTlsIndex",	0);
	create_insn	(x=0X140012914);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012919);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001291D);
	op_hex		(x,	1);
	create_insn	(x=0X140012921);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012930);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012939);
	op_hex		(x,	1);
	make_array	(0X14001293E,	0X2);
	create_insn	(x=0X140012940);
	op_stkvar	(x,	0);
	set_name	(0X140012940,	"calc_size");
	create_insn	(x=0X140012945);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001294A);
	op_hex		(x,	1);
	create_insn	(x=0X14001294E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012957);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001295C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012961);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012971);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012976);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012981);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012989);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001298D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012991);
	op_hex		(x,	1);
	create_insn	(x=0X14001299A);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400129A7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400129B9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400129C9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129D1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400129D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400129EA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129F2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400129F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400129FF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012A09);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A0D);
	op_hex		(x,	1);
	create_insn	(x=0X140012A26);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A40);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A49);
	op_hex		(x,	1);
	create_insn	(x=0X140012A5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A67);
	op_hex		(x,	1);
	create_insn	(x=0X140012A73);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012A81);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012A89);
	op_stkvar	(x,	0);
	create_insn	(0X140012A90);
	create_insn	(x=0X140012A99);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012AA2);
	op_hex		(x,	1);
	create_insn	(x=0X140012AAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012AB7);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012ABE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012AC6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012AD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012AD4);
	op_hex		(x,	1);
	create_insn	(x=0X140012AED);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B07);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B21);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B2A);
	op_hex		(x,	1);
	create_insn	(x=0X140012B3F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B48);
	op_hex		(x,	1);
	create_insn	(x=0X140012B5D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B66);
	op_hex		(x,	1);
	create_insn	(x=0X140012B72);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B7B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012B80);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012B88);
	op_stkvar	(x,	0);
	create_insn	(0X140012B92);
	create_insn	(x=0X140012B9B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012BA4);
	op_hex		(x,	1);
	create_insn	(x=0X140012BB9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012BC2);
	op_hex		(x,	1);
	create_insn	(x=0X140012BCE);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012BD7);
	op_stkvar	(x,	0);
	create_insn	(0X140012BDE);
	create_insn	(x=0X140012BE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012BF0);
	op_hex		(x,	1);
	create_insn	(x=0X140012BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C05);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012C0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C14);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012C1B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C23);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012C2D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C32);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C3D);
	op_hex		(x,	1);
	make_array	(0X140012C42,	0XE);
	create_insn	(x=0X140012C50);
	op_hex		(x,	1);
	set_name	(0X140012C50,	"alloc_strNode");
	set_cmt	(0X140012C54,	"dwBytes",	0);
	set_cmt	(0X140012C5A,	"dwFlags",	0);
	set_cmt	(0X140012C5C,	"hHeap",	0);
	create_insn	(x=0X140012C69);
	op_stkvar	(x,	0);
	set_cmt	(0X140012C6E,	"dwBytes",	0);
	set_cmt	(0X140012C74,	"dwFlags",	0);
	set_cmt	(0X140012C76,	"hHeap",	0);
	create_insn	(x=0X140012C83);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012C98);
	op_stkvar	(x,	1);
	set_cmt	(0X140012CA5,	"lpTlsValue",	0);
	create_insn	(x=0X140012CA5);
	op_stkvar	(x,	1);
	set_cmt	(0X140012CAA,	"dwTlsIndex",	0);
	create_insn	(x=0X140012CB6);
	op_hex		(x,	1);
	create_byte	(0X140012CBB);
	make_array	(0X140012CBB,	0X15);
	create_insn	(x=0X140012CD0);
	op_hex		(x,	1);
	set_name	(0X140012CD0,	"INLINED_sub_140012CD0");
	set_cmt	(0X140012CD4,	"dwTlsIndex",	0);
	create_insn	(x=0X140012CE0);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012CE5);
	op_stkvar	(x,	1);
	set_cmt	(0X140012CEA,	"lpMem",	0);
	set_cmt	(0X140012CED,	"dwFlags",	0);
	set_cmt	(0X140012CEF,	"hHeap",	0);
	set_cmt	(0X140012CFC,	"lpMem",	0);
	create_insn	(x=0X140012CFC);
	op_stkvar	(x,	1);
	set_cmt	(0X140012D01,	"dwFlags",	0);
	set_cmt	(0X140012D03,	"hHeap",	0);
	create_insn	(x=0X140012D10);
	op_hex		(x,	1);
	make_array	(0X140012D15,	0XB);
	create_insn	(x=0X140012D20);
	op_stkvar	(x,	0);
	set_name	(0X140012D20,	"inf");
	create_insn	(x=0X140012D25);
	op_hex		(x,	1);
	create_insn	(x=0X140012D29);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012D33);
	op_hex		(x,	1);
	make_array	(0X140012D38,	0X8);
	create_insn	(x=0X140012D40);
	op_stkvar	(x,	0);
	set_name	(0X140012D40,	"inf_");
	create_insn	(x=0X140012D4D);
	op_hex		(x,	1);
	create_insn	(0X140012D71);
	create_insn	(x=0X140012D73);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012D78);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012D7D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140012D84);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012D8F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012D93);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012D98);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012D9D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DB1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DB9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DC1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DC6);
	op_hex		(x,	1);
	create_insn	(x=0X140012DCA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DDD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DE3);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DF2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012DF8);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E0A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E10);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E14);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E1C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E2C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E35);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012E46);
	op_stkvar	(x,	1);
	create_insn	(0X140012E5F);
	create_insn	(x=0X140012E64);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E71);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E7B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140012E83);
	op_hex		(x,	1);
	make_array	(0X140012E93,	0XD);
	create_insn	(x=0X140012EA0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X140012EA0,	"INLINED_sub_140012EA0");
	create_insn	(x=0X140012EB9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X140012EC5,	0XB);
	create_insn	(x=0X140012ED0);
	op_stkvar	(x,	0);
	set_name	(0X140012ED0,	"inflate");
	create_insn	(x=0X140012ED4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012EE0);
	op_hex		(x,	1);
	create_insn	(x=0X140012F55);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012F5A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012F5F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012F64);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012F69);
	op_stkvar	(x,	0);
	set_cmt	(0X140012F95,	"switch 31 cases",	0);
	create_insn	(x=0X140012F9A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012F9E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012FA2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012FA8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012FAC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140012FC6);
	op_plain_offset	(x,	1,	0X140000000);
	op_plain_offset	(x,	129,	0X140000000);
	set_cmt	(0X140012FDB,	"switch jump",	0);
	set_cmt	(0X140012FDD,	"jumptable 0000000140012FDB case 16180",	1);
	create_insn	(0X140012FDD);
	create_insn	(0X140012FF2);
	create_insn	(x=0X140013017);
	op_hex		(x,	1);
	create_insn	(x=0X140013040);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001304E);
	op_stkvar	(x,	0);
	create_insn	(0X140013074);
	create_insn	(x=0X140013088);
	op_hex		(x,	1);
	create_insn	(x=0X14001309A);
	op_hex		(x,	1);
	create_insn	(x=0X14001309D);
	op_hex		(x,	1);
	create_insn	(x=0X1400130AD);
	op_hex		(x,	1);
	create_insn	(x=0X1400130B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400130C2);
	op_hex		(x,	1);
	create_insn	(x=0X1400130C8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400130E0);
	op_hex		(x,	1);
	create_insn	(x=0X1400130EA);
	op_hex		(x,	1);
	create_insn	(x=0X14001311D);
	op_hex		(x,	1);
	create_insn	(x=0X14001312B);
	op_hex		(x,	1);
	create_insn	(x=0X140013132);
	op_hex		(x,	1);
	create_insn	(x=0X140013145);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14001315D);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140013175,	"jumptable 0000000140012FDB case 16181",	1);
	create_insn	(0X140013175);
	create_insn	(x=0X1400131AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400131B7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1400131CF);
	create_insn	(x=0X1400131DB);
	op_hex		(x,	1);
	create_insn	(x=0X1400131DE);
	op_hex		(x,	1);
	create_insn	(x=0X1400131E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400131ED);
	op_hex		(x,	1);
	create_insn	(x=0X1400131F4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400131F8);
	op_hex		(x,	1);
	create_insn	(x=0X1400131FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013200);
	op_stkvar	(x,	0);
	set_cmt	(0X140013227,	"jumptable 0000000140012FDB case 16182",	1);
	create_insn	(0X140013227);
	create_insn	(x=0X14001325D);
	op_hex		(x,	1);
	create_insn	(x=0X140013267);
	op_hex		(x,	1);
	create_insn	(x=0X140013271);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013275);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013279);
	op_hex		(x,	1);
	create_insn	(x=0X140013282);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013288);
	op_hex		(x,	1);
	create_insn	(x=0X14001328C);
	op_hex		(x,	1);
	create_insn	(x=0X14001328F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013293);
	op_stkvar	(x,	0);
	set_cmt	(0X1400132B3,	"jumptable 0000000140012FDB case 16183",	1);
	create_insn	(0X1400132B3);
	create_insn	(x=0X1400132EF);
	op_hex		(x,	1);
	create_insn	(x=0X1400132F5);
	op_hex		(x,	1);
	create_insn	(x=0X1400132FF);
	op_hex		(x,	1);
	create_insn	(x=0X140013306);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001330A);
	op_hex		(x,	1);
	create_insn	(x=0X14001330E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013312);
	op_stkvar	(x,	0);
	set_cmt	(0X140013337,	"jumptable 0000000140012FDB case 16184",	1);
	create_insn	(x=0X140013337);
	op_hex		(x,	1);
	create_insn	(x=0X140013377);
	op_hex		(x,	1);
	create_insn	(x=0X140013381);
	op_hex		(x,	1);
	create_insn	(x=0X140013388);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001338C);
	op_hex		(x,	1);
	create_insn	(x=0X140013390);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013394);
	op_stkvar	(x,	0);
	create_insn	(0X1400133B3);
	set_cmt	(0X1400133C8,	"jumptable 0000000140012FDB case 16185",	1);
	create_insn	(x=0X1400133C8);
	op_hex		(x,	1);
	create_insn	(0X14001340A);
	set_cmt	(0X14001340C,	"Size",	0);
	set_cmt	(0X140013411,	"Src",	0);
	set_cmt	(0X140013414,	"void *",	0);
	create_insn	(x=0X14001341C);
	op_hex		(x,	1);
	create_insn	(x=0X140013426);
	op_hex		(x,	1);
	set_cmt	(0X140013462,	"jumptable 0000000140012FDB case 16186",	1);
	create_insn	(x=0X140013462);
	op_hex		(x,	1);
	create_insn	(x=0X1400134B5);
	op_hex		(x,	1);
	create_insn	(x=0X1400134BF);
	op_hex		(x,	1);
	create_insn	(0X1400134EE);
	set_cmt	(0X140013507,	"jumptable 0000000140012FDB case 16187",	1);
	create_insn	(x=0X140013507);
	op_hex		(x,	1);
	create_insn	(x=0X140013555);
	op_hex		(x,	1);
	create_insn	(x=0X14001355F);
	op_hex		(x,	1);
	create_insn	(0X14001358E);
	create_insn	(x=0X14001359B);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001359F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400135A3);
	op_stkvar	(x,	1);
	set_cmt	(0X1400135AF,	"jumptable 0000000140012FDB case 16188",	1);
	create_insn	(x=0X1400135AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400135E0);
	op_hex		(x,	1);
	create_insn	(x=0X1400135F1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140013606);
	create_insn	(x=0X140013619);
	op_hex		(x,	1);
	create_insn	(x=0X14001361C);
	op_hex		(x,	1);
	create_insn	(x=0X140013648);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001364C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013662);
	op_stkvar	(x,	1);
	set_cmt	(0X14001366E,	"jumptable 0000000140012FDB case 16189",	1);
	create_insn	(0X14001366E);
	create_insn	(x=0X14001369C);
	op_hex		(x,	1);
	create_insn	(x=0X14001369F);
	op_hex		(x,	1);
	create_insn	(x=0X1400136AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400136AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400136B1);
	op_hex		(x,	1);
	create_insn	(x=0X1400136B4);
	op_hex		(x,	1);
	set_cmt	(0X1400136D0,	"jumptable 0000000140012FDB case 16190",	1);
	create_insn	(x=0X1400136E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400136EB);
	op_stkvar	(x,	1);
	set_cmt	(0X140013706,	"jumptable 0000000140012FDB case 16191",	1);
	create_insn	(x=0X140013706);
	op_stkvar	(x,	1);
	set_cmt	(0X140013715,	"jumptable 0000000140012FDB case 16192",	1);
	create_insn	(x=0X140013726);
	op_hex		(x,	1);
	create_insn	(0X140013733);
	create_insn	(x=0X14001375B);
	op_hex		(x,	1);
	create_insn	(x=0X140013760);
	op_hex		(x,	1);
	create_insn	(x=0X14001376A);
	op_hex		(x,	1);
	create_insn	(x=0X14001377B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140013782);
	op_hex		(x,	1);
	create_insn	(x=0X14001379A);
	op_hex		(x,	1);
	create_insn	(x=0X1400137AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400137B1);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400137C3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400137E1);
	op_hex		(x,	1);
	create_insn	(0X1400137ED);
	create_insn	(x=0X1400137F5);
	op_hex		(x,	1);
	set_cmt	(0X140013801,	"jumptable 0000000140012FDB case 16193",	1);
	create_insn	(0X140013801);
	create_insn	(x=0X140013803);
	op_hex		(x,	1);
	create_insn	(x=0X140013839);
	op_hex		(x,	1);
	create_insn	(x=0X140013840);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140013858);
	create_insn	(x=0X14001385C);
	op_stkvar	(x,	1);
	set_cmt	(0X140013876,	"jumptable 0000000140012FDB case 16194",	1);
	set_cmt	(0X14001387E,	"jumptable 0000000140012FDB case 16195",	1);
	set_cmt	(0X14001389E,	"Size",	0);
	set_cmt	(0X1400138A1,	"Src",	0);
	set_cmt	(0X1400138A4,	"void *",	0);
	create_insn	(x=0X1400138AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400138B3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400138C0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400138CB);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400138CF);
	op_stkvar	(x,	0);
	create_insn	(0X1400138D8);
	set_cmt	(0X1400138E5,	"jumptable 0000000140012FDB case 16196",	1);
	create_insn	(0X1400138E5);
	create_insn	(x=0X140013913);
	op_hex		(x,	1);
	create_insn	(x=0X14001391D);
	op_hex		(x,	1);
	create_insn	(x=0X140013921);
	op_hex		(x,	1);
	create_insn	(x=0X140013927);
	op_hex		(x,	1);
	create_insn	(x=0X140013930);
	op_hex		(x,	1);
	create_insn	(x=0X140013935);
	op_hex		(x,	1);
	set_cmt	(0X14001396F,	"jumptable 0000000140012FDB case 16197",	1);
	create_insn	(x=0X1400139B6);
	op_offset		(x,	1,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	129,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_insn	(x=0X1400139BE);
	op_hex		(x,	1);
	create_insn	(x=0X1400139C2);
	op_hex		(x,	1);
	create_insn	(x=0X1400139F7);
	op_offset		(x,	1,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	129,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_insn	(x=0X140013A37);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013A43);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013A58);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013A5C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013A63);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140013A7B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140013A93);
	set_cmt	(0X140013AA6,	"jumptable 0000000140012FDB case 16198",	1);
	create_insn	(x=0X140013AEC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013AEF);
	op_hex		(x,	1);
	create_insn	(x=0X140013B37);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013B3A);
	op_hex		(x,	1);
	create_insn	(x=0X140013B46);
	op_hex		(x,	1);
	create_insn	(x=0X140013B4F);
	op_hex		(x,	1);
	create_insn	(0X140013B72);
	create_insn	(x=0X140013B74);
	op_hex		(x,	1);
	create_insn	(x=0X140013BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013BB9);
	op_hex		(x,	1);
	create_insn	(x=0X140013BC6);
	op_hex		(x,	1);
	create_insn	(x=0X140013BD4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013BD9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013C15);
	op_hex		(x,	1);
	create_insn	(x=0X140013C1B);
	op_hex		(x,	1);
	create_insn	(0X140013C21);
	create_insn	(x=0X140013C5D);
	op_hex		(x,	1);
	create_insn	(x=0X140013C63);
	op_hex		(x,	1);
	create_insn	(x=0X140013CE3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140013CFB);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140013D13);
	create_insn	(x=0X140013D28);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013D2D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013D59);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013D60);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140013D67);
	op_stkvar	(x,	1);
	create_insn	(0X140013D7C);
	create_insn	(x=0X140013DA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013DA9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013DC5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013DCC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140013DD5);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013DE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013DED);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013DF1);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013DF5);
	op_stkvar	(x,	1);
	set_cmt	(0X140013E00,	"jumptable 0000000140012FDB case 16199",	1);
	set_cmt	(0X140013E08,	"jumptable 0000000140012FDB case 16200",	1);
	create_insn	(x=0X140013E55);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013E59);
	op_stkvar	(x,	0);
	create_insn	(0X140013E73);
	create_insn	(x=0X140013E97);
	op_hex		(x,	1);
	create_insn	(x=0X140013ED8);
	op_hex		(x,	1);
	create_insn	(x=0X140013EEA);
	op_hex		(x,	1);
	create_insn	(x=0X140013EF8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140013EFB);
	op_hex		(x,	1);
	create_insn	(x=0X140013F0B);
	op_hex		(x,	1);
	create_insn	(x=0X140013F27);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013F2E);
	op_hex		(x,	1);
	create_insn	(x=0X140013F41);
	op_stkvar	(x,	1);
	create_insn	(x=0X140013F91);
	op_hex		(x,	1);
	create_insn	(x=0X140013FB2);
	op_hex		(x,	1);
	create_insn	(x=0X140013FC6);
	op_hex		(x,	1);
	create_insn	(x=0X140013FDE);
	op_hex		(x,	1);
	create_insn	(x=0X140013FF2);
	op_hex		(x,	1);
	create_insn	(x=0X140013FF6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14001400E);
	create_insn	(x=0X140014019);
	op_hex		(x,	1);
	set_cmt	(0X140014020,	"jumptable 0000000140012FDB case 16201",	1);
	set_cmt	(0X140014084,	"jumptable 0000000140012FDB case 16202",	1);
	create_insn	(x=0X1400140A0);
	op_hex		(x,	1);
	create_insn	(x=0X1400140E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400140F0);
	op_hex		(x,	1);
	create_insn	(x=0X1400140FE);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014101);
	op_hex		(x,	1);
	create_insn	(x=0X140014111);
	op_hex		(x,	1);
	create_insn	(x=0X14001412D);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014134);
	op_hex		(x,	1);
	create_insn	(x=0X140014147);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001419B);
	op_hex		(x,	1);
	create_insn	(x=0X1400141BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400141BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400141C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400141D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400141DA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400141F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014200);
	op_hex		(x,	1);
	create_insn	(x=0X14001420A);
	op_hex		(x,	1);
	set_cmt	(0X140014211,	"jumptable 0000000140012FDB case 16203",	1);
	set_cmt	(0X140014265,	"jumptable 0000000140012FDB case 16204",	1);
	create_insn	(x=0X14001428E);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X1400142A6);
	create_insn	(0X1400142B8);
	create_insn	(0X1400142CA);
	create_insn	(x=0X1400142E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014300);
	op_stkvar	(x,	0);
	set_cmt	(0X14001431B,	"jumptable 0000000140012FDB case 16205",	1);
	create_insn	(0X14001431B);
	create_insn	(x=0X140014333);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014337);
	op_stkvar	(x,	0);
	set_cmt	(0X140014348,	"jumptable 0000000140012FDB case 16206",	1);
	create_insn	(0X140014348);
	create_insn	(x=0X140014383);
	op_hex		(x,	1);
	create_insn	(0X1400143AD);
	create_insn	(x=0X1400143B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400143B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400143C1);
	op_hex		(x,	1);
	create_insn	(x=0X1400143C6);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400143D6);
	op_hex		(x,	1);
	create_insn	(x=0X1400143DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400143E7);
	op_hex		(x,	1);
	create_insn	(x=0X1400143EA);
	op_hex		(x,	1);
	create_insn	(x=0X1400143ED);
	op_hex		(x,	1);
	create_insn	(x=0X1400143F7);
	op_hex		(x,	1);
	create_insn	(x=0X140014402);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X14001441A);
	set_cmt	(0X140014428,	"jumptable 0000000140012FDB case 16207",	1);
	create_insn	(x=0X140014469);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140014481);
	create_insn	(x=0X14001449C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144A1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144B5);
	op_hex		(x,	1);
	create_insn	(0X1400144C1);
	set_cmt	(0X1400144CF,	"jumptable 0000000140012FDB case 16208",	1);
	create_insn	(x=0X1400144CF);
	op_stkvar	(x,	1);
	set_cmt	(0X1400144DA,	"jumptable 0000000140012FDB case 16209",	1);
	create_insn	(x=0X1400144DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144E9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144EE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144F1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400144F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014501);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014516);
	op_stkvar	(x,	1);
	set_cmt	(0X14001455A,	"jumptable 0000000140012FDB case 16210",	1);
	create_insn	(0X140014564);
	create_insn	(x=0X140014567);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001457A);
	op_hex		(x,	1);
	create_insn	(x=0X14001457F);
	op_stkvar	(x,	0);
	create_insn	(0X1400145A7);
	create_insn	(x=0X1400145AC);
	op_stkvar	(x,	1);
	create_insn	(0X1400145D3);
	create_insn	(x=0X1400145E9);
	op_hex		(x,	1);
	create_insn	(x=0X14001460C);
	op_stkvar	(x,	0);
	set_cmt	(0X140014626,	"jumptable 0000000140012FDB default case",	1);
	create_insn	(0X140014626);
	set_name	(0X140014626,	"def_140012FDB");
	create_insn	(0X140014630);
	create_insn	(x=0X140014635);
	op_hex		(x,	1);
	make_array	(0X140014641,	0X3);
	set_cmt	(0X140014644,	"jump table for switch statement",	0);
	create_dword	(x=0X140014644);
	make_array	(x,	0X1F);
	op_plain_offset	(x,	0,	0X140000000);
	op_plain_offset	(x,	128,	0X140000000);
	set_name	(0X140014644,	"jpt_140012FDB");
	create_insn	(0X1400146C0);
	set_name	(0X1400146C0,	"INLINED_sub_1400146C0");
	create_insn	(x=0X1400146C4);
	op_hex		(x,	1);
	create_insn	(x=0X140014723);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014728);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001474C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014782);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014787);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001478C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014791);
	op_hex		(x,	1);
	create_insn	(0X140014799);
	create_insn	(x=0X140014886);
	op_hex		(x,	1);
	create_insn	(x=0X1400148A5);
	op_hex		(x,	1);
	create_insn	(x=0X1400148C7);
	op_hex		(x,	1);
	set_cmt	(0X1400148E4,	"Src",	0);
	set_cmt	(0X1400148EB,	"void *",	0);
	set_cmt	(0X1400148EE,	"Size",	0);
	create_insn	(0X140014905);
	create_insn	(x=0X14001490A);
	op_hex		(x,	1);
	make_array	(0X140014912,	0XE);
	create_insn	(0X140014920);
	set_name	(0X140014920,	"inflateEnd");
	create_insn	(x=0X140014922);
	op_hex		(x,	1);
	create_insn	(x=0X14001497E);
	op_hex		(x,	1);
	create_insn	(0X140014984);
	create_insn	(x=0X140014989);
	op_hex		(x,	1);
	create_insn	(x=0X140014990);
	op_stkvar	(x,	0);
	set_name	(0X140014990,	"INLINED_sub_140014990");
	create_insn	(x=0X140014995);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001499B);
	op_hex		(x,	1);
	set_cmt	(0X1400149E2,	"void *",	0);
	set_cmt	(0X1400149E7,	"Src",	0);
	set_cmt	(0X1400149EB,	"Size",	0);
	set_cmt	(0X1400149F3,	"Size",	0);
	set_cmt	(0X1400149FA,	"Src",	0);
	set_cmt	(0X140014A01,	"void *",	0);
	create_insn	(x=0X140014A15);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014A1A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014A1F);
	op_hex		(x,	1);
	create_insn	(x=0X140014A25);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014A2A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014A34);
	op_hex		(x,	1);
	make_array	(0X140014A3A,	0X6);
	create_insn	(x=0X140014A40);
	op_stkvar	(x,	0);
	set_name	(0X140014A40,	"inflateInit2_");
	create_insn	(x=0X140014A46);
	op_hex		(x,	1);
	create_insn	(x=0X140014A74);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014A79);
	op_hex		(x,	1);
	create_insn	(x=0X140014A7F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014A86);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014A95);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140014AAA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140014AD2);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014AD7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014ADC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014AE1);
	op_hex		(x,	1);
	create_insn	(0X140014AE7);
	create_insn	(0X140014B1B);
	create_insn	(x=0X140014B20);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014B25);
	op_hex		(x,	1);
	make_array	(0X140014B2B,	0X5);
	create_insn	(0X140014B30);
	set_name	(0X140014B30,	"inflateInit_");
	create_insn	(x=0X140014B40);
	op_stkvar	(x,	0);
	set_name	(0X140014B40,	"inflateReset2");
	create_insn	(x=0X140014B45);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014B4B);
	op_hex		(x,	1);
	create_insn	(x=0X140014B9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014BA1);
	op_stkvar	(x,	0);
	create_insn	(0X140014BB4);
	create_insn	(x=0X140014BB6);
	op_hex		(x,	1);
	create_insn	(x=0X140014BC1);
	op_hex		(x,	1);
	set_cmt	(0X140014C1E,	"a1",	0);
	create_insn	(x=0X140014C26);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C2B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C30);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C35);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C3A);
	op_hex		(x,	1);
	create_insn	(0X140014C40);
	create_insn	(x=0X140014C47);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C4C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014C56);
	op_hex		(x,	1);
	make_array	(0X140014C5C,	0X4);
	create_insn	(0X140014C60);
	set_name	(0X140014C60,	"inflateReset");
	create_insn	(x=0X140014CB4);
	op_hex		(x,	1);
	create_insn	(0X140014D02);
	make_array	(0X140014D08,	0X8);
	create_insn	(x=0X140014D10);
	op_stkvar	(x,	0);
	set_name	(0X140014D10,	"INLINED_sub_140014D10");
	create_insn	(x=0X140014D15);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014D1A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014D20);
	op_hex		(x,	1);
	create_insn	(x=0X140014D6F);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014D74);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014D79);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014D7E);
	op_hex		(x,	1);
	create_insn	(0X140014D84);
	create_insn	(0X140014DB2);
	create_insn	(0X140014DD3);
	make_array	(0X140014DDE,	0X2);
	create_insn	(0X140014DE0);
	set_name	(0X140014DE0,	"INLINED_sub_140014DE0");
	create_insn	(0X140014E11);
	make_array	(0X140014E17,	0X9);
	create_insn	(0X140014E20);
	set_name	(0X140014E20,	"zlib_sub_140014E20");
	create_insn	(x=0X140014E23);
	op_hex		(x,	1);
	create_insn	(x=0X140014E81);
	op_hex		(x,	1);
	create_insn	(x=0X140014E88);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014E8D);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014E92);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014EB6);
	op_hex		(x,	1);
	create_insn	(x=0X140014ED7);
	op_hex		(x,	1);
	create_insn	(x=0X140014EE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X140014F03);
	op_stkvar	(x,	1);
	create_insn	(0X140014F25);
	create_insn	(0X140014F2E);
	create_insn	(x=0X140014F77);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014F7C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014F81);
	op_stkvar	(x,	1);
	create_insn	(x=0X140014F86);
	op_hex		(x,	1);
	create_insn	(0X140014F8D);
	set_cmt	(0X140014FBF,	"a1",	0);
	create_insn	(0X140014FD8);
	create_insn	(x=0X140014FDD);
	op_hex		(x,	1);
	make_array	(0X140014FE4,	0XC);
	create_insn	(x=0X140014FF0);
	op_stkvar	(x,	0);
	set_name	(0X140014FF0,	"zlib_sub_140014FF0");
	create_insn	(0X140015024);
	create_insn	(0X14001502D);
	create_insn	(x=0X140015047);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001504D);
	op_stkvar	(x,	1);
	make_array	(0X140015058,	0X8);
	create_insn	(x=0X140015060);
	op_stkvar	(x,	0);
	set_name	(0X140015060,	"zlib_sub_140015060");
	create_insn	(x=0X140015065);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001506A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015070);
	op_hex		(x,	1);
	create_insn	(x=0X1400150AE);
	op_stkvar	(x,	0);
	set_cmt	(0X1400150CF,	"void *",	0);
	set_cmt	(0X1400150D6,	"Size",	0);
	set_cmt	(0X1400150D9,	"Src",	0);
	create_insn	(0X1400150EA);
	set_cmt	(0X1400150F8,	"void *",	0);
	set_cmt	(0X1400150FC,	"Src",	0);
	set_cmt	(0X1400150FF,	"Size",	0);
	set_cmt	(0X14001510B,	"void *",	0);
	set_cmt	(0X14001510F,	"Size",	0);
	set_cmt	(0X140015115,	"Src",	0);
	create_insn	(0X140015125);
	create_insn	(x=0X140015142);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015149);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001514E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015153);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015158);
	op_hex		(x,	1);
	make_array	(0X14001515E,	0X2);
	create_insn	(0X140015160);
	set_name	(0X140015160,	"zlib_sub_140015160");
	create_insn	(0X14001516B);
	create_insn	(0X140015170);
	set_name	(0X140015170,	"zlib_sub_140015170");
	create_insn	(x=0X14001517A);
	op_hex		(x,	1);
	create_insn	(x=0X14001517F);
	op_hex		(x,	1);
	create_insn	(x=0X14001518C);
	op_hex		(x,	1);
	create_insn	(x=0X14001518F);
	op_hex		(x,	1);
	create_insn	(x=0X140015192);
	op_hex		(x,	1);
	create_insn	(x=0X140015196);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X14001519D);
	op_hex		(x,	1);
	create_insn	(x=0X1400151B0);
	op_hex		(x,	1);
	create_insn	(x=0X1400151BF);
	op_hex		(x,	1);
	create_insn	(x=0X1400151CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400151E3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400151EB);
	op_hex		(x,	1);
	create_insn	(x=0X140015206);
	op_hex		(x,	1);
	create_insn	(x=0X140015218);
	op_hex		(x,	1);
	create_insn	(x=0X14001522A);
	op_hex		(x,	1);
	create_insn	(x=0X14001524C);
	op_hex		(x,	1);
	create_insn	(x=0X14001525E);
	op_hex		(x,	1);
	create_insn	(x=0X140015270);
	op_hex		(x,	1);
	create_insn	(x=0X140015292);
	op_hex		(x,	1);
	create_insn	(x=0X1400152A4);
	op_hex		(x,	1);
	create_insn	(x=0X1400152B6);
	op_hex		(x,	1);
	create_insn	(x=0X1400152D8);
	op_hex		(x,	1);
	create_insn	(x=0X1400152EA);
	op_hex		(x,	1);
	create_insn	(x=0X1400152FC);
	op_hex		(x,	1);
	create_insn	(x=0X14001531E);
	op_hex		(x,	1);
	create_insn	(x=0X140015330);
	op_hex		(x,	1);
	create_insn	(x=0X140015342);
	op_hex		(x,	1);
	create_insn	(x=0X140015364);
	op_hex		(x,	1);
	create_insn	(x=0X14001536E);
	op_hex		(x,	1);
	create_insn	(x=0X140015388);
	op_hex		(x,	1);
	create_insn	(x=0X1400153AE);
	op_hex		(x,	1);
	create_insn	(x=0X1400153C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400153D2);
	op_hex		(x,	1);
	create_insn	(x=0X1400153F1);
	op_hex		(x,	1);
	create_insn	(x=0X1400153FB);
	op_hex		(x,	1);
	create_insn	(x=0X140015413);
	op_hex		(x,	1);
	create_insn	(x=0X140015432);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015440);
	op_hex		(x,	1);
	create_insn	(x=0X14001545A);
	op_hex		(x,	1);
	create_insn	(x=0X140015464);
	op_hex		(x,	1);
	create_insn	(x=0X14001547C);
	op_hex		(x,	1);
	create_insn	(x=0X1400154AA);
	op_hex		(x,	1);
	create_insn	(x=0X1400154BA);
	op_hex		(x,	1);
	create_insn	(x=0X1400154CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400154CD);
	op_hex		(x,	1);
	create_insn	(x=0X1400154D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400154DA);
	op_hex		(x,	1);
	create_insn	(x=0X1400154DD);
	op_hex		(x,	1);
	create_insn	(x=0X1400154E0);
	op_hex		(x,	1);
	make_array	(0X1400154EC,	0X4);
	create_insn	(x=0X1400154F0);
	op_hex		(x,	1);
	set_name	(0X1400154F0,	"INLINED_sub_1400154F0");
	create_insn	(x=0X14001550E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015520);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015531);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015537);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015540);
	op_hex		(x,	1);
	create_insn	(x=0X14001554A);
	op_hex		(x,	1);
	create_insn	(x=0X14001554E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015566);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015570);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015580);
	op_hex		(x,	1);
	create_insn	(x=0X14001558A);
	op_hex		(x,	1);
	create_insn	(x=0X14001558E);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400155B0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400155B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400155C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400155CA);
	op_hex		(x,	1);
	create_insn	(x=0X1400155CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400155E3);
	op_hex		(x,	1);
	create_insn	(x=0X1400155EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400155F8);
	op_hex		(x,	1);
	create_insn	(x=0X140015604);
	op_hex		(x,	1);
	create_insn	(x=0X14001560C);
	op_hex		(x,	1);
	create_insn	(x=0X140015614);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001561E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015630);
	op_hex		(x,	1);
	create_insn	(x=0X14001563A);
	op_hex		(x,	1);
	create_insn	(x=0X14001563E);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001564F);
	op_hex		(x,	1);
	create_insn	(x=0X140015657);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015660);
	op_hex		(x,	1);
	create_insn	(x=0X14001566C);
	op_hex		(x,	1);
	create_insn	(x=0X140015674);
	op_hex		(x,	1);
	create_insn	(x=0X140015683);
	op_hex		(x,	1);
	make_array	(0X14001568B,	0X5);
	create_insn	(0X140015690);
	set_name	(0X140015690,	"zlib_sub_140015690");
	create_insn	(x=0X14001569A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400156A6);
	op_hex		(x,	1);
	create_insn	(x=0X1400156B8);
	op_hex		(x,	1);
	create_insn	(x=0X1400156D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400156DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400156F8);
	op_hex		(x,	1);
	create_insn	(x=0X140015709);
	op_hex		(x,	1);
	create_insn	(x=0X14001571B);
	op_hex		(x,	1);
	create_insn	(x=0X140015739);
	op_hex		(x,	1);
	create_insn	(x=0X14001574B);
	op_hex		(x,	1);
	create_insn	(x=0X14001575D);
	op_hex		(x,	1);
	create_insn	(x=0X14001577B);
	op_hex		(x,	1);
	create_insn	(x=0X14001578D);
	op_hex		(x,	1);
	create_insn	(x=0X14001579F);
	op_hex		(x,	1);
	create_insn	(x=0X1400157BD);
	op_hex		(x,	1);
	create_insn	(x=0X1400157CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400157E1);
	op_hex		(x,	1);
	create_insn	(x=0X1400157FF);
	op_hex		(x,	1);
	create_insn	(x=0X140015811);
	op_hex		(x,	1);
	create_insn	(x=0X140015823);
	op_hex		(x,	1);
	create_insn	(x=0X140015841);
	op_hex		(x,	1);
	create_insn	(x=0X140015853);
	op_hex		(x,	1);
	create_insn	(x=0X140015869);
	op_hex		(x,	1);
	create_insn	(x=0X140015887);
	op_hex		(x,	1);
	create_insn	(x=0X140015899);
	op_hex		(x,	1);
	create_insn	(x=0X1400158AB);
	op_hex		(x,	1);
	create_insn	(x=0X1400158C6);
	op_hex		(x,	1);
	create_insn	(x=0X1400158D7);
	op_hex		(x,	1);
	create_insn	(x=0X1400158E8);
	op_hex		(x,	1);
	create_insn	(x=0X140015903);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015911);
	op_hex		(x,	1);
	create_insn	(x=0X14001592C);
	op_hex		(x,	1);
	create_insn	(x=0X14001593D);
	op_hex		(x,	1);
	create_insn	(x=0X14001594E);
	op_hex		(x,	1);
	create_insn	(x=0X14001597D);
	op_hex		(x,	1);
	make_array	(0X140015995,	0XB);
	create_insn	(0X1400159A0);
	set_name	(0X1400159A0,	"INLINED_sub_1400159A0");
	create_insn	(x=0X1400159C0);
	op_hex		(x,	1);
	create_insn	(x=0X1400159CB);
	op_hex		(x,	1);
	make_array	(0X1400159DC,	0X4);
	create_insn	(0X1400159E0);
	set_name	(0X1400159E0,	"INLINED_sub_1400159E0");
	create_insn	(x=0X1400159E6);
	op_hex		(x,	1);
	create_insn	(x=0X1400159F1);
	op_hex		(x,	1);
	make_array	(0X1400159F6,	0XA);
	create_insn	(0X140015A00);
	set_name	(0X140015A00,	"zlib_sub_140015A00");
	make_array	(0X140015A08,	0X8);
	create_insn	(x=0X140015A10);
	op_stkvar	(x,	0);
	set_name	(0X140015A10,	"INLINED_sub_140015A10");
	create_insn	(x=0X140015A22);
	op_hex		(x,	1);
	create_insn	(x=0X140015A25);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015A2B);
	op_hex		(x,	1);
	create_insn	(x=0X140015A40);
	op_hex		(x,	1);
	create_insn	(x=0X140015A50);
	op_hex		(x,	1);
	create_insn	(x=0X140015A5D);
	op_hex		(x,	1);
	create_insn	(x=0X140015A79);
	op_hex		(x,	1);
	create_insn	(x=0X140015ACC);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015AD1);
	op_hex		(x,	1);
	make_array	(0X140015AD8,	0X8);
	create_insn	(0X140015AE0);
	set_name	(0X140015AE0,	"zlib_sub_140015AE0");
	create_insn	(x=0X140015AE9);
	op_hex		(x,	1);
	create_insn	(x=0X140015B1D);
	op_hex		(x,	1);
	create_insn	(0X140015B28);
	create_insn	(0X140015B31);
	create_insn	(x=0X140015B68);
	op_hex		(x,	1);
	create_insn	(x=0X140015B71);
	op_hex		(x,	1);
	create_insn	(0X140015B77);
	create_insn	(x=0X140015B97);
	op_hex		(x,	1);
	create_insn	(x=0X140015B9D);
	op_hex		(x,	1);
	create_insn	(x=0X140015C72);
	op_hex		(x,	1);
	create_insn	(x=0X140015C85);
	op_hex		(x,	1);
	create_insn	(x=0X140015CB0);
	op_hex		(x,	1);
	create_insn	(x=0X140015D99);
	op_hex		(x,	1);
	create_insn	(x=0X140015DAC);
	op_hex		(x,	1);
	create_insn	(x=0X140015DB8);
	op_hex		(x,	1);
	make_array	(0X140015DC3,	0XD);
	create_insn	(x=0X140015DD0);
	op_stkvar	(x,	0);
	set_name	(0X140015DD0,	"zlib_sub_140015DD0");
	create_insn	(x=0X140015DD5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015DDA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015DEB);
	op_hex		(x,	1);
	create_insn	(x=0X140015DF7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015E27);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015E31);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015E3B);
	op_hex		(x,	1);
	create_insn	(x=0X140015E45);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015E65);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015E6C);
	op_stkvar	(x,	1);
	create_insn	(0X140015E8B);
	create_insn	(x=0X140015E96);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015EC0);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015ED4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015EF2);
	op_hex		(x,	1);
	create_insn	(x=0X140015EFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015EFF);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F10);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015F19);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015F1E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F33);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015F42);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015F4E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F5E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015F6C);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140015F76);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F7A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140015F81);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F87);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140015F93);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015F97);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140015F9E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FA8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X140015FC8);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FCC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X140015FD8);
	op_stkvar	(x,	0);
	create_insn	(0X140015FE9);
	create_insn	(x=0X140016000);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016016);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016026);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001602A);
	op_stkvar	(x,	0);
	create_insn	(0X140016030);
	create_insn	(x=0X140016034);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016041);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016044);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001604E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016054);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016058);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016090);
	op_hex		(x,	1);
	create_insn	(0X1400160A8);
	create_insn	(x=0X1400160AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160BA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400160BF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400160CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160D1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160DE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160EB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400160F7);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016106);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001611E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016130);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016147);
	op_stkvar	(x,	1);
	create_insn	(0X140016167);
	create_insn	(x=0X140016176);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001617A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016199);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161A3);
	op_hex		(x,	1);
	create_insn	(x=0X1400161AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161AF);
	op_stkvar	(x,	1);
	create_insn	(0X1400161B7);
	create_insn	(x=0X1400161BF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400161C3);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400161C7);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400161CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161D5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161DC);
	op_hex		(x,	1);
	create_insn	(x=0X1400161E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161E6);
	op_stkvar	(x,	1);
	create_insn	(0X1400161F0);
	create_insn	(x=0X1400161F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400161FA);
	op_hex		(x,	1);
	make_array	(0X14001620C,	0X4);
	create_insn	(x=0X140016210);
	op_stkvar	(x,	0);
	set_name	(0X140016210,	"zlib_sub_140016210");
	create_insn	(x=0X140016221);
	op_hex		(x,	1);
	create_insn	(x=0X14001626F);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001627B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016285);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016291);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400162AF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400162B4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400162B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400162C1);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400162FA);
	op_hex		(x,	1);
	create_insn	(x=0X140016310);
	op_hex		(x,	1);
	create_insn	(x=0X140016315);
	op_hex		(x,	1);
	create_insn	(x=0X140016320);
	op_hex		(x,	1);
	create_insn	(x=0X14001633A);
	op_hex		(x,	1);
	create_insn	(x=0X14001634A);
	op_hex		(x,	1);
	create_insn	(x=0X14001635A);
	op_hex		(x,	1);
	create_insn	(x=0X14001635E);
	op_hex		(x,	1);
	create_insn	(x=0X1400163AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400163C4);
	op_hex		(x,	1);
	create_insn	(x=0X1400163CF);
	op_hex		(x,	1);
	create_insn	(x=0X1400163D4);
	op_hex		(x,	1);
	create_insn	(x=0X1400163DF);
	op_hex		(x,	1);
	create_insn	(x=0X1400163E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400163F9);
	op_hex		(x,	1);
	create_insn	(x=0X140016404);
	op_hex		(x,	1);
	create_insn	(x=0X140016409);
	op_hex		(x,	1);
	create_insn	(x=0X14001640C);
	op_hex		(x,	1);
	create_insn	(x=0X14001644F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001645F);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001647C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016487);
	op_stkvar	(x,	1);
	create_insn	(0X1400164B8);
	create_insn	(x=0X1400164C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400164CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016525);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001656C);
	op_hex		(x,	1);
	create_insn	(x=0X1400165B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400165D0);
	op_stkvar	(x,	1);
	create_insn	(0X1400165D7);
	create_insn	(x=0X140016611);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001662E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016633);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016641);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001664B);
	op_hex		(x,	1);
	create_insn	(x=0X14001664E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016663);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140016679);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140016680);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016697);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400166A0);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400166AF);
	op_hex		(x,	1);
	create_insn	(x=0X1400166EE);
	op_hex		(x,	1);
	create_insn	(0X140016700);
	set_name	(0X140016700,	"m_zalloc");
	make_array	(0X14001670D,	0X3);
	create_insn	(0X140016710);
	set_name	(0X140016710,	"m_zfree");
	make_array	(0X14001671A,	0X2);
	create_insn	(0X14001671C);
	set_name	(0X14001671C,	"my_atoi2");
	create_insn	(x=0X14001671E);
	op_hex		(x,	1);
	create_insn	(x=0X140016744);
	op_hex		(x,	1);
	make_array	(0X14001674A,	0X2);
	create_insn	(0X14001674C);
	set_name	(0X14001674C,	"my_atoi3");
	create_insn	(x=0X14001674E);
	op_hex		(x,	1);
	create_insn	(x=0X140016758);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001676E);
	op_hex		(x,	1);
	create_insn	(x=0X140016775);
	op_hex		(x,	1);
	create_insn	(x=0X14001679C);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400167B8);
	op_hex		(x,	1);
	make_array	(0X1400167BE,	0X2);
	create_insn	(0X1400167C0);
	set_name	(0X1400167C0,	"mask_walk");
	create_insn	(x=0X1400167C2);
	op_hex		(x,	1);
	create_insn	(0X1400167D2);
	create_insn	(0X1400167F8);
	create_insn	(0X14001680A);
	create_insn	(x=0X140016820);
	op_hex		(x,	1);
	make_array	(0X140016826,	0X2);
	create_insn	(0X140016828);
	set_name	(0X140016828,	"stu602_cpy");
	create_insn	(x=0X140016831);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016836);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001683B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016844);
	op_hex		(x,	1);
	set_cmt	(0X140016850,	"Size",	0);
	create_insn	(x=0X140016856);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400168B8);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400168C7);
	op_hex		(x,	1);
	create_insn	(x=0X1400168CB);
	op_stkvar	(x,	1);
	create_insn	(0X1400168E9);
	create_insn	(x=0X1400168FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016901);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016906);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001690B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016913);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016924);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016947);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016954);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001695C);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016961);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016966);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001696E);
	op_stkvar	(x,	1);
	create_insn	(0X14001697C);
	create_insn	(0X1400169A0);
	create_insn	(x=0X1400169B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400169C2);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400169DC);
	op_stkvar	(x,	0);
	create_insn	(0X140016A00);
	create_insn	(x=0X140016A12);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016A22);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016A45);
	op_stkvar	(x,	1);
	create_insn	(0X140016A64);
	create_insn	(x=0X140016A76);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016A86);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016AA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016AAF);
	op_stkvar	(x,	1);
	create_insn	(0X140016AC9);
	create_insn	(x=0X140016AD6);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016AEB);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016AFF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016B19);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016B39);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016B46);
	op_stkvar	(x,	1);
	set_cmt	(0X140016B50,	"Src",	0);
	set_cmt	(0X140016B57,	"Size",	0);
	set_cmt	(0X140016B5A,	"void *",	0);
	create_insn	(x=0X140016B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016B67);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016B76);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016B85);
	op_stkvar	(x,	1);
	set_cmt	(0X140016B9F,	"Src",	0);
	create_insn	(0X140016B9F);
	create_insn	(x=0X140016BA7);
	op_hex		(x,	1);
	create_insn	(x=0X140016BB0);
	op_stkvar	(x,	0);
	set_name	(0X140016BB0,	"dtor_by_MASK");
	create_insn	(x=0X140016BB8);
	op_hex		(x,	1);
	create_insn	(0X140016BCA);
	create_insn	(0X140016C1D);
	set_cmt	(0X140016C28,	"aMASK",	0);
	create_insn	(x=0X140016C32);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016C37);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016C3C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016C41);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016C4F);
	op_stkvar	(x,	1);
	set_cmt	(0X140016C5D,	"aRoot",	0);
	create_insn	(x=0X140016C65);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016C6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016C79);
	op_stkvar	(x,	1);
	create_insn	(0X140016C80);
	set_cmt	(0X140016C83,	"aMASK",	0);
	set_cmt	(0X140016C8B,	"aRoot",	0);
	create_insn	(0X140016C95);
	create_insn	(0X140016C9E);
	create_insn	(0X140016CB1);
	create_insn	(0X140016CC4);
	create_insn	(x=0X140016CED);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016CF2);
	op_hex		(x,	1);
	make_array	(0X140016CFA,	0X2);
	create_insn	(x=0X140016CFC);
	op_stkvar	(x,	0);
	set_name	(0X140016CFC,	"ctor_c602");
	create_insn	(x=0X140016D05);
	op_hex		(x,	1);
	create_insn	(x=0X140016D6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016D79);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016D8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016DA6);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016DAB);
	op_stkvar	(x,	1);
	create_insn	(0X140016DB8);
	create_insn	(0X140016DD2);
	create_insn	(x=0X140016DE7);
	op_stkvar	(x,	0);
	create_insn	(0X140016E03);
	create_insn	(0X140016E26);
	create_insn	(x=0X140016E47);
	op_stkvar	(x,	0);
	create_insn	(0X140016E53);
	create_insn	(x=0X140016E95);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016EAD);
	op_hex		(x,	1);
	make_array	(0X140016EB6,	0X2);
	create_insn	(x=0X140016EB8);
	op_stkvar	(x,	0);
	set_name	(0X140016EB8,	"rso_call_back");
	create_insn	(x=0X140016EBD);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016EC3);
	op_hex		(x,	1);
	set_cmt	(0X140016ECA,	"WaitHandle",	0);
	set_cmt	(0X140016ED4,	"hObject",	0);
	set_cmt	(0X140016EDE,	"lpCriticalSection",	0);
	create_insn	(x=0X140016EDE);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140016EFD);
	set_cmt	(0X140016F13,	"lpCriticalSection",	0);
	create_insn	(x=0X140016F13);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X140016F26);
	set_cmt	(0X140016F33,	"hHeap",	0);
	set_cmt	(0X140016F3A,	"lpMem",	0);
	set_cmt	(0X140016F3D,	"dwFlags",	0);
	create_insn	(x=0X140016F56);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016F5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140016F60);
	op_hex		(x,	1);
	create_insn	(x=0X140016F6C);
	op_hex		(x,	1);
	set_name	(0X140016F6C,	"INLINED_sub_140016F6C");
	set_cmt	(0X140016F79,	"dwTlsIndex",	0);
	create_insn	(0X140016F87);
	set_cmt	(0X140016F9B,	"lpCriticalSection",	0);
	create_insn	(x=0X140016F9B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140016FA8);
	op_hex		(x,	1);
	create_insn	(x=0X140016FAF);
	op_hex		(x,	1);
	create_insn	(x=0X140016FB4);
	op_stkvar	(x,	0);
	set_name	(0X140016FB4,	"add_to_rso");
	create_insn	(x=0X140016FB9);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016FBE);
	op_stkvar	(x,	0);
	create_insn	(x=0X140016FC8);
	op_hex		(x,	1);
	create_insn	(x=0X140016FD9);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X140016FE8,	"lpCriticalSection",	0);
	set_cmt	(0X140017001,	"dwTlsIndex",	0);
	set_cmt	(0X140017019,	"hHeap",	0);
	set_cmt	(0X140017020,	"dwFlags",	0);
	set_cmt	(0X140017023,	"dwBytes",	0);
	set_cmt	(0X140017039,	"lpCriticalSection",	0);
	set_cmt	(0X140017051,	"lpCriticalSection",	0);
	create_insn	(x=0X14001707D);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X140017082);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X140017087,	"lpTargetHandle",	0);
	set_cmt	(0X14001708B,	"hTargetProcessHandle",	0);
	set_cmt	(0X14001708E,	"hSourceProcessHandle",	0);
	set_cmt	(0X140017091,	"hSourceHandle",	0);
	set_cmt	(0X140017094,	"dwMilliseconds",	0);
	create_insn	(x=0X140017094);
	op_stkvar	(x,	0);
	set_cmt	(0X1400170A2,	"hObject",	0);
	set_cmt	(0X1400170A6,	"phNewWaitObject",	0);
	set_cmt	(0X1400170AA,	"Callback",	0);
	create_insn	(x=0X1400170AA);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X1400170B1,	"Context",	0);
	set_cmt	(0X1400170B4,	"dwFlags",	0);
	create_insn	(x=0X1400170B4);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400170BC);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X1400170C7,	"dwTlsIndex",	0);
	set_cmt	(0X1400170CD,	"lpTlsValue",	0);
	set_cmt	(0X1400170D6,	"hHeap",	0);
	set_cmt	(0X1400170DD,	"dwFlags",	0);
	set_cmt	(0X1400170DF,	"dwBytes",	0);
	create_insn	(x=0X140017101);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017106);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001710B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017110);
	op_hex		(x,	1);
	make_array	(0X14001711A,	0X2);
	create_insn	(x=0X14001711C);
	op_hex		(x,	1);
	set_name	(0X14001711C,	"Callback");
	create_insn	(x=0X140017129);
	op_hex		(x,	1);
	make_array	(0X14001712E,	0X2);
	create_insn	(0X140017130);
	set_name	(0X140017130,	"j_free");
	make_array	(0X140017135,	0XB);
	create_insn	(x=0X140017140);
	op_stkvar	(x,	0);
	set_name	(0X140017140,	"myWideCharToMultiByte");
	create_insn	(x=0X140017145);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001714A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001714F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017156);
	op_hex		(x,	1);
	create_insn	(x=0X140017166);
	op_hex		(x,	1);
	set_cmt	(0X14001717F,	"lpWideCharStr",	0);
	set_cmt	(0X140017182,	"cchWideChar",	0);
	set_cmt	(0X140017186,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X140017186);
	op_stkvar	(x,	0);
	set_cmt	(0X14001718B,	"lpDefaultChar",	0);
	create_insn	(x=0X14001718B);
	op_stkvar	(x,	0);
	set_cmt	(0X140017190,	"dwFlags",	0);
	set_cmt	(0X140017192,	"CodePage",	0);
	set_cmt	(0X140017197,	"cbMultiByte",	0);
	create_insn	(x=0X140017197);
	op_stkvar	(x,	0);
	set_cmt	(0X14001719C,	"lpMultiByteStr",	0);
	create_insn	(x=0X14001719C);
	op_stkvar	(x,	0);
	set_cmt	(0X1400171AE,	"Size",	0);
	set_cmt	(0X1400171BF,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X1400171BF);
	op_stkvar	(x,	0);
	set_cmt	(0X1400171C4,	"lpDefaultChar",	0);
	create_insn	(x=0X1400171C4);
	op_stkvar	(x,	0);
	set_cmt	(0X1400171C9,	"cchWideChar",	0);
	set_cmt	(0X1400171CD,	"lpWideCharStr",	0);
	set_cmt	(0X1400171D0,	"dwFlags",	0);
	set_cmt	(0X1400171D2,	"CodePage",	0);
	set_cmt	(0X1400171D7,	"cbMultiByte",	0);
	create_insn	(x=0X1400171D7);
	op_stkvar	(x,	0);
	set_cmt	(0X1400171DB,	"lpMultiByteStr",	0);
	create_insn	(x=0X1400171DB);
	op_stkvar	(x,	0);
	set_cmt	(0X1400171F2,	"Size",	0);
	create_insn	(0X1400171F2);
	create_insn	(x=0X1400171FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017204);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017209);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001720E);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017213);
	op_hex		(x,	1);
	make_array	(0X14001721A,	0X6);
	create_insn	(x=0X140017220);
	op_stkvar	(x,	0);
	set_name	(0X140017220,	"INLINED_sub_140017220");
	create_insn	(x=0X140017225);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001722A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017230);
	op_hex		(x,	1);
	create_insn	(x=0X140017237);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X140017244);
	op_hex		(x,	1);
	set_cmt	(0X14001725D,	"cbMultiByte",	0);
	set_cmt	(0X140017261,	"lpMultiByteStr",	0);
	set_cmt	(0X140017264,	"cchWideChar",	0);
	create_insn	(x=0X140017264);
	op_stkvar	(x,	0);
	set_cmt	(0X140017268,	"dwFlags",	0);
	set_cmt	(0X14001726A,	"CodePage",	0);
	set_cmt	(0X14001726F,	"lpWideCharStr",	0);
	create_insn	(x=0X14001726F);
	op_stkvar	(x,	0);
	set_cmt	(0X140017287,	"cbMultiByte",	0);
	set_cmt	(0X14001728B,	"lpMultiByteStr",	0);
	set_cmt	(0X14001728E,	"dwFlags",	0);
	set_cmt	(0X140017290,	"CodePage",	0);
	set_cmt	(0X140017295,	"cchWideChar",	0);
	create_insn	(x=0X140017295);
	op_stkvar	(x,	0);
	set_cmt	(0X140017299,	"lpWideCharStr",	0);
	create_insn	(x=0X140017299);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400172A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400172A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400172AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400172B3);
	op_hex		(x,	1);
	make_array	(0X1400172B9,	0X7);
	create_insn	(x=0X1400172C0);
	op_stkvar	(x,	0);
	set_name	(0X1400172C0,	"INLINED_sub_1400172C0");
	create_insn	(x=0X1400172C5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400172CA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400172D0);
	op_hex		(x,	1);
	create_insn	(x=0X1400172D7);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X1400172E2);
	op_hex		(x,	1);
	set_cmt	(0X1400172FD,	"cbMultiByte",	0);
	set_cmt	(0X140017301,	"lpMultiByteStr",	0);
	set_cmt	(0X140017304,	"cchWideChar",	0);
	create_insn	(x=0X140017304);
	op_stkvar	(x,	0);
	set_cmt	(0X140017308,	"dwFlags",	0);
	set_cmt	(0X14001730A,	"CodePage",	0);
	set_cmt	(0X14001730F,	"lpWideCharStr",	0);
	create_insn	(x=0X14001730F);
	op_stkvar	(x,	0);
	set_cmt	(0X14001731D,	"Size",	0);
	set_cmt	(0X140017326,	"cbMultiByte",	0);
	set_cmt	(0X14001732A,	"lpMultiByteStr",	0);
	set_cmt	(0X14001732D,	"dwFlags",	0);
	set_cmt	(0X14001732F,	"CodePage",	0);
	set_cmt	(0X140017334,	"cchWideChar",	0);
	create_insn	(x=0X140017334);
	op_stkvar	(x,	0);
	set_cmt	(0X14001733B,	"lpWideCharStr",	0);
	create_insn	(x=0X14001733B);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017346);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001734B);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017353);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017358);
	op_hex		(x,	1);
	make_array	(0X14001735E,	0X2);
	create_insn	(x=0X140017360);
	op_stkvar	(x,	0);
	set_name	(0X140017360,	"INLINED_sub_140017360");
	create_insn	(x=0X140017365);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001736A);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001736F);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017376);
	op_hex		(x,	1);
	create_insn	(x=0X140017387);
	op_hex		(x,	1);
	set_cmt	(0X140017399,	"lpMultiByteStr",	0);
	set_cmt	(0X14001739C,	"cbMultiByte",	0);
	set_cmt	(0X14001739F,	"dwFlags",	0);
	set_cmt	(0X1400173A1,	"CodePage",	0);
	set_cmt	(0X1400173A3,	"cchWideChar",	0);
	create_insn	(x=0X1400173A3);
	op_stkvar	(x,	0);
	set_cmt	(0X1400173A8,	"lpWideCharStr",	0);
	create_insn	(x=0X1400173A8);
	op_stkvar	(x,	0);
	set_cmt	(0X1400173C2,	"cbMultiByte",	0);
	set_cmt	(0X1400173C5,	"lpMultiByteStr",	0);
	set_cmt	(0X1400173C8,	"dwFlags",	0);
	set_cmt	(0X1400173CA,	"CodePage",	0);
	set_cmt	(0X1400173CC,	"cchWideChar",	0);
	create_insn	(x=0X1400173CC);
	op_stkvar	(x,	0);
	set_cmt	(0X1400173D3,	"lpWideCharStr",	0);
	create_insn	(x=0X1400173D3);
	op_stkvar	(x,	0);
	create_insn	(0X1400173E8);
	create_insn	(x=0X1400173F5);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400173FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400173FF);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017404);
	op_stkvar	(x,	1);
	create_insn	(x=0X140017409);
	op_hex		(x,	1);
	create_insn	(x=0X140017410);
	op_stkvar	(x,	0);
	set_name	(0X140017410,	"INLINED_sub_140017410");
	create_insn	(x=0X140017415);
	op_stkvar	(x,	0);
	create_insn	(x=0X14001741A);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017421);
	op_hex		(x,	1);
	create_insn	(x=0X140017430);
	op_hex		(x,	1);
	set_cmt	(0X14001743D,	"lpMultiByteStr",	0);
	set_cmt	(0X140017440,	"cbMultiByte",	0);
	set_cmt	(0X140017443,	"dwFlags",	0);
	set_cmt	(0X140017445,	"CodePage",	0);
	set_cmt	(0X140017447,	"cchWideChar",	0);
	create_insn	(x=0X140017447);
	op_stkvar	(x,	0);
	set_cmt	(0X14001744C,	"lpWideCharStr",	0);
	create_insn	(x=0X14001744C);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017460);
	op_stkvar	(x,	0);
	set_cmt	(0X140017468,	"Size",	0);
	set_cmt	(0X140017470,	"cbMultiByte",	0);
	set_cmt	(0X140017473,	"lpMultiByteStr",	0);
	set_cmt	(0X140017476,	"dwFlags",	0);
	set_cmt	(0X140017478,	"CodePage",	0);
	set_cmt	(0X14001747A,	"cchWideChar",	0);
	create_insn	(x=0X14001747A);
	op_stkvar	(x,	0);
	set_cmt	(0X140017481,	"lpWideCharStr",	0);
	create_insn	(x=0X140017481);
	op_stkvar	(x,	0);
	create_insn	(x=0X140017497);
	op_stkvar	(x,	1);
	set_cmt	(0X14001749E,	"Size",	0);
	create_insn	(0X14001749E);
	create_insn	(x=0X1400174AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400174B1);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400174B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400174BB);
	op_hex		(x,	1);
	make_array	(0X1400174C2,	0XE);
	create_insn	(0X1400174D0);
	set_name	(0X1400174D0,	"j_free_0");
	make_array	(0X1400174D5,	0XB);
	create_insn	(x=0X1400174E0);
	op_stkvar	(x,	0);
	set_name	(0X1400174E0,	"INLINED_2sub_1400174E0");
	create_insn	(x=0X1400174E5);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400174EA);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400174EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X1400174F6);
	op_hex		(x,	1);
	create_insn	(x=0X140017506);
	op_hex		(x,	1);
	set_cmt	(0X14001751F,	"lpWideCharStr",	0);
	set_cmt	(0X140017522,	"cchWideChar",	0);
	set_cmt	(0X140017526,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X140017526);
	op_stkvar	(x,	0);
	set_cmt	(0X14001752B,	"lpDefaultChar",	0);
	create_insn	(x=0X14001752B);
	op_stkvar	(x,	0);
	set_cmt	(0X140017530,	"dwFlags",	0);
	set_cmt	(0X140017532,	"CodePage",	0);
	set_cmt	(0X140017534,	"cbMultiByte",	0);
	create_insn	(x=0X140017534);
	op_stkvar	(x,	0);
	set_cmt	(0X140017539,	"lpMultiByteStr",	0);
	create_insn	(x=0X140017539);
	op_stkvar	(x,	0);
	set_cmt	(0X14001754D,	"Size",	0);
	set_cmt	(0X14001755D,	"lpUsedDefaultChar",	0);
	create_insn	(x=0X14001755D);
	op_stkvar	(x,	0);
	set_cmt	(0X140017562,	"lpDefaultChar",	0);
	create_insn	(x=0X140017562);
	op_stkvar	(x,	0);
	set_cmt	(0X140017567,	"cchWideChar",	0);
	set_cmt	(0X14001756B,	"lpWideCharStr",	0);
	set_cmt	(0X14001756E,	"dwFlags",	0);
	set_cmt	(0X140017570,	"CodePage",	0);
	set_cmt	(0X140017572,	"cbMultiByte",	0);
	create_insn	(x=0X140017572);
	op_stkvar	(x,	0);
	set_cmt	(0X140017576,	"lpMultiByteStr",	0);
	create_insn	(x=0X140017576);
	op_stkvar	(x,	0);
	set_cmt	(0X14001758D,	"Size",	0);
	create_insn	(0X14001758D);
	create_insn	(x=0X14001759A);
	op_stkvar	(x,	1);
	create_insn	(x=0X14001759F);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400175A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400175A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X1400175AE);
	op_hex		(x,	1);
	make_array	(0X1400175B5,	0X4B);
	create_qword	(0X140017600);
	make_array	(0X140017600,	0X140);
	update_extra_cmt		(0X140018000,	E_PREV + 0,	"; Section 3. (virtual address 00018000)");
	update_extra_cmt		(0X140018000,	E_PREV + 1,	"; Virtual size                  : 00004B3D (  19261.)");
	update_extra_cmt		(0X140018000,	E_PREV + 2,	"; Section size in file          : 00004C00 (  19456.)");
	update_extra_cmt		(0X140018000,	E_PREV + 3,	"; Offset to raw data for section: 00016600");
	update_extra_cmt		(0X140018000,	E_PREV + 4,	"; Flags 40000040: Data Readable");
	update_extra_cmt		(0X140018000,	E_PREV + 5,	"; Alignment     : default");
	MakeStruct	(0X140019234,	"UNWIND_INFO_HDR");
	MakeStruct	(0X140019514,	"UNWIND_INFO_HDR");
	MakeStruct	(0X140019524,	"UNWIND_INFO_HDR");
	MakeStruct	(0X140019584,	"UNWIND_INFO_HDR");
	MakeStruct	(0X14001958C,	"UNWIND_INFO_HDR");
	MakeStruct	(0X140019594,	"UNWIND_INFO_HDR");
	MakeStruct	(0X1400195AC,	"UNWIND_INFO_HDR");
	MakeStruct	(0X1400195C0,	"UNWIND_INFO_HDR");
	MakeStruct	(0X1400195D4,	"UNWIND_INFO_HDR");
	set_cmt	(0X1400195D8,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195D8,	"UNWIND_CODE");
	create_word	(x=0X1400195DA);
	op_hex		(x,	0);
	set_cmt	(0X1400195DC,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195DC,	"UNWIND_CODE");
	create_word	(x=0X1400195DE);
	op_hex		(x,	0);
	set_cmt	(0X1400195E0,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195E0,	"UNWIND_CODE");
	create_word	(x=0X1400195E2);
	op_hex		(x,	0);
	set_cmt	(0X1400195E4,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195E4,	"UNWIND_CODE");
	create_word	(x=0X1400195E6);
	op_hex		(x,	0);
	set_cmt	(0X1400195E8,	"UWOP_ALLOC_SMALL",	0);
	MakeStruct	(0X1400195E8,	"UNWIND_CODE");
	set_cmt	(0X1400195EA,	"UWOP_PUSH_NONVOL",	0);
	MakeStruct	(0X1400195EA,	"UNWIND_CODE");
	MakeStruct	(0X1400195EC,	"UNWIND_INFO_HDR");
	set_cmt	(0X1400195F0,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195F0,	"UNWIND_CODE");
	create_word	(x=0X1400195F2);
	op_hex		(x,	0);
	set_cmt	(0X1400195F4,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195F4,	"UNWIND_CODE");
	create_word	(x=0X1400195F6);
	op_hex		(x,	0);
	set_cmt	(0X1400195F8,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195F8,	"UNWIND_CODE");
	create_word	(x=0X1400195FA);
	op_hex		(x,	0);
	set_cmt	(0X1400195FC,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X1400195FC,	"UNWIND_CODE");
	create_word	(x=0X1400195FE);
	op_hex		(x,	0);
	set_cmt	(0X140019600,	"UWOP_ALLOC_SMALL",	0);
	MakeStruct	(0X140019600,	"UNWIND_CODE");
	set_cmt	(0X140019602,	"UWOP_PUSH_NONVOL",	0);
	MakeStruct	(0X140019602,	"UNWIND_CODE");
	MakeStruct	(0X140019604,	"UNWIND_INFO_HDR");
	set_cmt	(0X140019608,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X140019608,	"UNWIND_CODE");
	create_word	(x=0X14001960A);
	op_hex		(x,	0);
	set_cmt	(0X14001960C,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X14001960C,	"UNWIND_CODE");
	create_word	(x=0X14001960E);
	op_hex		(x,	0);
	set_cmt	(0X140019610,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X140019610,	"UNWIND_CODE");
	create_word	(x=0X140019612);
	op_hex		(x,	0);
	set_cmt	(0X140019614,	"UWOP_ALLOC_SMALL",	0);
	MakeStruct	(0X140019614,	"UNWIND_CODE");
	set_cmt	(0X140019616,	"UWOP_PUSH_NONVOL",	0);
	MakeStruct	(0X140019616,	"UNWIND_CODE");
	MakeStruct	(0X140019618,	"UNWIND_INFO_HDR");
	set_cmt	(0X14001961C,	"UWOP_SAVE_NONVOL",	0);
	MakeStruct	(0X14001961C,	"UNWIND_CODE");
	create_word	(x=0X14001961E);
	op_hex		(x,	0);
	MakeStruct	(0X140019620,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001962C,	"UNWIND_INFO_HDR");
	MakeStruct	(0X140019630,	"RUNTIME_FUNCTION");
	create_dword	(0X14001963C);
	set_name	(0X14001963C,	"nullstr");
	create_strlit	(0X140019640,	0X8);
	set_name	(0X140019640,	"g_SPACE");
	create_strlit	(0X140019648,	0X1E);
	set_name	(0X140019648,	"aInputrequester");
	make_array	(0X140019666,	0X2);
	create_strlit	(0X140019668,	0XE);
	set_name	(0X140019668,	"ClassName");
	make_array	(0X140019676,	0X2);
	create_strlit	(0X140019678,	0XA);
	set_name	(0X140019678,	"aEdit");
	make_array	(0X140019682,	0X2);
	create_strlit	(0X140019684,	0X6);
	set_name	(0X140019684,	"WindowName");
	make_array	(0X14001968A,	0X6);
	create_strlit	(0X140019690,	0XE);
	set_name	(0X140019690,	"aButton");
	make_array	(0X14001969E,	0X2);
	MakeStruct	(0X1400196A0,	"__m128i");
	create_strlit	(0X1400196B0,	0X18);
	set_name	(0X1400196B0,	"LibFileName");
	create_strlit	(0X1400196C8,	0X13);
	set_name	(0X1400196C8,	"ProcName");
	make_array	(0X1400196DB,	0X5);
	create_strlit	(0X1400196E0,	0X15);
	set_name	(0X1400196E0,	"aShgetpathfromi");
	make_array	(0X1400196F5,	0X3);
	create_strlit	(0X1400196F8,	0XA);
	set_name	(0X1400196F8,	"String2");
	make_array	(0X140019702,	0XE);
	create_qword	(0X140019710);
	set_name	(0X140019710,	"exErrItemList");
	create_qword	(x=0X140019718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019720);
	create_qword	(x=0X140019728);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019730);
	create_qword	(x=0X140019738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019740);
	create_qword	(x=0X140019748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019750);
	create_qword	(x=0X140019758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019760);
	create_qword	(x=0X140019768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019770);
	create_qword	(x=0X140019778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019780);
	create_qword	(x=0X140019788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019790);
	create_qword	(x=0X140019798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197A0);
	create_qword	(x=0X1400197A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197B0);
	create_qword	(x=0X1400197B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197C0);
	create_qword	(x=0X1400197C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197D0);
	create_qword	(x=0X1400197D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197E0);
	create_qword	(x=0X1400197E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X1400197F0);
	create_qword	(x=0X1400197F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019800);
	create_qword	(x=0X140019808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019810);
	create_qword	(x=0X140019818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019820);
	create_qword	(x=0X140019828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019830);
	create_qword	(x=0X140019838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_qword	(0X140019840);
	create_qword	(x=0X140019848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X140019850,	0X2C);
	set_name	(0X140019850,	"aInvalidMemoryA");
	create_strlit	(0X140019880,	0X2C);
	set_name	(0X140019880,	"aArrayBoundsExc");
	create_strlit	(0X1400198B0,	0X38);
	set_name	(0X1400198B0,	"aDebuggerBreakp");
	create_strlit	(0X1400198E8,	0X2E);
	set_name	(0X1400198E8,	"aMisalignedData");
	create_strlit	(0X140019920,	0X40);
	set_name	(0X140019920,	"aDenormalFloati");
	create_strlit	(0X140019960,	0X44);
	set_name	(0X140019960,	"aDivisionByZero");
	create_strlit	(0X1400199A8,	0X3C);
	set_name	(0X1400199A8,	"aInexactFloatin");
	create_strlit	(0X1400199F0,	0X42);
	set_name	(0X1400199F0,	"aInvalidFloatin");
	create_strlit	(0X140019A40,	0X58);
	set_name	(0X140019A40,	"aFloatingPointO");
	create_strlit	(0X140019AA0,	0X56);
	set_name	(0X140019AA0,	"aFloatingPointS");
	create_strlit	(0X140019B00,	0X5C);
	set_name	(0X140019B00,	"aFloatingPointU");
	create_strlit	(0X140019B60,	0X28);
	set_name	(0X140019B60,	"aIllegalInstruc");
	create_strlit	(0X140019B88,	0X24);
	set_name	(0X140019B88,	"aMemoryPageErro");
	create_strlit	(0X140019BB0,	0X24);
	set_name	(0X140019BB0,	"aDivisionByZero_0");
	create_strlit	(0X140019BD8,	0X22);
	set_name	(0X140019BD8,	"aIntegerOverflo");
	create_strlit	(0X140019C00,	0X52);
	set_name	(0X140019C00,	"aExceptionHandl");
	create_strlit	(0X140019C60,	0X88);
	set_name	(0X140019C60,	"aExceptionHandl_0");
	create_strlit	(0X140019CE8,	0X2E);
	set_name	(0X140019CE8,	"aPrivilegedInst");
	create_strlit	(0X140019D18,	0X22);
	set_name	(0X140019D18,	"aSingleStepTrap");
	create_strlit	(0X140019D40,	0X1E);
	set_name	(0X140019D40,	"aStackOverflow");
	update_extra_cmt		(0X140019D60,	E_PREV + 0,	"");
	update_extra_cmt		(0X140019D60,	E_PREV + 1,	"");
	create_strlit	(0X140019D60,	0X26);
	set_name	(0X140019D60,	"aUnknownErrorCo");
	make_array	(0X140019D86,	0X2);
	create_strlit	(0X140019D88,	0X1A);
	set_name	(0X140019D88,	"aKernel32Dll_0");
	make_array	(0X140019DA2,	0X6);
	create_strlit	(0X140019DA8,	0X11);
	set_name	(0X140019DA8,	"aGetlongpathnam");
	make_array	(0X140019DB9,	0X7);
	create_strlit	(0X140019DC0,	0X18);
	set_name	(0X140019DC0,	"aShell32Dll_1");
	create_strlit	(0X140019DD8,	0X15);
	set_name	(0X140019DD8,	"aShgetknownfold");
	make_array	(0X140019DED,	0X3);
	create_strlit	(0X140019DF0,	0X2);
	set_name	(0X140019DF0,	"slash");
	make_array	(0X140019DF2,	0X6);
	create_strlit	(0X140019DF8,	0X16);
	set_name	(0X140019DF8,	"aDownloads");
	make_array	(0X140019E0E,	0X2);
	create_byte	(0X140019E10);
	make_array	(0X140019E10,	0X8);
	set_name	(0X140019E10,	"md6_padding");
	create_strlit	(0X140019E18,	0X10);
	set_name	(0X140019E18,	"a0123456789abcd");
	create_strlit	(0X140019E28,	0X1A);
	set_name	(0X140019E28,	"aKernel32Dll_1");
	make_array	(0X140019E42,	0X6);
	create_strlit	(0X140019E48,	0X14);
	set_name	(0X140019E48,	"aInitonceexecut");
	create_strlit	(0X140019E5C,	0X7);
	set_name	(0X140019E5C,	"a1211");
	make_array	(0X140019E63,	0XD);
	create_strlit	(0X140019E70,	0X3);
	create_word	(0X14001A6F0);
	create_strlit	(0X14001A718,	0X17);
	set_name	(0X14001A718,	"aIncorrectHeade");
	create_strlit	(0X14001A730,	0X1B);
	set_name	(0X14001A730,	"aUnknownCompres");
	make_array	(0X14001A74B,	0X5);
	create_strlit	(0X14001A750,	0X14);
	set_name	(0X14001A750,	"aInvalidWindowS");
	make_array	(0X14001A764,	0X4);
	create_strlit	(0X14001A768,	0X19);
	set_name	(0X14001A768,	"aUnknownHeaderF");
	make_array	(0X14001A781,	0X7);
	create_strlit	(0X14001A788,	0X14);
	set_name	(0X14001A788,	"aHeaderCrcMisma");
	make_array	(0X14001A79C,	0X4);
	create_strlit	(0X14001A7A0,	0X13);
	set_name	(0X14001A7A0,	"aInvalidBlockTy");
	make_array	(0X14001A7B3,	0X5);
	create_strlit	(0X14001A7B8,	0X1D);
	set_name	(0X14001A7B8,	"aInvalidStoredB");
	make_array	(0X14001A7D5,	0X3);
	create_strlit	(0X14001A7D8,	0X24);
	set_name	(0X14001A7D8,	"aTooManyLengthO");
	make_array	(0X14001A7FC,	0X4);
	create_strlit	(0X14001A800,	0X19);
	set_name	(0X14001A800,	"aInvalidCodeLen");
	make_array	(0X14001A819,	0X7);
	create_strlit	(0X14001A820,	0X1A);
	set_name	(0X14001A820,	"aInvalidBitLeng");
	make_array	(0X14001A83A,	0X6);
	create_strlit	(0X14001A840,	0X25);
	set_name	(0X14001A840,	"aInvalidCodeMis");
	make_array	(0X14001A865,	0X3);
	create_strlit	(0X14001A868,	0X1C);
	set_name	(0X14001A868,	"aInvalidLiteral");
	make_array	(0X14001A884,	0X4);
	create_strlit	(0X14001A888,	0X16);
	set_name	(0X14001A888,	"aInvalidDistanc");
	make_array	(0X14001A89E,	0X2);
	create_strlit	(0X14001A8A0,	0X1C);
	set_name	(0X14001A8A0,	"aInvalidLiteral_0");
	make_array	(0X14001A8BC,	0X4);
	create_strlit	(0X14001A8C0,	0X16);
	set_name	(0X14001A8C0,	"aInvalidDistanc_0");
	make_array	(0X14001A8D6,	0X2);
	create_strlit	(0X14001A8D8,	0X1E);
	set_name	(0X14001A8D8,	"aInvalidDistanc_1");
	make_array	(0X14001A8F6,	0X2);
	create_strlit	(0X14001A8F8,	0X15);
	set_name	(0X14001A8F8,	"aIncorrectDataC");
	make_array	(0X14001A90D,	0X3);
	create_strlit	(0X14001A910,	0X17);
	set_name	(0X14001A910,	"aIncorrectLengt");
	make_array	(0X14001A927,	0X9);
	create_dword	(0X14001A930);
	make_array	(0X14001A930,	0X80C);
	set_name	(0X14001A930,	"CRC32_m_tab");
	make_array	(0X14001CC00,	0X400);
	update_extra_cmt		(0X14001D000,	E_PREV + 0,	"; Section 4. (virtual address 0001D000)");
	update_extra_cmt		(0X14001D000,	E_PREV + 1,	"; Virtual size                  : 000010D4 (   4308.)");
	update_extra_cmt		(0X14001D000,	E_PREV + 2,	"; Section size in file          : 00001200 (   4608.)");
	update_extra_cmt		(0X14001D000,	E_PREV + 3,	"; Offset to raw data for section: 0001B200");
	update_extra_cmt		(0X14001D000,	E_PREV + 4,	"; Flags 40000040: Data Readable");
	update_extra_cmt		(0X14001D000,	E_PREV + 5,	"; Alignment     : default");
	MakeStruct	(0X14001D000,	"RUNTIME_FUNCTION");
	make_array	(0X14001D000,	0X160);
	set_name	(0X14001D000,	"ExceptionDir");
	MakeStruct	(0X14001E080,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E08C,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E098,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E0A4,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E0B0,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E0BC,	"RUNTIME_FUNCTION");
	MakeStruct	(0X14001E0C8,	"RUNTIME_FUNCTION");
	make_array	(0X14001E0D4,	0XF2C);
	update_extra_cmt		(0X14001F000,	E_PREV + 0,	"; Section 5. (virtual address 0001F000)");
	update_extra_cmt		(0X14001F000,	E_PREV + 1,	"; Virtual size                  : 00002318 (   8984.)");
	update_extra_cmt		(0X14001F000,	E_PREV + 2,	"; Section size in file          : 00001600 (   5632.)");
	update_extra_cmt		(0X14001F000,	E_PREV + 3,	"; Offset to raw data for section: 0001C400");
	update_extra_cmt		(0X14001F000,	E_PREV + 4,	"; Flags C0000040: Data Readable Writable");
	update_extra_cmt		(0X14001F000,	E_PREV + 5,	"; Alignment     : default");
	create_dword	(0X14001F001);
	create_dword	(0X14001F016);
	create_word	(0X14001F028);
	make_array	(0X14001F028,	0X3);
	set_name	(0X14001F028,	"g_PrefixString");
	create_strlit	(0X14001F02E,	0X4);
	create_strlit	(0X14001F032,	0X4);
	set_name	(0X14001F032,	"g_star");
	create_strlit	(0X14001F036,	0X4);
	set_name	(0X14001F036,	"g_colon");
	create_strlit	(0X14001F03A,	0X4);
	set_name	(0X14001F03A,	"g_quest");
	create_strlit	(0X14001F03E,	0X4);
	set_name	(0X14001F03E,	"g_slash");
	create_strlit	(0X14001F042,	0X4);
	set_name	(0X14001F042,	"g_delitimer");
	create_strlit	(0X14001F046,	0X10);
	set_name	(0X14001F046,	"aOpen");
	create_word	(0X14001F056);
	make_array	(0X14001F056,	0X2);
	set_name	(0X14001F056,	"NL");
	create_qword	(0X14001F060);
	make_array	(0X14001F060,	0X6);
	set_name	(0X14001F060,	"g_MASK");
	create_byte	(0X14001F090);
	make_array	(0X14001F090,	0X90);
	set_name	(0X14001F090,	"g_salt");
	create_qword	(0X14001F120);
	set_name	(0X14001F120,	"g_tree_node_counter");
	create_qword	(x=0X14001F128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F128,	"g_lpClassName");
	create_dword	(0X14001F130);
	set_name	(0X14001F130,	"g_ExceptionCode");
	make_array	(0X14001F134,	0X4);
	MakeStruct	(0X14001F138,	"_GUID");
	set_name	(0X14001F138,	"g_cFOLDERID_Downloads");
	create_dword	(0X14001F148);
	set_name	(0X14001F148,	"g_dw_1000");
	make_array	(0X14001F14C,	0X4);
	create_byte	(0X14001F150);
	make_array	(0X14001F150,	0X40);
	set_name	(0X14001F150,	"g_MD5PADDING");
	create_dword	(0X14001F190);
	set_name	(0X14001F190,	"g_dwTlsIndex");
	create_dword	(0X14001F194);
	set_name	(0X14001F194,	"g_unk");
	set_cmt	(0X14001F198,	"Import Name Table",	0);
	create_dword	(x=0X14001F198);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F198,	"__IMPORT_DESCRIPTOR_msvcrt");
	set_cmt	(0X14001F19C,	"Time stamp",	0);
	create_dword	(0X14001F19C);
	set_cmt	(0X14001F1A0,	"Forwarder Chain",	0);
	create_dword	(0X14001F1A0);
	set_cmt	(0X14001F1A4,	"DLL Name",	0);
	create_dword	(x=0X14001F1A4);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1A8,	"Import Address Table",	0);
	create_dword	(x=0X14001F1A8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1AC,	"Import Name Table",	0);
	create_dword	(x=0X14001F1AC);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F1AC,	"__IMPORT_DESCRIPTOR_KERNEL32");
	set_cmt	(0X14001F1B0,	"Time stamp",	0);
	create_dword	(0X14001F1B0);
	set_cmt	(0X14001F1B4,	"Forwarder Chain",	0);
	create_dword	(0X14001F1B4);
	set_cmt	(0X14001F1B8,	"DLL Name",	0);
	create_dword	(x=0X14001F1B8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1BC,	"Import Address Table",	0);
	create_dword	(x=0X14001F1BC);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1C0,	"Import Name Table",	0);
	create_dword	(x=0X14001F1C0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F1C0,	"__IMPORT_DESCRIPTOR_SHELL32");
	set_cmt	(0X14001F1C4,	"Time stamp",	0);
	create_dword	(0X14001F1C4);
	set_cmt	(0X14001F1C8,	"Forwarder Chain",	0);
	create_dword	(0X14001F1C8);
	set_cmt	(0X14001F1CC,	"DLL Name",	0);
	create_dword	(x=0X14001F1CC);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1D0,	"Import Address Table",	0);
	create_dword	(x=0X14001F1D0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1D4,	"Import Name Table",	0);
	create_dword	(x=0X14001F1D4);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F1D4,	"__IMPORT_DESCRIPTOR_WINMM");
	set_cmt	(0X14001F1D8,	"Time stamp",	0);
	create_dword	(0X14001F1D8);
	set_cmt	(0X14001F1DC,	"Forwarder Chain",	0);
	create_dword	(0X14001F1DC);
	set_cmt	(0X14001F1E0,	"DLL Name",	0);
	create_dword	(x=0X14001F1E0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1E4,	"Import Address Table",	0);
	create_dword	(x=0X14001F1E4);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1E8,	"Import Name Table",	0);
	create_dword	(x=0X14001F1E8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F1E8,	"__IMPORT_DESCRIPTOR_OLE32");
	set_cmt	(0X14001F1EC,	"Time stamp",	0);
	create_dword	(0X14001F1EC);
	set_cmt	(0X14001F1F0,	"Forwarder Chain",	0);
	create_dword	(0X14001F1F0);
	set_cmt	(0X14001F1F4,	"DLL Name",	0);
	create_dword	(x=0X14001F1F4);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1F8,	"Import Address Table",	0);
	create_dword	(x=0X14001F1F8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F1FC,	"Import Name Table",	0);
	create_dword	(x=0X14001F1FC);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F1FC,	"__IMPORT_DESCRIPTOR_SHLWAPI");
	set_cmt	(0X14001F200,	"Time stamp",	0);
	create_dword	(0X14001F200);
	set_cmt	(0X14001F204,	"Forwarder Chain",	0);
	create_dword	(0X14001F204);
	set_cmt	(0X14001F208,	"DLL Name",	0);
	create_dword	(x=0X14001F208);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F20C,	"Import Address Table",	0);
	create_dword	(x=0X14001F20C);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F210,	"Import Name Table",	0);
	create_dword	(x=0X14001F210);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F210,	"__IMPORT_DESCRIPTOR_USER32");
	set_cmt	(0X14001F214,	"Time stamp",	0);
	create_dword	(0X14001F214);
	set_cmt	(0X14001F218,	"Forwarder Chain",	0);
	create_dword	(0X14001F218);
	set_cmt	(0X14001F21C,	"DLL Name",	0);
	create_dword	(x=0X14001F21C);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F220,	"Import Address Table",	0);
	create_dword	(x=0X14001F220);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F224,	"Import Name Table",	0);
	create_dword	(x=0X14001F224);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F224,	"__IMPORT_DESCRIPTOR_GDI32");
	set_cmt	(0X14001F228,	"Time stamp",	0);
	create_dword	(0X14001F228);
	set_cmt	(0X14001F22C,	"Forwarder Chain",	0);
	create_dword	(0X14001F22C);
	set_cmt	(0X14001F230,	"DLL Name",	0);
	create_dword	(x=0X14001F230);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F234,	"Import Address Table",	0);
	create_dword	(x=0X14001F234);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F238,	"Import Name Table",	0);
	create_dword	(x=0X14001F238);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_name	(0X14001F238,	"__IMPORT_DESCRIPTOR_COMCTL32");
	set_cmt	(0X14001F23C,	"Time stamp",	0);
	create_dword	(0X14001F23C);
	set_cmt	(0X14001F240,	"Forwarder Chain",	0);
	create_dword	(0X14001F240);
	set_cmt	(0X14001F244,	"DLL Name",	0);
	create_dword	(x=0X14001F244);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	set_cmt	(0X14001F248,	"Import Address Table",	0);
	create_dword	(x=0X14001F248);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	make_array	(0X14001F24C,	0X14);
	update_extra_cmt		(0X14001F260,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F260,	E_PREV + 1,	"; Import names for msvcrt.dll");
	update_extra_cmt		(0X14001F260,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F260);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F268);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F270);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F278);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F280);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F288);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F290);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F298);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2A0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2A8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2B0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2B8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2C0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2C8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2D0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2D8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F2E0);
	update_extra_cmt		(0X14001F2E8,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F2E8,	E_PREV + 1,	"; Import names for KERNEL32.dll");
	update_extra_cmt		(0X14001F2E8,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F2E8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2F0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F2F8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F300);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F308);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F310);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F318);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F320);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F328);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F330);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F338);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F340);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F348);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F350);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F358);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F360);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F368);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F370);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F378);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F380);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F388);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F390);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F398);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3A0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3A8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3B0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3B8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3C0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3C8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3D0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3D8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3E0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3E8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3F0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F3F8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F400);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F408);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F410);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F418);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F420);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F428);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F430);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F438);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F440);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F448);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	create_qword	(x=0X14001F450);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F458);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F460);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F468);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F470);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F478);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F480);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F488);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F490);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F498);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4A0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4A8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4B0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4B8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4C0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4C8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4D0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4D8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4E0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4E8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F4F0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F4F8);
	update_extra_cmt		(0X14001F500,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F500,	E_PREV + 1,	"; Import names for SHELL32.DLL");
	update_extra_cmt		(0X14001F500,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F500);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F508);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F510);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F518);
	update_extra_cmt		(0X14001F520,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F520,	E_PREV + 1,	"; Import names for WINMM.DLL");
	update_extra_cmt		(0X14001F520,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F520);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F528);
	update_extra_cmt		(0X14001F530,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F530,	E_PREV + 1,	"; Import names for OLE32.DLL");
	update_extra_cmt		(0X14001F530,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F530);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F538);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F540);
	update_extra_cmt		(0X14001F548,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F548,	E_PREV + 1,	"; Import names for SHLWAPI.DLL");
	update_extra_cmt		(0X14001F548,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F548);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F550);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F558);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F560);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F568);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F570);
	update_extra_cmt		(0X14001F578,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F578,	E_PREV + 1,	"; Import names for USER32.DLL");
	update_extra_cmt		(0X14001F578,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F578);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F580);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F588);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F590);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F598);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5A0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5A8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5B0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5B8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5C0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5C8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5D0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5D8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5E0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5E8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5F0);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F5F8);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F600);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F608);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F610);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F618);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F620);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F628);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F630);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F638);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F640);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F648);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F650);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F658);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F660);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F668);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F670);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(x=0X14001F678);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F680);
	update_extra_cmt		(0X14001F688,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F688,	E_PREV + 1,	"; Import names for GDI32.DLL");
	update_extra_cmt		(0X14001F688,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F688);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F690);
	update_extra_cmt		(0X14001F698,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F698,	E_PREV + 1,	"; Import names for COMCTL32.DLL");
	update_extra_cmt		(0X14001F698,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F698);
	op_offset		(x,	0,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	op_offset		(x,	128,	0X19,	0XFFFFFFFFFFFFFFFF,	0X140000000,	0);
	create_qword	(0X14001F6A0);
	update_extra_cmt		(0X14001F6A8,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F6A8,	E_PREV + 1,	"; Imports from msvcrt.dll");
	update_extra_cmt		(0X14001F6A8,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F6A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6A8,	"__imp_memset");
	create_qword	(x=0X14001F6B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6B0,	"__imp_wcsncmp");
	create_qword	(x=0X14001F6B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6B8,	"__imp_memmove");
	create_qword	(x=0X14001F6C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6C0,	"__imp_wcsncpy");
	create_qword	(x=0X14001F6C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6C8,	"__imp_wcsstr");
	create_qword	(x=0X14001F6D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6D0,	"__imp__wcsnicmp");
	create_qword	(x=0X14001F6D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6D8,	"__imp__wcsdup");
	create_qword	(x=0X14001F6E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6E0,	"__imp_free");
	create_qword	(x=0X14001F6E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6E8,	"__imp__wcsicmp");
	create_qword	(x=0X14001F6F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6F0,	"__imp_wcslen");
	create_qword	(x=0X14001F6F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F6F8,	"__imp_wcscpy");
	create_qword	(x=0X14001F700);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F700,	"__imp_wcscmp");
	create_qword	(x=0X14001F708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F708,	"__imp_memcpy");
	create_qword	(x=0X14001F710);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F710,	"__imp_tolower");
	create_qword	(x=0X14001F718);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F718,	"__imp_wcscat");
	create_qword	(x=0X14001F720);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F720,	"__imp_malloc");
	create_byte	(0X14001F728);
	make_array	(0X14001F728,	0X8);
	update_extra_cmt		(0X14001F730,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F730,	E_PREV + 1,	"; Imports from KERNEL32.dll");
	update_extra_cmt		(0X14001F730,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F730);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F730,	"__imp_GetModuleHandleW");
	create_qword	(x=0X14001F738);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F738,	"__imp_HeapCreate");
	create_qword	(x=0X14001F740);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F740,	"__imp_GetStdHandle");
	create_qword	(x=0X14001F748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F748,	"__imp_HeapDestroy");
	create_qword	(x=0X14001F750);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F750,	"__imp_ExitProcess");
	create_qword	(x=0X14001F758);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F758,	"__imp_WriteFile");
	create_qword	(x=0X14001F760);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F760,	"__imp_GetTempFileNameW");
	create_qword	(x=0X14001F768);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F768,	"__imp_LoadLibraryExW");
	create_qword	(x=0X14001F770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F770,	"__imp_EnumResourceTypesW");
	create_qword	(x=0X14001F778);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F778,	"__imp_FreeLibrary");
	create_qword	(x=0X14001F780);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F780,	"__imp_RemoveDirectoryW");
	create_qword	(x=0X14001F788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F788,	"__imp_GetExitCodeProcess");
	create_qword	(x=0X14001F790);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F790,	"__imp_EnumResourceNamesW");
	create_qword	(x=0X14001F798);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F798,	"__imp_GetCommandLineW");
	create_qword	(x=0X14001F7A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7A0,	"__imp_LoadResource");
	create_qword	(x=0X14001F7A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7A8,	"__imp_SizeofResource");
	create_qword	(x=0X14001F7B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7B0,	"__imp_FreeResource");
	create_qword	(x=0X14001F7B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7B8,	"__imp_FindResourceW");
	create_qword	(x=0X14001F7C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7C0,	"__imp_GetShortPathNameW");
	create_qword	(x=0X14001F7C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7C8,	"__imp_GetSystemDirectoryW");
	create_qword	(x=0X14001F7D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7D0,	"EnterCriticalSection");
	create_qword	(x=0X14001F7D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7D8,	"CloseHandle");
	create_qword	(x=0X14001F7E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7E0,	"LeaveCriticalSection");
	create_qword	(x=0X14001F7E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7E8,	"InitializeCriticalSection");
	create_qword	(x=0X14001F7F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7F0,	"WaitForSingleObject");
	create_qword	(x=0X14001F7F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F7F8,	"TerminateThread");
	create_qword	(x=0X14001F800);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F800,	"CreateThread");
	create_qword	(x=0X14001F808);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F808,	"Sleep");
	create_qword	(x=0X14001F810);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F810,	"WideCharToMultiByte");
	create_qword	(x=0X14001F818);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F818,	"HeapAlloc");
	create_qword	(x=0X14001F820);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F820,	"HeapFree");
	create_qword	(x=0X14001F828);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F828,	"LoadLibraryW");
	create_qword	(x=0X14001F830);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F830,	"GetProcAddress");
	create_qword	(x=0X14001F838);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F838,	"GetCurrentProcessId");
	create_qword	(x=0X14001F840);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F840,	"GetCurrentThreadId");
	create_qword	(x=0X14001F848);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F848,	"GetModuleFileNameW");
	create_qword	(x=0X14001F850);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F850,	"GetEnvironmentVariableW");
	create_qword	(x=0X14001F858);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F858,	"SetEnvironmentVariableW");
	create_qword	(x=0X14001F860);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F860,	"GetCurrentProcess");
	create_qword	(x=0X14001F868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F868,	"TerminateProcess");
	create_qword	(x=0X14001F870);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F870,	"RtlLookupFunctionEntry");
	create_qword	(x=0X14001F878);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F878,	"RtlVirtualUnwind");
	create_qword	(x=0X14001F880);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F880,	"RemoveVectoredExceptionHandler");
	create_qword	(x=0X14001F888);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F888,	"AddVectoredExceptionHandler");
	create_qword	(x=0X14001F890);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F890,	"HeapSize");
	create_qword	(x=0X14001F898);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F898,	"MultiByteToWideChar");
	create_qword	(x=0X14001F8A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8A0,	"CreateDirectoryW");
	create_qword	(x=0X14001F8A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8A8,	"SetFileAttributesW");
	create_qword	(x=0X14001F8B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8B0,	"GetTempPathW");
	create_qword	(x=0X14001F8B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8B8,	"DeleteFileW");
	create_qword	(x=0X14001F8C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8C0,	"GetCurrentDirectoryW");
	create_qword	(x=0X14001F8C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8C8,	"SetCurrentDirectoryW");
	create_qword	(x=0X14001F8D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8D0,	"CreateFileW");
	create_qword	(x=0X14001F8D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8D8,	"SetFilePointer");
	create_qword	(x=0X14001F8E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8E0,	"TlsFree");
	create_qword	(x=0X14001F8E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8E8,	"__imp_TlsGetValue");
	create_qword	(x=0X14001F8F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8F0,	"TlsSetValue");
	create_qword	(x=0X14001F8F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F8F8,	"TlsAlloc");
	create_qword	(x=0X14001F900);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F900,	"HeapReAlloc");
	create_qword	(x=0X14001F908);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F908,	"DeleteCriticalSection");
	create_qword	(x=0X14001F910);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F910,	"__imp_GetLastError");
	create_qword	(x=0X14001F918);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F918,	"__imp_SetLastError");
	create_qword	(x=0X14001F920);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F920,	"UnregisterWait");
	create_qword	(x=0X14001F928);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F928,	"GetCurrentThread");
	create_qword	(x=0X14001F930);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F930,	"DuplicateHandle");
	create_qword	(x=0X14001F938);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F938,	"RegisterWaitForSingleObject");
	create_byte	(0X14001F940);
	make_array	(0X14001F940,	0X8);
	update_extra_cmt		(0X14001F948,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F948,	E_PREV + 1,	"; Imports from SHELL32.DLL");
	update_extra_cmt		(0X14001F948,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F948);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F948,	"__imp_ShellExecuteExW");
	create_qword	(x=0X14001F950);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F950,	"SHGetFolderLocation");
	create_qword	(x=0X14001F958);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F958,	"SHGetPathFromIDListW");
	create_byte	(0X14001F960);
	make_array	(0X14001F960,	0X8);
	update_extra_cmt		(0X14001F968,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F968,	E_PREV + 1,	"; Imports from WINMM.DLL");
	update_extra_cmt		(0X14001F968,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F968);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F968,	"timeBeginPeriod");
	create_byte	(0X14001F970);
	make_array	(0X14001F970,	0X8);
	update_extra_cmt		(0X14001F978,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F978,	E_PREV + 1,	"; Imports from OLE32.DLL");
	update_extra_cmt		(0X14001F978,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F978);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F978,	"CoInitialize");
	create_qword	(x=0X14001F980);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F980,	"CoTaskMemFree");
	create_byte	(0X14001F988);
	make_array	(0X14001F988,	0X8);
	update_extra_cmt		(0X14001F990,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F990,	E_PREV + 1,	"; Imports from SHLWAPI.DLL");
	update_extra_cmt		(0X14001F990,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F990);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F990,	"__imp_PathAddBackslashW");
	create_qword	(x=0X14001F998);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F998,	"__imp_PathRenameExtensionW");
	create_qword	(x=0X14001F9A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9A0,	"__imp_PathQuoteSpacesW");
	create_qword	(x=0X14001F9A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9A8,	"__imp_PathRemoveArgsW");
	create_qword	(x=0X14001F9B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9B0,	"__imp_PathRemoveBackslashW");
	create_byte	(0X14001F9B8);
	make_array	(0X14001F9B8,	0X8);
	update_extra_cmt		(0X14001F9C0,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001F9C0,	E_PREV + 1,	"; Imports from USER32.DLL");
	update_extra_cmt		(0X14001F9C0,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001F9C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9C0,	"CharUpperW");
	create_qword	(x=0X14001F9C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9C8,	"CharLowerW");
	create_qword	(x=0X14001F9D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9D0,	"MessageBoxW");
	create_qword	(x=0X14001F9D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9D8,	"DefWindowProcW");
	create_qword	(x=0X14001F9E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9E0,	"GetWindowLongPtrW");
	create_qword	(x=0X14001F9E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9E8,	"GetWindowTextLengthW");
	create_qword	(x=0X14001F9F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9F0,	"GetWindowTextW");
	create_qword	(x=0X14001F9F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001F9F8,	"EnableWindow");
	create_qword	(x=0X14001FA00);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA00,	"DestroyWindow");
	create_qword	(x=0X14001FA08);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA08,	"UnregisterClassW");
	create_qword	(x=0X14001FA10);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA10,	"LoadIconW");
	create_qword	(x=0X14001FA18);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA18,	"LoadCursorW");
	create_qword	(x=0X14001FA20);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA20,	"RegisterClassExW");
	create_qword	(x=0X14001FA28);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA28,	"IsWindowEnabled");
	create_qword	(x=0X14001FA30);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA30,	"GetSystemMetrics");
	create_qword	(x=0X14001FA38);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA38,	"CreateWindowExW");
	create_qword	(x=0X14001FA40);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA40,	"SetWindowLongPtrW");
	create_qword	(x=0X14001FA48);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA48,	"SendMessageW");
	create_qword	(x=0X14001FA50);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA50,	"SetFocus");
	create_qword	(x=0X14001FA58);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA58,	"CreateAcceleratorTableW");
	create_qword	(x=0X14001FA60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA60,	"SetForegroundWindow");
	create_qword	(x=0X14001FA68);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA68,	"BringWindowToTop");
	create_qword	(x=0X14001FA70);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA70,	"GetMessageW");
	create_qword	(x=0X14001FA78);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA78,	"TranslateAcceleratorW");
	create_qword	(x=0X14001FA80);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA80,	"TranslateMessage");
	create_qword	(x=0X14001FA88);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA88,	"DispatchMessageW");
	create_qword	(x=0X14001FA90);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA90,	"DestroyAcceleratorTable");
	create_qword	(x=0X14001FA98);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FA98,	"PostMessageW");
	create_qword	(x=0X14001FAA0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAA0,	"GetForegroundWindow");
	create_qword	(x=0X14001FAA8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAA8,	"GetWindowThreadProcessId");
	create_qword	(x=0X14001FAB0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAB0,	"IsWindowVisible");
	create_qword	(x=0X14001FAB8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAB8,	"EnumWindows");
	create_qword	(x=0X14001FAC0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAC0,	"SetWindowPos");
	create_byte	(0X14001FAC8);
	make_array	(0X14001FAC8,	0X8);
	update_extra_cmt		(0X14001FAD0,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001FAD0,	E_PREV + 1,	"; Imports from GDI32.DLL");
	update_extra_cmt		(0X14001FAD0,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001FAD0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAD0,	"GetStockObject");
	create_byte	(0X14001FAD8);
	make_array	(0X14001FAD8,	0X8);
	update_extra_cmt		(0X14001FAE0,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X14001FAE0,	E_PREV + 1,	"; Imports from COMCTL32.DLL");
	update_extra_cmt		(0X14001FAE0,	E_PREV + 2,	"; ");
	create_qword	(x=0X14001FAE0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X14001FAE0,	"InitCommonControlsEx");
	create_byte	(0X14001FAE8);
	make_array	(0X14001FAE8,	0X8);
	create_word	(0X14001FAF0);
	create_strlit	(0X14001FAF2,	0X7);
	create_strlit	(0X14001FAFA,	0XB);
	set_name	(0X14001FAFA,	"aMsvcrtDll");
	create_word	(0X14001FB06);
	create_strlit	(0X14001FB08,	0X11);
	create_word	(0X14001FB1A);
	create_strlit	(0X14001FB1C,	0XB);
	create_word	(0X14001FB28);
	create_strlit	(0X14001FB2A,	0XD);
	create_word	(0X14001FB38);
	create_strlit	(0X14001FB3A,	0XC);
	create_word	(0X14001FB46);
	create_strlit	(0X14001FB48,	0XC);
	create_word	(0X14001FB54);
	create_strlit	(0X14001FB56,	0XA);
	create_word	(0X14001FB60);
	create_strlit	(0X14001FB62,	0X11);
	create_word	(0X14001FB74);
	create_strlit	(0X14001FB76,	0XF);
	create_word	(0X14001FB86);
	create_strlit	(0X14001FB88,	0X13);
	create_word	(0X14001FB9C);
	create_strlit	(0X14001FB9E,	0XC);
	create_word	(0X14001FBAA);
	create_strlit	(0X14001FBAC,	0X11);
	create_word	(0X14001FBBE);
	create_strlit	(0X14001FBC0,	0X13);
	create_word	(0X14001FBD4);
	create_strlit	(0X14001FBD6,	0X13);
	create_word	(0X14001FBEA);
	create_strlit	(0X14001FBEC,	0X10);
	create_word	(0X14001FBFC);
	create_strlit	(0X14001FBFE,	0XD);
	create_word	(0X14001FC0C);
	create_strlit	(0X14001FC0E,	0XF);
	create_word	(0X14001FC1E);
	create_strlit	(0X14001FC20,	0XD);
	create_word	(0X14001FC2E);
	create_strlit	(0X14001FC30,	0XE);
	create_word	(0X14001FC3E);
	create_strlit	(0X14001FC40,	0X12);
	create_word	(0X14001FC52);
	create_strlit	(0X14001FC54,	0X14);
	create_strlit	(0X14001FC68,	0XD);
	set_name	(0X14001FC68,	"aKernel32Dll");
	create_word	(0X14001FC76);
	create_strlit	(0X14001FC78,	0X10);
	create_word	(0X14001FC88);
	create_strlit	(0X14001FC8A,	0X14);
	create_word	(0X14001FC9E);
	create_strlit	(0X14001FCA0,	0X15);
	create_strlit	(0X14001FCB6,	0XC);
	set_name	(0X14001FCB6,	"aShell32Dll");
	create_word	(0X14001FCC2);
	create_strlit	(0X14001FCC4,	0X10);
	create_strlit	(0X14001FCD4,	0XA);
	set_name	(0X14001FCD4,	"aWinmmDll");
	create_word	(0X14001FCDE);
	create_strlit	(0X14001FCE0,	0XD);
	create_word	(0X14001FCEE);
	create_strlit	(0X14001FCF0,	0XE);
	create_strlit	(0X14001FCFE,	0XA);
	set_name	(0X14001FCFE,	"aOle32Dll");
	create_word	(0X14001FD08);
	create_strlit	(0X14001FD0A,	0X12);
	create_word	(0X14001FD1C);
	create_strlit	(0X14001FD1E,	0X15);
	create_word	(0X14001FD34);
	create_strlit	(0X14001FD36,	0X11);
	create_word	(0X14001FD48);
	create_strlit	(0X14001FD4A,	0X10);
	create_word	(0X14001FD5A);
	create_strlit	(0X14001FD5C,	0X15);
	create_strlit	(0X14001FD72,	0XC);
	set_name	(0X14001FD72,	"aShlwapiDll");
	create_word	(0X14001FD7E);
	create_strlit	(0X14001FD80,	0X8);
	create_word	(0X14001FD88);
	create_strlit	(0X14001FD8A,	0X8);
	create_word	(0X14001FD92);
	create_strlit	(0X14001FD94,	0X8);
	create_word	(0X14001FD9C);
	create_strlit	(0X14001FD9E,	0X7);
	create_word	(0X14001FDA6);
	create_strlit	(0X14001FDA8,	0XA);
	create_word	(0X14001FDB2);
	create_strlit	(0X14001FDB4,	0X8);
	create_word	(0X14001FDBC);
	create_strlit	(0X14001FDBE,	0X5);
	create_word	(0X14001FDC4);
	create_strlit	(0X14001FDC6,	0X9);
	create_word	(0X14001FDD0);
	create_strlit	(0X14001FDD2,	0X7);
	create_word	(0X14001FDDA);
	create_strlit	(0X14001FDDC,	0X7);
	create_word	(0X14001FDE4);
	create_strlit	(0X14001FDE6,	0X7);
	create_word	(0X14001FDEE);
	create_strlit	(0X14001FDF0,	0X7);
	create_word	(0X14001FDF8);
	create_strlit	(0X14001FDFA,	0X8);
	create_word	(0X14001FE02);
	create_strlit	(0X14001FE04,	0X7);
	create_word	(0X14001FE0C);
	create_strlit	(0X14001FE0E,	0X7);
	create_word	(0X14001FE16);
	create_strlit	(0X14001FE18,	0X15);
	create_word	(0X14001FE2E);
	create_strlit	(0X14001FE30,	0XC);
	create_word	(0X14001FE3C);
	create_strlit	(0X14001FE3E,	0X15);
	create_word	(0X14001FE54);
	create_strlit	(0X14001FE56,	0X1A);
	create_word	(0X14001FE70);
	create_strlit	(0X14001FE72,	0X14);
	create_word	(0X14001FE86);
	create_strlit	(0X14001FE88,	0X10);
	create_word	(0X14001FE98);
	create_strlit	(0X14001FE9A,	0XD);
	create_word	(0X14001FEA8);
	create_strlit	(0X14001FEAA,	0X6);
	create_word	(0X14001FEB0);
	create_strlit	(0X14001FEB2,	0X14);
	create_word	(0X14001FEC6);
	create_strlit	(0X14001FEC8,	0XA);
	create_word	(0X14001FED2);
	create_strlit	(0X14001FED4,	0X9);
	create_word	(0X14001FEDE);
	create_strlit	(0X14001FEE0,	0XD);
	create_word	(0X14001FEEE);
	create_strlit	(0X14001FEF0,	0XF);
	create_word	(0X14001FF00);
	create_strlit	(0X14001FF02,	0X14);
	create_word	(0X14001FF16);
	create_strlit	(0X14001FF18,	0X13);
	create_word	(0X14001FF2C);
	create_strlit	(0X14001FF2E,	0X13);
	create_word	(0X14001FF42);
	create_strlit	(0X14001FF44,	0X18);
	create_word	(0X14001FF5C);
	create_strlit	(0X14001FF5E,	0X18);
	create_word	(0X14001FF76);
	create_strlit	(0X14001FF78,	0X12);
	create_word	(0X14001FF8A);
	create_strlit	(0X14001FF8C,	0X11);
	create_word	(0X14001FF9E);
	create_strlit	(0X14001FFA0,	0X17);
	create_word	(0X14001FFB8);
	create_strlit	(0X14001FFBA,	0X11);
	create_word	(0X14001FFCC);
	create_strlit	(0X14001FFCE,	0X1F);
	create_word	(0X14001FFEE);
	create_strlit	(0X14001FFF0,	0X1C);
	create_word	(0X14002000C);
	create_strlit	(0X14002000E,	0X9);
	create_word	(0X140020018);
	create_strlit	(0X14002001A,	0X14);
	create_word	(0X14002002E);
	create_strlit	(0X140020030,	0X11);
	create_word	(0X140020042);
	create_strlit	(0X140020044,	0X13);
	create_word	(0X140020058);
	create_strlit	(0X14002005A,	0XD);
	create_word	(0X140020068);
	create_strlit	(0X14002006A,	0XC);
	create_word	(0X140020076);
	create_strlit	(0X140020078,	0X15);
	create_word	(0X14002008E);
	create_strlit	(0X140020090,	0X15);
	create_word	(0X1400200A6);
	create_strlit	(0X1400200A8,	0XC);
	create_word	(0X1400200B4);
	create_strlit	(0X1400200B6,	0XF);
	create_word	(0X1400200C6);
	create_strlit	(0X1400200C8,	0X8);
	create_word	(0X1400200D0);
	create_strlit	(0X1400200D2,	0XC);
	create_word	(0X1400200DE);
	create_strlit	(0X1400200E0,	0XC);
	create_word	(0X1400200EC);
	create_strlit	(0X1400200EE,	0X9);
	create_word	(0X1400200F8);
	create_strlit	(0X1400200FA,	0XC);
	create_word	(0X140020106);
	create_strlit	(0X140020108,	0X16);
	create_word	(0X14002011E);
	create_strlit	(0X140020120,	0XD);
	create_word	(0X14002012E);
	create_strlit	(0X140020130,	0XD);
	create_word	(0X14002013E);
	create_strlit	(0X140020140,	0XF);
	create_word	(0X140020150);
	create_strlit	(0X140020152,	0X11);
	create_word	(0X140020164);
	create_strlit	(0X140020166,	0X10);
	create_word	(0X140020176);
	create_strlit	(0X140020178,	0X1C);
	create_word	(0X140020194);
	create_strlit	(0X140020196,	0XB);
	create_word	(0X1400201A2);
	create_strlit	(0X1400201A4,	0XB);
	create_word	(0X1400201B0);
	create_strlit	(0X1400201B2,	0XC);
	create_word	(0X1400201BE);
	create_strlit	(0X1400201C0,	0XF);
	create_word	(0X1400201D0);
	create_strlit	(0X1400201D2,	0X12);
	create_word	(0X1400201E4);
	create_strlit	(0X1400201E6,	0X15);
	create_word	(0X1400201FC);
	create_strlit	(0X1400201FE,	0XF);
	create_word	(0X14002020E);
	create_strlit	(0X140020210,	0XD);
	create_word	(0X14002021E);
	create_strlit	(0X140020220,	0XE);
	create_word	(0X14002022E);
	create_strlit	(0X140020230,	0X11);
	create_word	(0X140020242);
	create_strlit	(0X140020244,	0XA);
	create_word	(0X14002024E);
	create_strlit	(0X140020250,	0XC);
	create_word	(0X14002025C);
	create_strlit	(0X14002025E,	0X11);
	create_word	(0X140020270);
	create_strlit	(0X140020272,	0X10);
	create_word	(0X140020282);
	create_strlit	(0X140020284,	0X11);
	create_word	(0X140020296);
	create_strlit	(0X140020298,	0X10);
	create_word	(0X1400202A8);
	create_strlit	(0X1400202AA,	0X12);
	create_word	(0X1400202BC);
	create_strlit	(0X1400202BE,	0XD);
	create_word	(0X1400202CC);
	create_strlit	(0X1400202CE,	0X9);
	create_word	(0X1400202D8);
	create_strlit	(0X1400202DA,	0X18);
	create_word	(0X1400202F2);
	create_strlit	(0X1400202F4,	0X14);
	create_word	(0X140020308);
	create_strlit	(0X14002030A,	0X11);
	create_word	(0X14002031C);
	create_strlit	(0X14002031E,	0XC);
	create_word	(0X14002032A);
	create_strlit	(0X14002032C,	0X16);
	create_word	(0X140020342);
	create_strlit	(0X140020344,	0X11);
	create_word	(0X140020356);
	create_strlit	(0X140020358,	0X11);
	create_word	(0X14002036A);
	create_strlit	(0X14002036C,	0X18);
	create_word	(0X140020384);
	create_strlit	(0X140020386,	0XD);
	create_word	(0X140020394);
	create_strlit	(0X140020396,	0X14);
	create_word	(0X1400203AA);
	create_strlit	(0X1400203AC,	0X19);
	create_word	(0X1400203C6);
	create_strlit	(0X1400203C8,	0X10);
	create_word	(0X1400203D8);
	create_strlit	(0X1400203DA,	0XC);
	create_word	(0X1400203E6);
	create_strlit	(0X1400203E8,	0XD);
	create_strlit	(0X1400203F6,	0XB);
	set_name	(0X1400203F6,	"aUser32Dll");
	create_word	(0X140020402);
	create_strlit	(0X140020404,	0XF);
	create_strlit	(0X140020414,	0XA);
	set_name	(0X140020414,	"aGdi32Dll");
	create_word	(0X14002041E);
	create_strlit	(0X140020420,	0X15);
	create_strlit	(0X140020436,	0XD);
	set_name	(0X140020436,	"aComctl32Dll");
	update_extra_cmt		(0X140020444,	E_PREV + 0,	"");
	update_extra_cmt		(0X140020444,	E_PREV + 1,	"--begin 0x160");
	update_extra_cmt		(0X140020444,	E_PREV + 2,	"");
	MakeStruct	(0X140020444,	"g_data");
	set_name	(0X140020444,	"g_DATA");
	create_dword	(0X1400205B4);
	set_name	(0X1400205B4,	"g_unk_1");
	create_qword	(0X1400205B8);
	set_name	(0X1400205B8,	"g_tree_stru0x20__");
	create_dword	(0X1400205C0);
	set_name	(0X1400205C0,	"g_timeBeginPeriod_flag");
	create_dword	(0X1400205C4);
	set_name	(0X1400205C4,	"g_unk_0");
	create_qword	(0X1400205C8);
	set_name	(0X1400205C8,	"g_default_font");
	create_dword	(0X1400205D0);
	set_name	(0X1400205D0,	"g_wndProcExit");
	create_dword	(0X1400205D4);
	set_name	(0X1400205D4,	"g_isWindowEnabled");
	create_qword	(0X1400205D8);
	set_name	(0X1400205D8,	"hWnd_btnOK_ctrl");
	create_qword	(0X1400205E0);
	set_name	(0X1400205E0,	"hWnd_edit_ctrl");
	create_qword	(0X1400205E8);
	set_name	(0X1400205E8,	"static_control_hwnd");
	create_qword	(0X1400205F0);
	set_name	(0X1400205F0,	"g_fgWnd");
	create_dword	(0X1400205F8);
	set_name	(0X1400205F8,	"g_IsCoInitialized");
	make_array	(0X1400205FC,	0X4);
	MakeStruct	(0X140020600,	"stru0x28");
	set_name	(0X140020600,	"g_tree_stru0x28");
	create_qword	(0X140020628);
	set_name	(0X140020628,	"p_SHGetKnownFolderPath");
	create_dword	(0X140020630);
	set_name	(0X140020630,	"g_counter10");
	make_array	(0X140020634,	0XC);
	create_dword	(0X140020640);
	make_array	(0X140020640,	0X280);
	set_name	(0X140020640,	"g_buf_0x28");
	create_qword	(0X140021040);
	set_name	(0X140021040,	"g_root_unk028");
	create_qword	(0X140021048);
	set_name	(0X140021048,	"g_TLS_8_allocated_size");
	create_dword	(0X140021050);
	set_name	(0X140021050,	"g_TLS_8");
	make_array	(0X140021054,	0X4);
	create_qword	(0X140021058);
	set_name	(0X140021058,	"g_qword_140021058");
	create_qword	(0X140021060);
	set_name	(0X140021060,	"g_TREE_ROOT");
	MakeStruct	(0X140021068,	"_RTL_CRITICAL_SECTION");
	set_name	(0X140021068,	"g_treeCritSect");
	create_qword	(0X140021090);
	set_name	(0X140021090,	"g_unk_2");
	MakeStruct	(0X140021098,	"_RTL_CRITICAL_SECTION");
	create_dword	(0X1400210C0);
	set_name	(0X1400210C0,	"nullstr1");
	create_dword	(0X1400210C4);
	set_name	(0X1400210C4,	"nullstr2");
	create_qword	(0X1400210C8);
	set_name	(0X1400210C8,	"g_fn_01_obj1");
	create_qword	(0X1400210D0);
	set_name	(0X1400210D0,	"g_fn_alloc_obj1");
	create_qword	(0X1400210D8);
	set_name	(0X1400210D8,	"g_ctor_0x60_2");
	create_qword	(0X1400210E0);
	set_name	(0X1400210E0,	"g_ctor_0x60");
	create_qword	(0X1400210E8);
	set_name	(0X1400210E8,	"g_fn_02_obj1");
	create_qword	(0X1400210F0);
	set_name	(0X1400210F0,	"g_fn_0x60_2");
	create_qword	(0X1400210F8);
	set_name	(0X1400210F8,	"g_fn_0_0x60");
	create_qword	(0X140021100);
	set_name	(0X140021100,	"g_fn_free_obj1");
	create_qword	(0X140021108);
	set_name	(0X140021108,	"g_dtor_0x60_2");
	create_qword	(0X140021110);
	set_name	(0X140021110,	"g_dtor_0x60");
	create_dword	(0X140021118);
	set_name	(0X140021118,	"g_tls_rso_init");
	make_array	(0X14002111C,	0X4);
	create_qword	(0X140021120);
	set_name	(0X140021120,	"g_RegSingleObject");
	MakeStruct	(0X140021128,	"_RTL_CRITICAL_SECTION");
	create_dword	(0X140021150);
	set_name	(0X140021150,	"g_TLS_rso");
	create_byte	(0X140021154);
	make_array	(0X140021154,	0X1C);
	set_name	(0X140021154,	"g_unk_3");
	MakeStruct	(0X140021170,	"_RTL_CRITICAL_SECTION");
	set_name	(0X140021170,	"CriticalSection");
	make_array	(0X140021198,	0X28);
	create_qword	(0X1400211C0);
	set_name	(0X1400211C0,	"g_stru_0x60_4");
	make_array	(0X1400211C8,	0X8);
	create_qword	(0X1400211D0);
	set_name	(0X1400211D0,	"g_TLS_8_pos");
	make_array	(0X1400211D8,	0X8);
	MakeStruct	(0X1400211E0,	"_RTL_CRITICAL_SECTION");
	create_qword	(0X140021208);
	set_name	(0X140021208,	"g_unk_4");
	create_dword	(0X140021210);
	set_name	(0X140021210,	"g_Exception_unk");
	make_array	(0X140021214,	0XC);
	create_qword	(0X140021220);
	set_name	(0X140021220,	"g_ExceptionAddress");
	make_array	(0X140021228,	0X8);
	create_qword	(0X140021230);
	set_name	(0X140021230,	"g_ExceptionInformation");
	make_array	(0X140021238,	0X8);
	create_qword	(0X140021240);
	set_name	(0X140021240,	"g_ExRax");
	create_qword	(0X140021248);
	set_name	(0X140021248,	"g_ExRcx");
	create_qword	(0X140021250);
	set_name	(0X140021250,	"g_ExRdx");
	create_qword	(0X140021258);
	set_name	(0X140021258,	"g_ExRbx");
	create_qword	(0X140021260);
	set_name	(0X140021260,	"g_ExRsp");
	create_qword	(0X140021268);
	set_name	(0X140021268,	"g_ExRbp");
	create_qword	(0X140021270);
	set_name	(0X140021270,	"g_ExRsi");
	create_qword	(0X140021278);
	set_name	(0X140021278,	"g_ExRdi");
	create_qword	(0X140021280);
	set_name	(0X140021280,	"g_ExR8");
	create_qword	(0X140021288);
	set_name	(0X140021288,	"g_ExR9");
	create_qword	(0X140021290);
	set_name	(0X140021290,	"g_ExR10");
	create_qword	(0X140021298);
	set_name	(0X140021298,	"g_ExR11");
	create_qword	(0X1400212A0);
	set_name	(0X1400212A0,	"g_ExR12");
	create_qword	(0X1400212A8);
	set_name	(0X1400212A8,	"g_ExR13");
	create_qword	(0X1400212B0);
	set_name	(0X1400212B0,	"g_ExR14");
	create_qword	(0X1400212B8);
	set_name	(0X1400212B8,	"g_ExR15");
	create_qword	(0X1400212C0);
	set_name	(0X1400212C0,	"g_ExEFlags");
	make_array	(0X1400212C8,	0X8);
	create_qword	(0X1400212D0);
	set_name	(0X1400212D0,	"G_ZHEAP");
	make_array	(0X1400212D8,	0X28);
	create_qword	(0X140021300);
	set_name	(0X140021300,	"g_stru_0x60_10");
	make_array	(0X140021308,	0X8);
	create_qword	(0X140021310);
	set_name	(0X140021310,	"heap_HANDLE");
	make_array	(0X140021318,	0XCE8);
}

static Functions_0(void) {

	add_func    (0X140001000,0X14000125D);
	set_func_flags(0X140001000,0x5401);
	SetType(0X140001000, "void __noreturn start();");
	set_frame_size(0X140001000, 0X28, 0, 0);
	add_func    (0X14000125D,0X140001284);
	set_func_flags(0X14000125D,0x5400);
	SetType(0X14000125D, "__int64 free_g_tree_stru0x20();");
	set_frame_size(0X14000125D, 0X28, 0, 0);
	add_func    (0X140001284,0X140001735);
	set_func_flags(0X140001284,0x5400);
	SetType(0X140001284, "__int64 __fastcall xorfn(char *a1, int a2, wchar_t *wstr);");
	set_frame_size(0X140001284, 0XA0, 0, 0);
	define_local_var(0X140001284, 0X140001735, "[bp-0X90]", "zsize");
	define_local_var(0X140001284, 0X140001735, "[bp-0X88]", "V1");
	define_local_var(0X140001284, 0X140001735, "[bp-0X78]", "V2");
	define_local_var(0X140001284, 0X140001735, "[bp-0X38]", "v1p");
	add_func    (0X140001735,0X140001E57);
	set_func_flags(0X140001735,0x5400);
	SetType(0X140001735, "size_t file_action_sub();");
	set_frame_size(0X140001735, 0X70, 0, 0);
	define_local_var(0X140001735, 0X140001E57, "[bp-0X50]", "lpWideCharStr");
	define_local_var(0X140001735, 0X140001E57, "[bp-0X48]", "buffer");
	define_local_var(0X140001735, 0X140001E57, "[bp-0X40]", "lpNumberOfBytesWritten");
	add_func    (0X140001E57,0X1400021EA);
	set_func_flags(0X140001E57,0x5400);
	SetType(0X140001E57, "void __stdcall create_tmp_paths();");
	set_frame_size(0X140001E57, 0X40, 0, 0);
	define_local_var(0X140001E57, 0X1400021EA, "[bp-0X28]", "lpszExt");
	define_local_var(0X140001E57, 0X1400021EA, "[bp-0X20]", "temp_file_name");
	define_local_var(0X140001E57, 0X1400021EA, "[bp-0X18]", "TEMP_PATH");
	add_func    (0X1400021EA,0X1400026BB);
	set_func_flags(0X1400021EA,0x5400);
	SetType(0X1400021EA, "__int64 sub_1400021EA();");
	set_frame_size(0X1400021EA, 0XA0, 0, 0);
	add_func    (0X1400026BB,0X140002853);
	set_func_flags(0X1400026BB,0x5400);
	SetType(0X1400026BB, "char *__fastcall myset_env_vars(__int64, __int64, __int64, __int64, __int64);");
	set_frame_size(0X1400026BB, 0X20, 0, 0);
	add_func    (0X140002853,0X140002930);
	set_func_flags(0X140002853,0x5401);
	SetType(0X140002853, "void __noreturn ShowExeptionMessageBox();");
	set_frame_size(0X140002853, 0X58, 0, 0);
	add_func    (0X140002930,0X1400029C8);
	set_func_flags(0X140002930,0x5401);
	SetType(0X140002930, "void __fastcall __noreturn asm_CLEAR_TEMP_AND_EXIT(__int64);");
	set_frame_size(0X140002930, 0X10, 0, 0);
	add_func    (0X1400029C8,0X140002B4C);
	set_func_flags(0X1400029C8,0x5400);
	SetType(0X1400029C8, "void __fastcall MyShellExecuteOpen(wchar_t *aFile, wchar_t *aDir, wchar_t *aParams);");
	set_frame_size(0X1400029C8, 0XB0, 0, 0);
	define_local_var(0X1400029C8, 0X140002B4C, "[bp-0XB0]", "file");
	define_local_var(0X1400029C8, 0X140002B4C, "[bp-0XA8]", "dir");
	define_local_var(0X1400029C8, 0X140002B4C, "[bp-0XA0]", "params");
	add_func    (0X140002B4C,0X140002BAB);
	set_func_flags(0X140002B4C,0x5400);
	SetType(0X140002B4C, "__int64 __stdcall EnumResTypeW(HMODULE hModule, __int64 lpType, __int64 lParam);");
	set_frame_size(0X140002B4C, 0X8, 0, 0);
	add_func    (0X140002BAB,0X140002C46);
	set_func_flags(0X140002BAB,0x5400);
	SetType(0X140002BAB, "__int64 __fastcall setPTRS(__int16 *);");
	set_frame_size(0X140002BAB, 0X8, 0, 0);
	add_func    (0X140002C46,0X14000309A);
	set_func_flags(0X140002C46,0x5400);
	SetType(0X140002C46, "char *__fastcall MyInputRequester(__int64, __int64, __int64, __int64, __int64);");
	set_frame_size(0X140002C46, 0X88, 0, 0);
	add_func    (0X14000309A,0X140003174);
	set_func_flags(0X14000309A,0x5400);
	SetType(0X14000309A, "void __fastcall MyWriteFileText(wchar_t *aFileName, wchar_t *aBuffer);");
	set_frame_size(0X14000309A, 0X30, 0, 0);
	define_local_var(0X14000309A, 0X140003174, "[bp-0X30]", "FileName");
	define_local_var(0X14000309A, 0X140003174, "[bp-0X28]", "Buffer");
	define_local_var(0X14000309A, 0X140003174, "[bp-0X20]", "h");
	add_func    (0X140003174,0X1400031F5);
	set_func_flags(0X140003174,0x5400);
	SetType(0X140003174, "__int64 __fastcall OpenExistingFileW_0(wchar_t *aFileName);");
	set_frame_size(0X140003174, 0X20, 0, 0);
	define_local_var(0X140003174, 0X1400031F5, "[bp-0X20]", "filename");
	define_local_var(0X140003174, 0X1400031F5, "[bp-0X18]", "aAT");
	define_local_var(0X140003174, 0X1400031F5, "[bp-0X10]", "io");
	add_func    (0X1400031F5,0X14000350F);
	set_func_flags(0X1400031F5,0x5400);
	SetType(0X1400031F5, "void __fastcall set_env_vars(__int64, __int64, __int64, __int64, __int64);");
	set_frame_size(0X1400031F5, 0X98, 0, 0);
	add_func    (0X14000350F,0X140003592);
	set_func_flags(0X14000350F,0x5400);
	SetType(0X14000350F, "char *__fastcall Alloc_LoadResource(HMODULE hModule, HRSRC hResInfo);");
	set_frame_size(0X14000350F, 0X10, 0, 0);
	define_local_var(0X14000350F, 0X140003592, "[bp-0X8]", "buf");
	add_func    (0X140003592,0X140003CC9);
	set_func_flags(0X140003592,0x5400);
	SetType(0X140003592, "DWORD __stdcall m_PTHREAD_START_ROUTINE(LPVOID lpThreadParameter);");
	set_frame_size(0X140003592, 0XC8, 0, 0);
	define_local_var(0X140003592, 0X140003CC9, "[bp-0X70]", "total_out");
	define_local_var(0X140003592, 0X140003CC9, "[bp-0X68]", "size");
	define_local_var(0X140003592, 0X140003CC9, "[bp-0X20]", "buf");
	add_func    (0X140003CC9,0X140003DDC);
	set_func_flags(0X140003CC9,0x5400);
	SetType(0X140003CC9, "char *__usercall str_get_lpszShortPath@<rax>(wchar_t *lpszLongPath_1@<rcx>, __int64 alen@<^32.8>);");
	set_func_cmt(0X140003CC9,	"char *__usercall uncrypt_writefile@<rax>(wchar_t *a1@<rcx>, __int64 a2@<rdx>, __int64 a5@<^32.8>)\nchar *__fastcall str_get_lpszShortPath(wchar_t *lpszLongPath_1, __int64 a2, __int64 a3, __int64 a4, __int64 alen)\nchar *__usercall str_get_lpszShortPath@<rax>(wchar_t *lpszLongPath_1@<rcx>, __int64 alen@<^32.8>)", 1);
	set_frame_size(0X140003CC9, 0X20, 0, 0);
	define_local_var(0X140003CC9, 0X140003DDC, "[bp-0X20]", "lpszLongPath");
	define_local_var(0X140003CC9, 0X140003DDC, "[bp-0X18]", "lpszShortPath");
	define_local_var(0X140003CC9, 0X140003DDC, "[bp+0X28]", "alen");
	add_func    (0X140003DDC,0X1400040AC);
	set_func_flags(0X140003DDC,0x5400);
	SetType(0X140003DDC, "__int64 __fastcall sub_140003DDC(wchar_t *);");
	set_frame_size(0X140003DDC, 0X88, 0, 0);
	add_func    (0X1400040AC,0X140004134);
	set_func_flags(0X1400040AC,0x5400);
	SetType(0X1400040AC, "__int64 __stdcall EnumResNameW(__int64 hModule, __int64 lpType, wchar_t *lpName, __int64 lParam);");
	set_frame_size(0X1400040AC, 0X8, 0, 0);
	add_func    (0X140004134,0X140004211);
	set_func_flags(0X140004134,0x5400);
	SetType(0X140004134, "char *__fastcall decode(wchar_t *name);");
	set_frame_size(0X140004134, 0X30, 0, 0);
	define_local_var(0X140004134, 0X140004211, "[bp-0X30]", "lpName");
	define_local_var(0X140004134, 0X140004211, "[bp-0X18]", "out");
	define_local_var(0X140004134, 0X140004211, "[bp-0X10]", "total_out");
	define_local_var(0X140004134, 0X140004211, "[bp-0X8]", "err");
	add_func    (0X140004211,0X14000433F);
	set_func_flags(0X140004211,0x5400);
	SetType(0X140004211, "__int64 __usercall asm_initMdStuff@<rax>(__int64 a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8>, __int64 a4@<r9>, __int64 a5);");
	set_frame_size(0X140004211, 0X68, 0, 0);
	define_local_var(0X140004211, 0X14000433F, "[bp+0X28]", "a5");
	add_func    (0X14000433F,0X1400047E2);
	set_func_flags(0X14000433F,0x5400);
	SetType(0X14000433F, "void CMD_sub_14000433F();");
	set_frame_size(0X14000433F, 0X78, 0, 0);
	define_local_var(0X14000433F, 0X1400047E2, "[bp-0X30]", "aResName");
	define_local_var(0X14000433F, 0X1400047E2, "[bp-0X28]", "adBuff");
	add_func    (0X1400047E2,0X140004907);
	set_func_flags(0X1400047E2,0x5400);
	SetType(0X1400047E2, "char *__fastcall add_SystemDirectory_to_STR_tree(wchar_t *a1, wchar_t *a2, __int64 a3, __int64 a4, __int64 aAT);");
	set_frame_size(0X1400047E2, 0X20, 0, 0);
	define_local_var(0X1400047E2, 0X140004907, "[bp+0X28]", "aAT");
	add_func    (0X140004907,0X1400049EA);
	set_func_flags(0X140004907,0x5400);
	SetType(0X140004907, "__int64 CleanFilesAndDirs();");
	set_frame_size(0X140004907, 0X20, 0, 0);
	add_func    (0X1400049EA,0X140004EE2);
	set_func_flags(0X1400049EA,0x5400);
	SetType(0X1400049EA, "char *__fastcall MyBrowseForFolder(__int64 aKnownPathID, wchar_t *aTitle, __int64 a3, __int64 a4, __int64 aPos);");
	set_frame_size(0X1400049EA, 0X50, 0, 0);
	define_local_var(0X1400049EA, 0X140004EE2, "[bp+0X28]", "aPos");
	add_func    (0X140004EE2,0X1400056B4);
	set_func_flags(0X140004EE2,0x5400);
	SetType(0X140004EE2, "__int64 act_MyWriteFileText_path();");
	set_frame_size(0X140004EE2, 0XB8, 0, 0);
	add_func    (0X1400056B4,0X140005794);
	set_func_flags(0X1400056B4,0x5400);
	SetType(0X1400056B4, "__int64 __fastcall put_to602_dupToRMDIR(wchar_t *awstr);");
	set_frame_size(0X1400056B4, 0X20, 0, 0);
	define_local_var(0X1400056B4, 0X140005794, "[bp-0X20]", "wstr");
	add_func    (0X140005794,0X14000593C);
	set_func_flags(0X140005794,0x5400);
	SetType(0X140005794, "char *__usercall uncrypt_writefile@<rax>(wchar_t *a1@<rcx>, __int64 a2@<rdx>, __int64 a5@<^32.8>);");
	set_func_cmt(0X140005794,	"char *__usercall uncrypt_writefile@<rax>(wchar_t *a1@<rcx>, __int64 a2@<rdx>, __int64 a3@<r8d>, __int64 a4@<r9d>, __int64 a5@<^28.8>)", 1);
	set_frame_size(0X140005794, 0X30, 0, 0);
	define_local_var(0X140005794, 0X14000593C, "[bp+0X28]", "a5");
	add_func    (0X14000593C,0X1400067AA);
	set_func_flags(0X14000593C,0x1401);
	SetType(0X14000593C, "void __noreturn sub_14000593C();");
	set_frame_size(0X14000593C, 0XD0, 0, 0);
	add_func    (0X1400067AA,0X140006943);
	set_func_flags(0X1400067AA,0x5400);
	SetType(0X1400067AA, "__int64 __fastcall salt_MyBrowseForFolder(__int16 *);");
	set_frame_size(0X1400067AA, 0X30, 0, 0);
	add_func    (0X140006943,0X140006960);
	set_func_flags(0X140006943,0x5400);
	SetType(0X140006943, "SIZE_T __fastcall HeapSize__0(void *);");
	set_frame_size(0X140006943, 0X28, 0, 0);
	add_func    (0X140006960,0X140006A58);
	set_func_flags(0X140006960,0x5400);
	SetType(0X140006960, "_BOOL8 __fastcall MyWriteFile5(wchar_t *aFileName, _BYTE *aSRC, __int64 aSize);");
	set_frame_size(0X140006960, 0X30, 0, 0);
	define_local_var(0X140006960, 0X140006A58, "[bp-0X30]", "filename");
	define_local_var(0X140006960, 0X140006A58, "[bp-0X28]", "aAT");
	define_local_var(0X140006960, 0X140006A58, "[bp-0X20]", "aNW");
	define_local_var(0X140006960, 0X140006A58, "[bp-0X18]", "io");
	add_func    (0X140006A58,0X140006A99);
	set_func_flags(0X140006A58,0x5400);
	SetType(0X140006A58, "void __fastcall SET_TLS_2(__int64);");
	set_frame_size(0X140006A58, 0X48, 0, 0);
	define_local_var(0X140006A58, 0X140006A99, "[bp-0X10]", "dwErrCode");
	add_func    (0X140007000,0X140007006);
	set_func_flags(0X140007000,0x54c0);
	SetType(0X140007000, "void *__cdecl memset(void *, int Val, size_t Size);");
	set_frame_size(0X140007000, 0, 0, 0);
	add_func    (0X140007006,0X14000700C);
	set_func_flags(0X140007006,0x5480);
	SetType(0X140007006, "HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName);");
	set_frame_size(0X140007006, 0, 0, 0);
	add_func    (0X14000700C,0X140007012);
	set_func_flags(0X14000700C,0x54c0);
	SetType(0X14000700C, "HANDLE __stdcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);");
	set_frame_size(0X14000700C, 0, 0, 0);
	add_func    (0X140007012,0X140007018);
	set_func_flags(0X140007012,0x54c0);
	SetType(0X140007012, "HANDLE __stdcall GetStdHandle(DWORD nStdHandle);");
	set_frame_size(0X140007012, 0, 0, 0);
	add_func    (0X140007018,0X14000701E);
	set_func_flags(0X140007018,0x54c0);
	SetType(0X140007018, "BOOL __stdcall HeapDestroy(HANDLE hHeap);");
	set_frame_size(0X140007018, 0, 0, 0);
	add_func    (0X14000701E,0X140007024);
	set_func_flags(0X14000701E,0x54c1);
	SetType(0X14000701E, "void __stdcall __noreturn ExitProcess(UINT uExitCode);");
	set_frame_size(0X14000701E, 0, 0, 0);
	add_func    (0X140007024,0X14000702A);
	set_func_flags(0X140007024,0x54c0);
	SetType(0X140007024, "BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);");
	set_frame_size(0X140007024, 0, 0, 0);
	add_func    (0X14000702A,0X140007030);
	set_func_flags(0X14000702A,0x54c0);
	SetType(0X14000702A, "UINT __stdcall GetTempFileNameW(LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName);");
	set_frame_size(0X14000702A, 0, 0, 0);
	add_func    (0X140007030,0X140007036);
	set_func_flags(0X140007030,0x54c0);
	SetType(0X140007030, "HMODULE __stdcall LoadLibraryExW(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags);");
	set_frame_size(0X140007030, 0, 0, 0);
	add_func    (0X140007036,0X14000703C);
	set_func_flags(0X140007036,0x54c0);
	SetType(0X140007036, "BOOL __stdcall EnumResourceTypesW(HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam);");
	set_frame_size(0X140007036, 0, 0, 0);
	add_func    (0X14000703C,0X140007042);
	set_func_flags(0X14000703C,0x54c0);
	SetType(0X14000703C, "BOOL __stdcall FreeLibrary(HMODULE hLibModule);");
	set_frame_size(0X14000703C, 0, 0, 0);
	add_func    (0X140007042,0X140007048);
	set_func_flags(0X140007042,0x54c0);
	SetType(0X140007042, "BOOL __stdcall RemoveDirectoryW(LPCWSTR lpPathName);");
	set_frame_size(0X140007042, 0, 0, 0);
	add_func    (0X140007048,0X14000704E);
	set_func_flags(0X140007048,0x54c0);
	SetType(0X140007048, "BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode);");
	set_frame_size(0X140007048, 0, 0, 0);
	add_func    (0X14000704E,0X140007054);
	set_func_flags(0X14000704E,0x54c0);
	SetType(0X14000704E, "BOOL __stdcall EnumResourceNamesW(HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam);");
	set_frame_size(0X14000704E, 0, 0, 0);
	add_func    (0X140007054,0X14000705A);
	set_func_flags(0X140007054,0x54c0);
	SetType(0X140007054, "LPWSTR __stdcall GetCommandLineW();");
	set_frame_size(0X140007054, 0, 0, 0);
	add_func    (0X14000705A,0X140007060);
	set_func_flags(0X14000705A,0x54c0);
	SetType(0X14000705A, "HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC hResInfo);");
	set_frame_size(0X14000705A, 0, 0, 0);
	add_func    (0X140007060,0X140007066);
	set_func_flags(0X140007060,0x54c0);
	SetType(0X140007060, "DWORD __stdcall SizeofResource(HMODULE hModule, HRSRC hResInfo);");
	set_frame_size(0X140007060, 0, 0, 0);
	add_func    (0X140007066,0X14000706C);
	set_func_flags(0X140007066,0x54c0);
	SetType(0X140007066, "BOOL __stdcall FreeResource(HGLOBAL hResData);");
	set_frame_size(0X140007066, 0, 0, 0);
	add_func    (0X14000706C,0X140007072);
	set_func_flags(0X14000706C,0x54c0);
	SetType(0X14000706C, "HRSRC __stdcall FindResourceW(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType);");
	set_frame_size(0X14000706C, 0, 0, 0);
	add_func    (0X140007072,0X140007078);
	set_func_flags(0X140007072,0x54c0);
	SetType(0X140007072, "DWORD __stdcall GetShortPathNameW(LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer);");
	set_frame_size(0X140007072, 0, 0, 0);
	add_func    (0X140007078,0X14000707E);
	set_func_flags(0X140007078,0x54c0);
	SetType(0X140007078, "UINT __stdcall GetSystemDirectoryW(LPWSTR lpBuffer, UINT uSize);");
	set_frame_size(0X140007078, 0, 0, 0);
	add_func    (0X14000707E,0X140007084);
	set_func_flags(0X14000707E,0x54c0);
	SetType(0X14000707E, "BOOL __stdcall ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo);");
	set_frame_size(0X14000707E, 0, 0, 0);
	add_func    (0X140007084,0X14000708A);
	set_func_flags(0X140007084,0x54c0);
	SetType(0X140007084, "LPWSTR __stdcall PathAddBackslashW(LPWSTR pszPath);");
	set_frame_size(0X140007084, 0, 0, 0);
	add_func    (0X14000708A,0X140007090);
	set_func_flags(0X14000708A,0x54c0);
	SetType(0X14000708A, "BOOL __stdcall PathRenameExtensionW(LPWSTR pszPath, LPCWSTR pszExt);");
	set_frame_size(0X14000708A, 0, 0, 0);
	add_func    (0X140007090,0X140007096);
	set_func_flags(0X140007090,0x54c0);
	SetType(0X140007090, "BOOL __stdcall PathQuoteSpacesW(LPWSTR lpsz);");
	set_frame_size(0X140007090, 0, 0, 0);
	add_func    (0X140007096,0X14000709C);
	set_func_flags(0X140007096,0x54c0);
	SetType(0X140007096, "void __stdcall PathRemoveArgsW(LPWSTR pszPath);");
	set_frame_size(0X140007096, 0, 0, 0);
	add_func    (0X14000709C,0X1400070A2);
	set_func_flags(0X14000709C,0x54c0);
	SetType(0X14000709C, "LPWSTR __stdcall PathRemoveBackslashW(LPWSTR pszPath);");
	set_frame_size(0X14000709C, 0, 0, 0);
	add_func    (0X1400070A2,0X1400070A8);
	set_func_flags(0X1400070A2,0x54c0);
	SetType(0X1400070A2, "int __cdecl wcsncmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount);");
	set_frame_size(0X1400070A2, 0, 0, 0);
	add_func    (0X1400070A8,0X1400070AE);
	set_func_flags(0X1400070A8,0x54c0);
	SetType(0X1400070A8, "void *__cdecl memmove(void *, const void *Src, size_t Size);");
	set_frame_size(0X1400070A8, 0, 0, 0);
	add_func    (0X1400070AE,0X1400070B4);
	set_func_flags(0X1400070AE,0x54c0);
	SetType(0X1400070AE, "wchar_t *__cdecl wcsncpy(wchar_t *Destination, const wchar_t *Source, size_t Count);");
	set_frame_size(0X1400070AE, 0, 0, 0);
	add_func    (0X1400070B4,0X1400070BA);
	set_func_flags(0X1400070B4,0x54c0);
	SetType(0X1400070B4, "wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);");
	set_frame_size(0X1400070B4, 0, 0, 0);
	add_func    (0X1400070BA,0X1400070C0);
	set_func_flags(0X1400070BA,0x54c0);
	SetType(0X1400070BA, "int __cdecl wcsnicmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount);");
	set_frame_size(0X1400070BA, 0, 0, 0);
	add_func    (0X1400070C0,0X1400070C6);
	set_func_flags(0X1400070C0,0x54c0);
	SetType(0X1400070C0, "wchar_t *__cdecl wcsdup(const wchar_t *String);");
	set_frame_size(0X1400070C0, 0, 0, 0);
	add_func    (0X1400070C6,0X1400070CC);
	set_func_flags(0X1400070C6,0x54c0);
	SetType(0X1400070C6, "void __cdecl free(void *Block);");
	set_frame_size(0X1400070C6, 0, 0, 0);
	add_func    (0X1400070CC,0X1400070D2);
	set_func_flags(0X1400070CC,0x54c0);
	SetType(0X1400070CC, "int __cdecl wcsicmp(const wchar_t *String1, const wchar_t *String2);");
	set_frame_size(0X1400070CC, 0, 0, 0);
	add_func    (0X1400070D2,0X1400070D8);
	set_func_flags(0X1400070D2,0x54c0);
	SetType(0X1400070D2, "size_t __cdecl wcslen(const wchar_t *String);");
	set_frame_size(0X1400070D2, 0, 0, 0);
	add_func    (0X1400070D8,0X1400070DE);
	set_func_flags(0X1400070D8,0x54c0);
	SetType(0X1400070D8, "wchar_t *__cdecl wcscpy(wchar_t *Destination, const wchar_t *Source);");
	set_frame_size(0X1400070D8, 0, 0, 0);
	add_func    (0X1400070DE,0X1400070E4);
	set_func_flags(0X1400070DE,0x54c0);
	SetType(0X1400070DE, "int __cdecl wcscmp(const wchar_t *String1, const wchar_t *String2);");
	set_frame_size(0X1400070DE, 0, 0, 0);
	add_func    (0X1400070E4,0X1400070EA);
	set_func_flags(0X1400070E4,0x54c0);
	SetType(0X1400070E4, "void *__cdecl memcpy(void *, const void *Src, size_t Size);");
	set_frame_size(0X1400070E4, 0, 0, 0);
	add_func    (0X1400070EA,0X1400070F0);
	set_func_flags(0X1400070EA,0x54c0);
	SetType(0X1400070EA, "int __cdecl tolower(int C);");
	set_frame_size(0X1400070EA, 0, 0, 0);
	add_func    (0X1400070F0,0X1400070F6);
	set_func_flags(0X1400070F0,0x54c0);
	SetType(0X1400070F0, "wchar_t *__cdecl wcscat(wchar_t *Destination, const wchar_t *Source);");
	set_frame_size(0X1400070F0, 0, 0, 0);
	add_func    (0X1400070F6,0X1400070FC);
	set_func_flags(0X1400070F6,0x54c0);
	SetType(0X1400070F6, "void *__cdecl malloc(size_t Size);");
	set_frame_size(0X1400070F6, 0, 0, 0);
	add_func    (0X1400070FC,0X140007102);
	set_func_flags(0X1400070FC,0x54c0);
	SetType(0X1400070FC, "LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex);");
	set_frame_size(0X1400070FC, 0, 0, 0);
	add_func    (0X140007102,0X140007108);
	set_func_flags(0X140007102,0x54c0);
	SetType(0X140007102, "DWORD __stdcall GetLastError();");
	set_frame_size(0X140007102, 0, 0, 0);
	add_func    (0X140007108,0X14000710E);
	set_func_flags(0X140007108,0x54c0);
	SetType(0X140007108, "void __stdcall SetLastError(DWORD dwErrCode);");
	set_frame_size(0X140007108, 0, 0, 0);
	add_func    (0X140007110,0X140007160);
	set_func_flags(0X140007110,0x1400);
	SetType(0X140007110, "void g_tree_stru0x20_closehandles();");
	set_frame_size(0X140007110, 0X28, 0, 0);
	add_func    (0X140007160,0X14000716E);
	set_func_flags(0X140007160,0x1400);
	SetType(0X140007160, "void InitCriticalSection();");
	add_func    (0X140007170,0X14000719B);
	set_func_flags(0X140007170,0x5400);
	SetType(0X140007170, "void *__fastcall sub_140007170(__int64);");
	set_frame_size(0X140007170, 0X28, 0, 0);
	add_func    (0X14000719C,0X14000720A);
	set_func_flags(0X14000719C,0x5400);
	SetType(0X14000719C, "__int64 __fastcall sub_14000719C(__int64);");
	set_frame_size(0X14000719C, 0X28, 0, 0);
	add_func    (0X14000720C,0X140007281);
	set_func_flags(0X14000720C,0x1400);
	SetType(0X14000720C, "void __fastcall sub_14000720C(__int64);");
	set_frame_size(0X14000720C, 0X28, 0, 0);
	add_func    (0X140007284,0X140007362);
	set_func_flags(0X140007284,0x5400);
	SetType(0X140007284, "QWORD __fastcall add_results_to_tree(LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter);");
	set_frame_size(0X140007284, 0X38, 0, 0);
	define_local_var(0X140007284, 0X140007362, "[bp-0X18]", "dwCreationFlags");
	add_func    (0X140007364,0X140007398);
	set_func_flags(0X140007364,0x1400);
	SetType(0X140007364, "void __fastcall MySleep(DWORD);");
	set_frame_size(0X140007364, 0X28, 0, 0);
	add_func    (0X1400073A0,0X140007439);
	set_func_flags(0X1400073A0,0x5400);
	SetType(0X1400073A0, "CHAR *__fastcall wtoc_alloc(LPCWCH lpWideCharStr);");
	set_frame_size(0X1400073A0, 0X48, 0, 0);
	define_local_var(0X1400073A0, 0X140007439, "[bp-0X28]", "lpMultiByteStr");
	define_local_var(0X1400073A0, 0X140007439, "[bp-0X20]", "cbMultiByte");
	define_local_var(0X1400073A0, 0X140007439, "[bp-0X18]", "lpDefaultChar");
	define_local_var(0X1400073A0, 0X140007439, "[bp-0X10]", "lpUsedDefaultChar");
	add_func    (0X140007440,0X1400074D3);
	set_func_flags(0X140007440,0x5400);
	SetType(0X140007440, "__int64 __fastcall myCmpItem(__int16 *, __int16 *);");
	set_frame_size(0X140007440, 0X8, 0, 0);
	add_func    (0X1400074E0,0X140007657);
	set_func_flags(0X1400074E0,0x5400);
	SetType(0X1400074E0, "wchar_t *__fastcall STR_TREE_MOVE_COPY(wchar_t *Source, int, DWORD *, int);");
	set_frame_size(0X1400074E0, 0X48, 0, 0);
	add_func    (0X140007660,0X1400076A0);
	set_func_flags(0X140007660,0x5400);
	SetType(0X140007660, "__int64 __fastcall mywcsstr(const wchar_t *, const wchar_t *);");
	set_frame_size(0X140007660, 0X28, 0, 0);
	add_func    (0X1400076A0,0X14000772D);
	set_func_flags(0X1400076A0,0x5400);
	SetType(0X1400076A0, "__int64 __fastcall INLINED_sub_1400076A0(_WORD *, const wchar_t *, int);");
	set_frame_size(0X1400076A0, 0X28, 0, 0);
	add_func    (0X140007730,0X1400077EA);
	set_func_flags(0X140007730,0x5400);
	SetType(0X140007730, "void __fastcall INLINED_sub_140007730(_WORD *, wchar_t *, int, char);");
	set_frame_size(0X140007730, 0X28, 0, 0);
	add_func    (0X1400077F0,0X140007914);
	set_func_flags(0X1400077F0,0x5400);
	SetType(0X1400077F0, "__int64 __fastcall act_itoa(unsigned __int16 *);");
	set_frame_size(0X1400077F0, 0, 0, 0);
	add_func    (0X140007920,0X1400079C7);
	set_func_flags(0X140007920,0x5400);
	SetType(0X140007920, "_DWORD *__fastcall act_mywstrcpy(wchar_t *a1, int a2, int aPos);");
	set_frame_size(0X140007920, 0X38, 0, 0);
	add_func    (0X1400079D0,0X1400079F4);
	set_func_flags(0X1400079D0,0x5400);
	SetType(0X1400079D0, "__int64 __fastcall act_wcsncmp(wchar_t *, wchar_t *, int);");
	set_frame_size(0X1400079D0, 0X38, 0, 0);
	add_func    (0X140007A00,0X140007A21);
	set_func_flags(0X140007A00,0x5400);
	SetType(0X140007A00, "__int64 __fastcall INLINED_sub_140007A00(wchar_t *, __int16 *, char, int);");
	set_frame_size(0X140007A00, 0X38, 0, 0);
	add_func    (0X140007A30,0X140007A4E);
	set_func_flags(0X140007A30,0x5400);
	SetType(0X140007A30, "__int64 __fastcall INLINED_sub_140007A30(wchar_t *, __int16 *, char, int, int);");
	set_frame_size(0X140007A30, 0X38, 0, 0);
	add_func    (0X140007A50,0X140007C86);
	set_func_flags(0X140007A50,0x5400);
	SetType(0X140007A50, "__int64 __fastcall act_wcsncmp2(wchar_t *Source, wchar_t *, char, int, int, int);");
	set_frame_size(0X140007A50, 0X68, 0, 0);
	add_func    (0X140007C90,0X140007CB1);
	set_func_flags(0X140007C90,0x5400);
	SetType(0X140007C90, "char *__fastcall add_to_STR_tree_CHAR(__int16, int);");
	set_frame_size(0X140007C90, 0X28, 0, 0);
	add_func    (0X140007CC0,0X140007CDE);
	set_func_flags(0X140007CC0,0x5400);
	SetType(0X140007CC0, "unsigned __int64 __fastcall mywstrlen(wchar_t *a1);");
	set_frame_size(0X140007CC0, 0, 0, 0);
	add_func    (0X140007CE0,0X140007DB3);
	set_func_flags(0X140007CE0,0x5400);
	SetType(0X140007CE0, "__int64 __fastcall wStrReverse(wchar_t *awStr, int aPos);");
	set_frame_size(0X140007CE0, 0X28, 0, 0);
	add_func    (0X140007DC0,0X140007E46);
	set_func_flags(0X140007DC0,0x5400);
	SetType(0X140007DC0, "LPWSTR __fastcall MyCharUpperW(wchar_t *, int apos);");
	set_frame_size(0X140007DC0, 0X28, 0, 0);
	add_func    (0X140007E50,0X140007EE3);
	set_func_flags(0X140007E50,0x5400);
	SetType(0X140007E50, "_DWORD *__fastcall wstrstuff(wchar_t *awStr, int a2, int aPos);");
	set_frame_size(0X140007E50, 0X38, 0, 0);
	add_func    (0X140007EF0,0X140007EFF);
	set_func_flags(0X140007EF0,0x1400);
	SetType(0X140007EF0, "void __fastcall mywstrcpy_space(wchar_t *a1, int a2);");
	add_func    (0X140007F00,0X14000800B);
	set_func_flags(0X140007F00,0x5400);
	SetType(0X140007F00, "void __fastcall mywstrcpy_space2(wchar_t *a1, unsigned __int16 *a2, int a3);");
	set_frame_size(0X140007F00, 0X48, 0, 0);
	add_func    (0X140008010,0X140008049);
	set_func_flags(0X140008010,0x1400);
	SetType(0X140008010, "void __fastcall tree_stuff02(wchar_t *src, __int64 a2, int a3);");
	add_func    (0X140008050,0X14000810B);
	set_func_flags(0X140008050,0x5400);
	SetType(0X140008050, "void __fastcall tree_stuff01(wchar_t *asrc, int a2, int alen, int a4);");
	set_frame_size(0X140008050, 0X38, 0, 0);
	add_func    (0X140008110,0X140008162);
	set_func_flags(0X140008110,0x1400);
	SetType(0X140008110, "__int64 __fastcall my_atoi(__int64, int);");
	set_frame_size(0X140008110, 0X28, 0, 0);
	add_func    (0X140008170,0X1400081C1);
	set_func_flags(0X140008170,0x5400);
	SetType(0X140008170, "wchar_t *__fastcall alloc_to_STR_SPACE_tree(int aSize, int aAT);");
	set_frame_size(0X140008170, 0X28, 0, 0);
	add_func    (0X1400081D0,0X1400081F6);
	set_func_flags(0X1400081D0,0x5400);
	SetType(0X1400081D0, "void __fastcall my_wcsn_cmpcpy(wchar_t *, wchar_t *, wchar_t *, int);");
	set_frame_size(0X1400081D0, 0X48, 0, 0);
	add_func    (0X140008200,0X140008226);
	set_func_flags(0X140008200,0x5400);
	SetType(0X140008200, "void __fastcall INLINED_sub_140008200(wchar_t *, wchar_t *, wchar_t *, char, int);");
	set_frame_size(0X140008200, 0X48, 0, 0);
	add_func    (0X140008230,0X140008256);
	set_func_flags(0X140008230,0x5400);
	SetType(0X140008230, "void __fastcall INLINED_sub_140008230(wchar_t *, wchar_t *, wchar_t *, char, int, int);");
	set_frame_size(0X140008230, 0X48, 0, 0);
	add_func    (0X140008260,0X1400085E2);
	set_func_flags(0X140008260,0x5400);
	SetType(0X140008260, "void __fastcall my_wcsn_cmpcpy2(wchar_t *String, wchar_t *Block, wchar_t *, char, int, int, int);");
	set_frame_size(0X140008260, 0X88, 0, 0);
	define_local_var(0X140008260, 0X1400085E2, "[bp-0X68]", "Source");
	define_local_var(0X140008260, 0X1400085E2, "[bp-0X60]", "P_wcsnicmp_1");
	add_func    (0X1400085F0,0X1400086C9);
	set_func_flags(0X1400085F0,0x5400);
	SetType(0X1400085F0, "char *__fastcall INLINED2_sub_1400085F0(char *, _WORD *);");
	set_frame_size(0X1400085F0, 0X58, 0, 0);
	add_func    (0X1400086D0,0X140008759);
	set_func_flags(0X1400086D0,0x5400);
	SetType(0X1400086D0, "__int64 __fastcall INLINED_sub_1400086D0(__int64, unsigned __int16 *, __int64);");
	set_frame_size(0X1400086D0, 0X28, 0, 0);
	add_func    (0X140008760,0X140008A84);
	set_func_flags(0X140008760,0x5400);
	SetType(0X140008760, "void __fastcall INLINED_sub_140008760(_QWORD *, char, __int64, __int64);");
	set_frame_size(0X140008760, 0, 0, 0);
	add_func    (0X140008A90,0X140008CDA);
	set_func_flags(0X140008A90,0x5400);
	SetType(0X140008A90, "void __fastcall INLINED_sub_140008A90(__int64 *, char);");
	set_frame_size(0X140008A90, 0X18, 0, 0);
	add_func    (0X140008D40,0X140008FFF);
	set_func_flags(0X140008D40,0x5400);
	SetType(0X140008D40, "void __fastcall Qsort_(stru_601 *, char eq1, int eq0, DWORD eq5, __int64, __int64);");
	set_frame_size(0X140008D40, 0X10, 0, 0);
	add_func    (0X140009070,0X140009090);
	set_func_flags(0X140009070,0x5400);
	SetType(0X140009070, "void __fastcall Qsort(root_601 *r601, unsigned int eq1, int eq0, DWORD eq5);");
	set_frame_size(0X140009070, 0X38, 0, 0);
	add_func    (0X140009090,0X14000922D);
	set_func_flags(0X140009090,0x5410);
	SetType(0X140009090, "void __fastcall qsort_1_a_(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X140009090, 0X40, 24, 0);
	add_func    (0X140009230,0X1400093CD);
	set_func_flags(0X140009230,0x5410);
	SetType(0X140009230, "void __fastcall qsort_1_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X140009230, 0X40, 24, 0);
	add_func    (0X1400093D0,0X14000956D);
	set_func_flags(0X1400093D0,0x5410);
	SetType(0X1400093D0, "void __fastcall qsort_0xb_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X1400093D0, 0X40, 24, 0);
	add_func    (0X140009570,0X14000970D);
	set_func_flags(0X140009570,0x5410);
	SetType(0X140009570, "void __fastcall qsort_d_a(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X140009570, 0X40, 24, 0);
	add_func    (0X140009710,0X1400098AD);
	set_func_flags(0X140009710,0x5410);
	SetType(0X140009710, "void __fastcall qsort_f_a(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X140009710, 0X40, 24, 0);
	add_func    (0X1400098B0,0X140009A3D);
	set_func_flags(0X1400098B0,0x5410);
	SetType(0X1400098B0, "void __fastcall qsort_4_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X1400098B0, 0X40, 24, 0);
	add_func    (0X140009A40,0X140009BCD);
	set_func_flags(0X140009A40,0x5410);
	SetType(0X140009A40, "void __fastcall qsort_8_a(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X140009A40, 0X40, 24, 0);
	add_func    (0X140009BD0,0X140009D96);
	set_func_flags(0X140009BD0,0x5410);
	SetType(0X140009BD0, "void __fastcall qsort_s_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X140009BD0, 0X48, 32, 0);
	add_func    (0X140009DA0,0X140009F66);
	set_func_flags(0X140009DA0,0x5410);
	SetType(0X140009DA0, "void __fastcall qsort_si_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X140009DA0, 0X48, 32, 0);
	add_func    (0X140009F70,0X14000A10D);
	set_func_flags(0X140009F70,0x5410);
	SetType(0X140009F70, "void __fastcall qsort_2_a_(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X140009F70, 0X40, 24, 0);
	add_func    (0X14000A110,0X14000A2AD);
	set_func_flags(0X14000A110,0x5410);
	SetType(0X14000A110, "void __fastcall qsort_2_a(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000A110, 0X40, 24, 0);
	add_func    (0X14000A2B0,0X14000A450);
	set_func_flags(0X14000A2B0,0x5410);
	SetType(0X14000A2B0, "void __fastcall qsort_1_d_(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000A2B0, 0X40, 24, 0);
	add_func    (0X14000A450,0X14000A5F0);
	set_func_flags(0X14000A450,0x5410);
	SetType(0X14000A450, "void __fastcall qsort_1_d(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000A450, 0X40, 24, 0);
	add_func    (0X14000A5F0,0X14000A790);
	set_func_flags(0X14000A5F0,0x5410);
	SetType(0X14000A5F0, "void __fastcall qsort_0xb_d(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000A5F0, 0X40, 24, 0);
	add_func    (0X14000A790,0X14000A930);
	set_func_flags(0X14000A790,0x5410);
	SetType(0X14000A790, "void __fastcall qsort_d_d(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000A790, 0X40, 24, 0);
	add_func    (0X14000A930,0X14000AAD0);
	set_func_flags(0X14000A930,0x5410);
	SetType(0X14000A930, "void __fastcall qsort_f_d(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000A930, 0X40, 24, 0);
	add_func    (0X14000AAD0,0X14000AC60);
	set_func_flags(0X14000AAD0,0x5410);
	SetType(0X14000AAD0, "void __fastcall qsort_4_d(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000AAD0, 0X40, 24, 0);
	add_func    (0X14000AC60,0X14000ADF0);
	set_func_flags(0X14000AC60,0x5410);
	SetType(0X14000AC60, "void __fastcall qsort_8_d(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000AC60, 0X40, 24, 0);
	add_func    (0X14000ADF0,0X14000AFB6);
	set_func_flags(0X14000ADF0,0x5410);
	SetType(0X14000ADF0, "void __fastcall qsort_s_d(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000ADF0, 0X48, 32, 0);
	add_func    (0X14000AFC0,0X14000B186);
	set_func_flags(0X14000AFC0,0x5410);
	SetType(0X14000AFC0, "void __fastcall qsort_si_d(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000AFC0, 0X48, 32, 0);
	add_func    (0X14000B190,0X14000B330);
	set_func_flags(0X14000B190,0x5410);
	SetType(0X14000B190, "void __fastcall qsort_2_d_(stru_602 *, stru_602 **, __int64, __int64);");
	set_frame_size(0X14000B190, 0X40, 24, 0);
	add_func    (0X14000B330,0X14000B4D0);
	set_func_flags(0X14000B330,0x5410);
	SetType(0X14000B330, "void __fastcall qsort_2_d(stru_602 *a602, stru_602 **a2, __int64 a3, __int64 a4);");
	set_frame_size(0X14000B330, 0X40, 24, 0);
	add_func    (0X14000B4D0,0X14000B510);
	set_func_flags(0X14000B4D0,0x5400);
	SetType(0X14000B4D0, "int __fastcall mywcsicmp2(const wchar_t *String1, const wchar_t *String2);");
	set_frame_size(0X14000B4D0, 0, 0, 0);
	add_func    (0X14000B510,0X14000B536);
	set_func_flags(0X14000B510,0x5400);
	SetType(0X14000B510, "int __fastcall mywcsicmp(const wchar_t *String1, const wchar_t *String2);");
	set_frame_size(0X14000B510, 0, 0, 0);
	add_func    (0X14000B538,0X14000B574);
	set_func_flags(0X14000B538,0x5400);
	SetType(0X14000B538, "void __stdcall MyInitCommonControls();");
	set_frame_size(0X14000B538, 0X28, 0, 0);
	define_local_var(0X14000B538, 0X14000B574, "[bp+0X8]", "picce");
	add_func    (0X14000B574,0X14000B5D7);
	set_func_flags(0X14000B574,0x5400);
	SetType(0X14000B574, "__int64 __stdcall MyMessageBox(LPCWSTR lpCaption, LPCWSTR lpText, UINT uType);");
	set_frame_size(0X14000B574, 0X28, 0, 0);
	add_func    (0X14000B5D8,0X14000B62B);
	set_func_flags(0X14000B5D8,0x5400);
	SetType(0X14000B5D8, "wchar_t *__fastcall wcscpy_heap_alloc(wchar_t *Source);");
	set_frame_size(0X14000B5D8, 0X28, 0, 0);
	add_func    (0X14000B62C,0X14000B64C);
	set_func_flags(0X14000B62C,0x5400);
	SetType(0X14000B62C, "BOOL __fastcall INLINED_sub_14000B62C(LPVOID lpMem);");
	set_frame_size(0X14000B62C, 0X28, 0, 0);
	add_func    (0X14000B64C,0X14000B73E);
	set_func_flags(0X14000B64C,0x5400);
	SetType(0X14000B64C, "LRESULT __fastcall wndproc(HWND hWnd, UINT, WPARAM, LPARAM);");
	set_frame_size(0X14000B64C, 0X28, 0, 0);
	add_func    (0X14000B740,0X14000B756);
	set_func_flags(0X14000B740,0x5400);
	SetType(0X14000B740, "int __fastcall INLINED_sub_14000B740(wchar_t *, wchar_t *, wchar_t *, int);");
	set_frame_size(0X14000B740, 0X38, 0, 0);
	add_func    (0X14000B758,0X14000BC0A);
	set_func_flags(0X14000B758,0x5410);
	SetType(0X14000B758, "int __fastcall create_InputRequester(wchar_t *wndname, wchar_t *labelname, wchar_t *edit_value, char a4, int a5);");
	set_frame_size(0X14000B758, 0X118, 8, 0);
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XF0]", "X");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XE8]", "Y");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XE0]", "nWidth");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XD8]", "nHeight");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XD0]", "hWndParent");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XC8]", "hMenu");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XC0]", "hInstance");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XB8]", "lpParam");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XB0]", "paccel");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0XA0]", "wnd");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp-0X50]", "Msg");
	define_local_var(0X14000B758, 0X14000BC0A, "[bp+0X10]", "strUserData");
	add_func    (0X14000BC0C,0X14000BC36);
	set_func_flags(0X14000BC0C,0x1400);
	SetType(0X14000BC0C, "void INLINED_sub_14000BC0C();");
	set_frame_size(0X14000BC0C, 0X28, 0, 0);
	add_func    (0X14000BC38,0X14000BC91);
	set_func_flags(0X14000BC38,0x5400);
	SetType(0X14000BC38, "int __stdcall BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);");
	set_frame_size(0X14000BC38, 0X28, 0, 0);
	add_func    (0X14000BC94,0X14000BE5A);
	set_func_flags(0X14000BC94,0x5410);
	SetType(0X14000BC94, "__int64 __fastcall mySHBrowseForFolderW(const CHAR *aTitle, const wchar_t *aPath, int aPos);");
	set_frame_size(0X14000BC94, 0X298, 8, 0);
	define_local_var(0X14000BC94, 0X14000BE5A, "[bp-0X270]", "bi");
	define_local_var(0X14000BC94, 0X14000BE5A, "[bp-0X230]", "Destination");
	define_local_var(0X14000BC94, 0X14000BE5A, "[bp+0X28]", "SHGetPathFromIDListW2");
	add_func    (0X14000BE5C,0X14000BEA0);
	set_func_flags(0X14000BE5C,0x5400);
	SetType(0X14000BE5C, "HWND MyProcess_ForegroundWindow();");
	set_frame_size(0X14000BE5C, 0X28, 0, 0);
	define_local_var(0X14000BE5C, 0X14000BEA0, "[bp+0X8]", "dwProcessId");
	add_func    (0X14000BEA0,0X14000BF41);
	set_func_flags(0X14000BEA0,0x5400);
	SetType(0X14000BEA0, "__int64 __fastcall EnumFunc(HWND);");
	set_frame_size(0X14000BEA0, 0X28, 0, 0);
	add_func    (0X14000BF44,0X14000C03E);
	set_func_flags(0X14000BF44,0x5400);
	SetType(0X14000BF44, "void __fastcall wnd_set_back(int lparam);");
	set_frame_size(0X14000BF44, 0X48, 0, 0);
	define_local_var(0X14000BF44, 0X14000C03E, "[bp-0X18]", "uFlags");
	add_func    (0X14000C040,0X14000C07B);
	set_func_flags(0X14000C040,0x5400);
	SetType(0X14000C040, "void __fastcall MyCloseHandle(__int64 aAT);");
	set_frame_size(0X14000C040, 0X28, 0, 0);
	add_func    (0X14000C07C,0X14000C0C1);
	set_func_flags(0X14000C07C,0x1400);
	SetType(0X14000C07C, "void init_g_TLS_8_g_stru60_4();");
	set_frame_size(0X14000C07C, 0X28, 0, 0);
	add_func    (0X14000C0C4,0X14000C14D);
	set_func_flags(0X14000C0C4,0x5400);
	SetType(0X14000C0C4, "void __fastcall MyGetModuleFileNameW(int apos);");
	set_frame_size(0X14000C0C4, 0X28, 0, 0);
	add_func    (0X14000C150,0X14000C186);
	set_func_flags(0X14000C150,0x5400);
	SetType(0X14000C150, "__int64 __fastcall INLINED_sub_14000C150(__int16 *, _WORD *, int);");
	set_frame_size(0X14000C150, 0, 0, 0);
	add_func    (0X14000C188,0X14000C2B9);
	set_func_flags(0X14000C188,0x5400);
	SetType(0X14000C188, "LPWSTR __stdcall asm_MyGetCommandLine2(_DWORD *a1);");
	set_func_cmt(0X14000C188,	"\nLPWSTR __usercall sub_14000C188@<rax>(_DWORD *a1@<rcx>, QWORD a2@<rax>)\n\n", 1);
	set_frame_size(0X14000C188, 0X38, 0, 0);
	add_func    (0X14000C2BC,0X14000C2D7);
	set_func_flags(0X14000C2BC,0x5400);
	SetType(0X14000C2BC, "LPWSTR __fastcall asm_MyGetCommandLine_TLS_8();");
	set_frame_size(0X14000C2BC, 0X28, 0, 0);
	add_func    (0X14000C2D8,0X14000C34F);
	set_func_flags(0X14000C2D8,0x1400);
	SetType(0X14000C2D8, "__int64 __fastcall INLINED_sub_14000C2D8(int);");
	set_frame_size(0X14000C2D8, 0X28, 0, 0);
	add_func    (0X14000C350,0X14000C3DC);
	set_func_flags(0X14000C350,0x1400);
	SetType(0X14000C350, "__int64 __fastcall cmdline_to_STR_Tree(int ecx0, int aPos);");
	set_frame_size(0X14000C350, 0X28, 0, 0);
	define_local_var(0X14000C350, 0X14000C3DC, "[bp+0X8]", "a1");
	add_func    (0X14000C3DC,0X14000C442);
	set_func_flags(0X14000C3DC,0x5400);
	SetType(0X14000C3DC, "DWORD __fastcall INLINED_sub_14000C3DC(LPCWSTR lpName, int);");
	set_frame_size(0X14000C3DC, 0X28, 0, 0);
	add_func    (0X14000C444,0X14000C45A);
	set_func_flags(0X14000C444,0x5400);
	SetType(0X14000C444, "BOOL __fastcall INLINED_sub_14000C444(const WCHAR *);");
	set_frame_size(0X14000C444, 0X28, 0, 0);
	add_func    (0X14000C45C,0X14000C481);
	set_func_flags(0X14000C45C,0x5400);
	SetType(0X14000C45C, "void __fastcall MySetEnvironmentVariableW(const WCHAR *lpName, const WCHAR *lpValue);");
	set_frame_size(0X14000C45C, 0X28, 0, 0);
	add_func    (0X14000C490,0X14000C4CD);
	set_func_flags(0X14000C490,0x5400);
	SetType(0X14000C490, "int __stdcall fn_VECTORED_EXCEPTION_HANDLER(_EXCEPTION_POINTERS *ExceptionInfo);");
	set_frame_size(0X14000C490, 0X28, 0, 0);
	add_func    (0X14000C4D0,0X14000C4E3);
	set_func_flags(0X14000C4D0,0x1400);
	SetType(0X14000C4D0, "void __fastcall AddVectoredExceptionHandler__(stru0x20 *);");
	add_func    (0X14000C4F0,0X14000C6AB);
	set_func_flags(0X14000C4F0,0x5400);
	SetType(0X14000C4F0, "unsigned __int64 __fastcall EXCEPTION_sub(_EXCEPTION_POINTERS *ExceptionInfo);");
	set_frame_size(0X14000C4F0, 0X518, 0, 0);
	define_local_var(0X14000C4F0, 0X14000C6AB, "[bp-0X4F8]", "ContextRecord");
	define_local_var(0X14000C4F0, 0X14000C6AB, "[bp-0X4F0]", "HandlerData");
	define_local_var(0X14000C4F0, 0X14000C6AB, "[bp-0X4E8]", "EstablisherFrame");
	define_local_var(0X14000C4F0, 0X14000C6AB, "[bp-0X4E0]", "ContextPointers");
	define_local_var(0X14000C4F0, 0X14000C6AB, "[bp+0X8]", "ImageBase");
	add_func    (0X14000C6B0,0X14000C6D6);
	set_func_flags(0X14000C6B0,0x5400);
	SetType(0X14000C6B0, "ULONG myRemoveVectoredExceptionHandler();");
	set_frame_size(0X14000C6B0, 0X28, 0, 0);
	add_func    (0X14000C6E0,0X14000C88D);
	set_func_flags(0X14000C6E0,0x5400);
	SetType(0X14000C6E0, "__int64 __fastcall EXCEPTION_sub2(_EXCEPTION_POINTERS *ExceptionInfo);");
	set_frame_size(0X14000C6E0, 0X28, 0, 0);
	add_func    (0X14000C890,0X14000C8D3);
	set_func_flags(0X14000C890,0x5400);
	SetType(0X14000C890, "void __fastcall AddVectoredExceptionHandler_(PVECTORED_EXCEPTION_HANDLER Handler);");
	set_frame_size(0X14000C890, 0X28, 0, 0);
	add_func    (0X14000C8E0,0X14000C8ED);
	set_func_flags(0X14000C8E0,0x1400);
	SetType(0X14000C8E0, "char *__fastcall exErrStr_(int apos);");
	add_func    (0X14000C8F0,0X14000C967);
	set_func_flags(0X14000C8F0,0x5400);
	SetType(0X14000C8F0, "char *__fastcall exErrStr(int aExcode, int apos);");
	set_frame_size(0X14000C8F0, 0X28, 0, 0);
	add_func    (0X14000C970,0X14000C97E);
	set_func_flags(0X14000C970,0x1400);
	SetType(0X14000C970, "BOOL ZHeapDestroy();");
	add_func    (0X14000C980,0X14000C9A0);
	set_func_flags(0X14000C980,0x5400);
	SetType(0X14000C980, "void __stdcall ZHeapCreate();");
	set_frame_size(0X14000C980, 0X28, 0, 0);
	add_func    (0X14000C9A0,0X14000C9BB);
	set_func_flags(0X14000C9A0,0x5400);
	SetType(0X14000C9A0, "SIZE_T __stdcall ZHeapSize(HANDLE hHeap);");
	set_frame_size(0X14000C9A0, 0, 0, 0);
	add_func    (0X14000C9C0,0X14000C9D3);
	set_func_flags(0X14000C9C0,0x1400);
	SetType(0X14000C9C0, "BOOL __stdcall ZHeapFree(HANDLE hHeap);");
	add_func    (0X14000C9E0,0X14000C9FE);
	set_func_flags(0X14000C9E0,0x5400);
	SetType(0X14000C9E0, "LPVOID __stdcall ZHeapAlloc(SIZE_T dwBytes_1);");
	set_frame_size(0X14000C9E0, 0, 0, 0);
	add_func    (0X14000CA00,0X14000CA68);
	set_func_flags(0X14000CA00,0x5400);
	SetType(0X14000CA00, "_WORD *__fastcall add_to_STR_tree_AT(wchar_t *Src, int apos);");
	set_frame_size(0X14000CA00, 0X28, 0, 0);
	add_func    (0X14000CA70,0X14000CA75);
	set_func_flags(0X14000CA70,0x5400);
	SetType(0X14000CA70, "__int64 __fastcall ptr(__int16 *);");
	set_frame_size(0X14000CA70, 0, 0, 0);
	add_func    (0X14000CA80,0X14000CB09);
	set_func_flags(0X14000CA80,0x5400);
	SetType(0X14000CA80, "void __fastcall add_to_STR_tree_AT2(wchar_t *alpszShortPath, __int64 alen, int apos);");
	set_frame_size(0X14000CA80, 0X28, 0, 0);
	add_func    (0X14000CB10,0X14000CB3A);
	set_func_flags(0X14000CB10,0x5400);
	SetType(0X14000CB10, "char *__fastcall memcpy_end(void *Src, char *Dst, size_t size);");
	set_frame_size(0X14000CB10, 0X28, 0, 0);
	add_func    (0X14000CB40,0X14000CB44);
	set_func_flags(0X14000CB40,0x5400);
	SetType(0X14000CB40, "__int64 __fastcall ptr64(__int64);");
	set_frame_size(0X14000CB40, 0, 0, 0);
	add_func    (0X14000CB50,0X14000CB53);
	set_func_flags(0X14000CB50,0x5400);
	SetType(0X14000CB50, "void __fastcall SETDW(_DWORD *, int);");
	set_frame_size(0X14000CB50, 0, 0, 0);
	add_func    (0X14000CB60,0X14000CCAA);
	set_func_flags(0X14000CB60,0x5400);
	SetType(0X14000CB60, "int __fastcall myMultiByteToWideCharEx(char *lpMultiByteStr, signed __int64 aSize, char a3, int aPos);");
	set_frame_size(0X14000CB60, 0X48, 0, 0);
	define_local_var(0X14000CB60, 0X14000CCAA, "[bp-0X28]", "lpWideCharStr");
	define_local_var(0X14000CB60, 0X14000CCAA, "[bp-0X20]", "cchWideChar");
	add_func    (0X14000CCAC,0X14000CCD7);
	set_func_flags(0X14000CCAC,0x5400);
	SetType(0X14000CCAC, "void __stdcall init_VT_0x60();");
	set_frame_size(0X14000CCAC, 0, 0, 0);
	add_func    (0X14000CCD8,0X14000CDFC);
	set_func_flags(0X14000CCD8,0x5400);
	SetType(0X14000CCD8, "stru_602 *__fastcall ctor_0x60(QWORD asize, DWORD a2, signed __int64 aMask, stru_602 *aRoot, int acount);");
	set_frame_size(0X14000CCD8, 0X38, 0, 0);
	define_local_var(0X14000CCD8, 0X14000CDFC, "[bp+0X28]", "acount");
	add_func    (0X14000CDFC,0X14000CE2F);
	set_func_flags(0X14000CDFC,0x5400);
	SetType(0X14000CDFC, "__int64 *__fastcall stu602_add_if_not_exists(stru_602 *a602, wchar_t *awstr);");
	set_frame_size(0X14000CDFC, 0X28, 0, 0);
	add_func    (0X14000CE30,0X14000CEC2);
	set_func_flags(0X14000CE30,0x5400);
	SetType(0X14000CE30, "BOOL __fastcall dtor_0x60(stru_602 *aroot);");
	set_frame_size(0X14000CE30, 0X28, 0, 0);
	add_func    (0X14000CEC4,0X14000CF73);
	set_func_flags(0X14000CEC4,0x5400);
	SetType(0X14000CEC4, "__int64 __fastcall fn_0_0x60(stru_602 *a1, stru_602 *a2, int aRemove);");
	set_frame_size(0X14000CEC4, 0X38, 0, 0);
	add_func    (0X14000CF74,0X14000D02B);
	set_func_flags(0X14000CF74,0x5400);
	SetType(0X14000CF74, "__int64 *__fastcall stu602_get_by_name(stru_602 *a602, unsigned __int16 *awstr);");
	set_frame_size(0X14000CF74, 0X28, 0, 0);
	add_func    (0X14000D02C,0X14000D140);
	set_func_flags(0X14000D02C,0x5400);
	SetType(0X14000D02C, "stru_602 *__fastcall stu602_add(stru_602 *a602, wchar_t *awstr, int aRemove);");
	set_frame_size(0X14000D02C, 0X28, 0, 0);
	add_func    (0X14000D140,0X14000D1E4);
	set_func_flags(0X14000D140,0x5400);
	SetType(0X14000D140, "void __fastcall dtor_s602(stru_602 *aroot);");
	set_frame_size(0X14000D140, 0X38, 0, 0);
	add_func    (0X14000D1E4,0X14000D1ED);
	set_func_flags(0X14000D1E4,0x5400);
	SetType(0X14000D1E4, "void __fastcall s602_reset_parent(stru_602 *aroot);");
	set_frame_size(0X14000D1E4, 0, 0, 0);
	add_func    (0X14000D1F0,0X14000D2B9);
	set_func_flags(0X14000D1F0,0x5400);
	SetType(0X14000D1F0, "stru_602 *__fastcall stu602_idx_f2(stru_602 *a602, __int64 aIdx, int aRemove);");
	set_frame_size(0X14000D1F0, 0X28, 0, 0);
	add_func    (0X14000D2BC,0X14000D2EC);
	set_func_flags(0X14000D2BC,0x5400);
	SetType(0X14000D2BC, "__int64 __fastcall INLINED_sub_14000D2BC(__int64);");
	set_frame_size(0X14000D2BC, 0, 0, 0);
	add_func    (0X14000D2EC,0X14000D389);
	set_func_flags(0X14000D2EC,0x5400);
	SetType(0X14000D2EC, "QWORD *__fastcall s602_get_parent_f2(stru_602 *aroot);");
	set_frame_size(0X14000D2EC, 0, 0, 0);
	add_func    (0X14000D38C,0X14000D3A4);
	set_func_flags(0X14000D38C,0x5400);
	SetType(0X14000D38C, "__int64 __fastcall str_hash_65599(_WORD *awstr);");
	set_frame_size(0X14000D38C, 0, 0, 0);
	add_func    (0X14000D3A4,0X14000D3DD);
	set_func_flags(0X14000D3A4,0x5400);
	SetType(0X14000D3A4, "__int64 __fastcall str_hash_65599_lower(unsigned __int16 *awstr);");
	set_frame_size(0X14000D3A4, 0X28, 0, 0);
	add_func    (0X14000D3E0,0X14000D417);
	set_func_flags(0X14000D3E0,0x5400);
	SetType(0X14000D3E0, "stru_602 *__fastcall fn_602_index_todo(stru_602 *a601, __int64 a2);");
	set_frame_size(0X14000D3E0, 0, 0, 0);
	add_func    (0X14000D418,0X14000D443);
	set_func_flags(0X14000D418,0x5400);
	SetType(0X14000D418, "void __stdcall init_VT_0x60_2();");
	set_frame_size(0X14000D418, 0, 0, 0);
	add_func    (0X14000D444,0X14000D523);
	set_func_flags(0X14000D444,0x5400);
	SetType(0X14000D444, "stru_601 *__fastcall ctor_0x60_2(__int64 aSize, root_601 **root, signed __int64 *aMASK, DWORD a4);");
	set_frame_size(0X14000D444, 0X28, 0, 0);
	add_func    (0X14000D524,0X14000D5B2);
	set_func_flags(0X14000D524,0x5400);
	SetType(0X14000D524, "BOOL __fastcall dtor_0x60_2(stru_601 *lpMem);");
	set_frame_size(0X14000D524, 0X28, 0, 0);
	add_func    (0X14000D5B4,0X14000D5B9);
	set_func_flags(0X14000D5B4,0x5400);
	SetType(0X14000D5B4, "QWORD __fastcall stru601_f4(stru_601 *a1);");
	set_frame_size(0X14000D5B4, 0, 0, 0);
	add_func    (0X14000D5BC,0X14000D5CE);
	set_func_flags(0X14000D5BC,0x5400);
	SetType(0X14000D5BC, "root_601 *__fastcall stru601_root_next(stru_601 *a601);");
	set_frame_size(0X14000D5BC, 0, 0, 0);
	add_func    (0X14000D5D0,0X14000D60C);
	set_func_flags(0X14000D5D0,0x5400);
	SetType(0X14000D5D0, "__int64 __fastcall stru601_f0f2(stru_601 *a601);");
	set_frame_size(0X14000D5D0, 0, 0, 0);
	add_func    (0X14000D60C,0X14000D69E);
	set_func_flags(0X14000D60C,0x5400);
	SetType(0X14000D60C, "root_601 *__fastcall stru601_dtor(stru_601 *as601);");
	set_frame_size(0X14000D60C, 0X28, 0, 0);
	add_func    (0X14000D6A0,0X14000D771);
	set_func_flags(0X14000D6A0,0x5400);
	SetType(0X14000D6A0, "stru_602 *__fastcall fn_stru601(stru_601 *a601);");
	set_frame_size(0X14000D6A0, 0X28, 0, 0);
	add_func    (0X14000D774,0X14000D87B);
	set_func_flags(0X14000D774,0x5400);
	SetType(0X14000D774, "QWORD *__fastcall after_qsort(stru_601 *, __int64);");
	set_frame_size(0X14000D774, 0, 0, 0);
	add_func    (0X14000D87C,0X14000D8F7);
	set_func_flags(0X14000D87C,0x5400);
	SetType(0X14000D87C, "__int64 __fastcall fn_0x60_2(char **a1, stru_601 *a601, int aRemove);");
	set_frame_size(0X14000D87C, 0X28, 0, 0);
	add_func    (0X14000D8F8,0X14000D912);
	set_func_flags(0X14000D8F8,0x5400);
	SetType(0X14000D8F8, "void free_g_tree_stru28_fld04();");
	set_frame_size(0X14000D8F8, 0X28, 0, 0);
	add_func    (0X14000D914,0X14000D9A9);
	set_func_flags(0X14000D914,0x5400);
	SetType(0X14000D914, "_BOOL8 __fastcall CreateDirectoryW1(wchar_t *Source);");
	set_frame_size(0X14000D914, 0X238, 0, 0);
	define_local_var(0X14000D914, 0X14000D9A9, "[bp-0X218]", "Destination");
	add_func    (0X14000D9AC,0X14000D9C4);
	set_func_flags(0X14000D9AC,0x5400);
	SetType(0X14000D9AC, "__int64 __fastcall MySetFileAttributesW(const WCHAR *, DWORD);");
	set_frame_size(0X14000D9AC, 0X28, 0, 0);
	add_func    (0X14000D9C4,0X14000DA6A);
	set_func_flags(0X14000D9C4,0x5400);
	SetType(0X14000D9C4, "__int64 __fastcall TempPathW_to_tree(int);");
	set_frame_size(0X14000D9C4, 0X28, 0, 0);
	add_func    (0X14000DA6C,0X14000DA73);
	set_func_flags(0X14000DA6C,0x1400);
	SetType(0X14000DA6C, "_BOOL8 __fastcall DeleteFileW2(const WCHAR *);");
	add_func    (0X14000DA74,0X14000DAA7);
	set_func_flags(0X14000DA74,0x5400);
	SetType(0X14000DA74, "_BOOL8 __fastcall DeleteFileW1(LPCWSTR lpFileName, char);");
	set_frame_size(0X14000DA74, 0X28, 0, 0);
	add_func    (0X14000DAA8,0X14000DB16);
	set_func_flags(0X14000DAA8,0x5400);
	SetType(0X14000DAA8, "__int64 __fastcall MyGetCurrentDirectoryW(int apos);");
	set_frame_size(0X14000DAA8, 0X28, 0, 0);
	add_func    (0X14000DB18,0X14000DC87);
	set_func_flags(0X14000DB18,0x5400);
	SetType(0X14000DB18, "__int64 __fastcall GetKnownFolderPath(int, int);");
	set_frame_size(0X14000DB18, 0X38, 0, 0);
	define_local_var(0X14000DB18, 0X14000DC87, "[bp+0X18]", "Source");
	add_func    (0X14000DC88,0X14000DCA2);
	set_func_flags(0X14000DC88,0x5400);
	SetType(0X14000DC88, "_BOOL8 __fastcall MySetCurrentDirectoryW(const WCHAR *);");
	set_frame_size(0X14000DC88, 0X28, 0, 0);
	add_func    (0X14000DCA4,0X14000DD2E);
	set_func_flags(0X14000DCA4,0x5400);
	SetType(0X14000DCA4, "__int64 __fastcall mySHGetFolderLocation(int csidl, wchar_t *String);");
	set_frame_size(0X14000DCA4, 0X38, 0, 0);
	define_local_var(0X14000DCA4, 0X14000DD2E, "[bp+0X10]", "pidl");
	add_func    (0X14000DD30,0X14000DDB1);
	set_func_flags(0X14000DD30,0x5400);
	SetType(0X14000DD30, "void __fastcall fn_free_obj_0x60_0(__int64 aAT);");
	set_frame_size(0X14000DD30, 0X28, 0, 0);
	add_func    (0X14000DDC0,0X14000DE0C);
	set_func_flags(0X14000DDC0,0x5400);
	SetType(0X14000DDC0, "__int64 __fastcall MyWriteFile(file_holder *a1);");
	set_frame_size(0X14000DDC0, 0X38, 0, 0);
	define_local_var(0X14000DDC0, 0X14000DE0C, "[bp-0X18]", "lpOverlapped");
	define_local_var(0X14000DDC0, 0X14000DE0C, "[bp+0X8]", "NumberOfBytesWritten");
	add_func    (0X14000DE10,0X14000DE1C);
	set_func_flags(0X14000DE10,0x1400);
	SetType(0X14000DE10, "void free_stru60_0();");
	add_func    (0X14000DE20,0X14000DE44);
	set_func_flags(0X14000DE20,0x5400);
	SetType(0X14000DE20, "void __stdcall init_g_stru_0x60_10();");
	set_frame_size(0X14000DE20, 0X28, 0, 0);
	add_func    (0X14000DE50,0X14000E09D);
	set_func_flags(0X14000DE50,0x5400);
	SetType(0X14000DE50, "file_holder *__fastcall CreateFileW_0(__int64 aAT, const WCHAR *lpFN, int aMoveMethod, int aFlags);");
	set_frame_size(0X14000DE50, 0X78, 0, 0);
	define_local_var(0X14000DE50, 0X14000E09D, "[bp-0X58]", "dwCreationDisposition");
	define_local_var(0X14000DE50, 0X14000E09D, "[bp-0X50]", "dwFlagsAndAttributes");
	define_local_var(0X14000DE50, 0X14000E09D, "[bp-0X48]", "hTemplateFile");
	define_local_var(0X14000DE50, 0X14000E09D, "[bp-0X38]", "DistanceToMoveHigh");
	define_local_var(0X14000DE50, 0X14000E09D, "[bp+0X20]", "CreationDisposition");
	add_func    (0X14000E0A0,0X14000E1D1);
	set_func_flags(0X14000E0A0,0x5400);
	SetType(0X14000E0A0, "HANDLE __fastcall MyCreateFileW(__int64 aAT, const WCHAR *afn);");
	set_frame_size(0X14000E0A0, 0X48, 0, 0);
	define_local_var(0X14000E0A0, 0X14000E1D1, "[bp-0X28]", "dwCreationDisposition");
	define_local_var(0X14000E0A0, 0X14000E1D1, "[bp-0X20]", "dwFlagsAndAttributes");
	define_local_var(0X14000E0A0, 0X14000E1D1, "[bp-0X18]", "hTemplateFile");
	add_func    (0X14000E1E0,0X14000E1EE);
	set_func_flags(0X14000E1E0,0x5400);
	SetType(0X14000E1E0, "file_holder *__fastcall CreateFileW_CREATE_ALWAYS(__int64 aAT, const WCHAR *lpFN, int aFlags);");
	set_frame_size(0X14000E1E0, 0, 0, 0);
	add_func    (0X14000E1F0,0X14000E2E0);
	set_func_flags(0X14000E1F0,0x5400);
	SetType(0X14000E1F0, "char *__fastcall INLINED_MyCreateFileW(__int64 aAT, const WCHAR *aFileName);");
	set_frame_size(0X14000E1F0, 0X48, 0, 0);
	define_local_var(0X14000E1F0, 0X14000E2E0, "[bp-0X28]", "dwCreationDisposition");
	define_local_var(0X14000E1F0, 0X14000E2E0, "[bp-0X20]", "dwFlagsAndAttributes");
	define_local_var(0X14000E1F0, 0X14000E2E0, "[bp-0X18]", "hTemplateFile");
	add_func    (0X14000E2E0,0X14000E3D6);
	set_func_flags(0X14000E2E0,0x5400);
	SetType(0X14000E2E0, "HANDLE *__fastcall INLINED_MyOpenFileExisting(__int64 aAT, const WCHAR *alpFileName);");
	set_frame_size(0X14000E2E0, 0X48, 0, 0);
	define_local_var(0X14000E2E0, 0X14000E3D6, "[bp-0X28]", "dwCreationDisposition");
	define_local_var(0X14000E2E0, 0X14000E3D6, "[bp-0X20]", "dwFlagsAndAttributes");
	define_local_var(0X14000E2E0, 0X14000E3D6, "[bp-0X18]", "hTemplateFile");
	add_func    (0X14000E3E0,0X14000E3EE);
	set_func_flags(0X14000E3E0,0x5400);
	SetType(0X14000E3E0, "file_holder *__fastcall OpenExistingFileW(__int64 aAT, const WCHAR *lpFN, int aFlags);");
	set_frame_size(0X14000E3E0, 0, 0, 0);
	add_func    (0X14000E3F0,0X14000E500);
	set_func_flags(0X14000E3F0,0x5400);
	SetType(0X14000E3F0, "__int64 __fastcall MyWriteFileText_UTF8(file_holder *afile_holder, WCHAR *aBuffer, int a3);");
	set_frame_size(0X14000E3F0, 0X38, 0, 0);
	define_local_var(0X14000E3F0, 0X14000E500, "[bp-0X18]", "lpOverlapped");
	define_local_var(0X14000E3F0, 0X14000E500, "[bp+0X10]", "NumberOfBytesWritten");
	define_local_var(0X14000E3F0, 0X14000E500, "[bp+0X20]", "nNumberOfBytesToWrite");
	add_func    (0X14000E500,0X14000E537);
	set_func_flags(0X14000E500,0x5400);
	SetType(0X14000E500, "file_holder *__fastcall MyWriteFileText_UTF8_AT(__int64 aAT, WCHAR *aBuffer);");
	set_frame_size(0X14000E500, 0X28, 0, 0);
	add_func    (0X14000E540,0X14000E587);
	set_func_flags(0X14000E540,0x5400);
	SetType(0X14000E540, "file_holder *__fastcall INLINED_MyWriteFileText2(__int64 aAT, WCHAR *aBuffer, int a3);");
	set_frame_size(0X14000E540, 0X28, 0, 0);
	add_func    (0X14000E590,0X14000E61B);
	set_func_flags(0X14000E590,0x5400);
	SetType(0X14000E590, "__int64 __fastcall MyWriteFile3(__int64 aAT, _BYTE *aSrc, DWORD aSize);");
	set_frame_size(0X14000E590, 0X38, 0, 0);
	define_local_var(0X14000E590, 0X14000E61B, "[bp-0X18]", "lpOverlapped");
	define_local_var(0X14000E590, 0X14000E61B, "[bp+0X10]", "NumberOfBytesWritten");
	add_func    (0X14000E620,0X14000E76E);
	set_func_flags(0X14000E620,0x5400);
	SetType(0X14000E620, "size_t __fastcall MyWriteFile2(file_holder *afileholder, _BYTE *aSrc, int aSize);");
	set_frame_size(0X14000E620, 0X48, 0, 0);
	define_local_var(0X14000E620, 0X14000E76E, "[bp-0X28]", "lpOverlapped");
	define_local_var(0X14000E620, 0X14000E76E, "[bp+0X8]", "NumberOfBytesWritten");
	define_local_var(0X14000E620, 0X14000E76E, "[bp+0X24]", "DistanceToMoveHigh");
	add_func    (0X14000E770,0X14000E824);
	set_func_flags(0X14000E770,0x5400);
	SetType(0X14000E770, "CHAR *__fastcall MyWideCharToMultiByte(UINT CodePage, LPCWCH lpWideCharStr, int *aOutLen);");
	set_frame_size(0X14000E770, 0X48, 0, 0);
	define_local_var(0X14000E770, 0X14000E824, "[bp-0X28]", "lpMultiByteStr");
	define_local_var(0X14000E770, 0X14000E824, "[bp-0X20]", "cbMultiByte");
	define_local_var(0X14000E770, 0X14000E824, "[bp-0X18]", "lpDefaultChar");
	define_local_var(0X14000E770, 0X14000E824, "[bp-0X10]", "lpUsedDefaultChar");
	add_func    (0X14000E824,0X14000E831);
	set_func_flags(0X14000E824,0x1400);
	SetType(0X14000E824, "void *__fastcall md6_Stuff(MD6 *a1);");
	add_func    (0X14000E834,0X14000E847);
	set_func_flags(0X14000E834,0x1400);
	SetType(0X14000E834, "BOOL __fastcall md6_dtor(void *);");
	add_func    (0X14000E848,0X14000E88B);
	set_func_flags(0X14000E848,0x5400);
	SetType(0X14000E848, "MD6 *__fastcall md6_ctor(__int64, uint32_t);");
	set_frame_size(0X14000E848, 0X28, 0, 0);
	add_func    (0X14000E88C,0X14000E8D5);
	set_func_flags(0X14000E88C,0x5400);
	SetType(0X14000E88C, "__int64 ctor_md6_VT();");
	set_frame_size(0X14000E88C, 0X28, 0, 0);
	add_func    (0X14000E8D8,0X14000E8E1);
	set_func_flags(0X14000E8D8,0x5400);
	SetType(0X14000E8D8, "void *__fastcall md6_Update(MD6 *a1, __int64 a2, unsigned int a3);");
	set_frame_size(0X14000E8D8, 0, 0, 0);
	add_func    (0X14000E8E4,0X14000EA18);
	set_func_flags(0X14000E8E4,0x5400);
	SetType(0X14000E8E4, "void *__fastcall SHA1Final_(_BYTE *adigest, MD6Context *actx);");
	set_frame_size(0X14000E8E4, 0X38, 0, 0);
	define_local_var(0X14000E8E4, 0X14000EA18, "[bp+0X10]", "finalcount");
	add_func    (0X14000EA18,0X14000EA46);
	set_func_flags(0X14000EA18,0x5400);
	SetType(0X14000EA18, "void __fastcall md6_Init(MD6Context *, int);");
	set_frame_size(0X14000EA18, 0, 0, 0);
	add_func    (0X14000EA48,0X14000FEE1);
	set_func_flags(0X14000EA48,0x5400);
	SetType(0X14000EA48, "__int64 __fastcall SHA1Transform(uint32_t *astate, const unsigned __int8 *abuffer, unsigned __int8 *a3);");
	set_frame_size(0X14000EA48, 0XA8, 0, 0);
	add_func    (0X14000FEE4,0X14000FFCA);
	set_func_flags(0X14000FEE4,0x5400);
	SetType(0X14000FEE4, "void *__fastcall SHA1Update(MD6Context *ctx, unsigned __int8 *aData, unsigned int aLen);");
	set_frame_size(0X14000FEE4, 0X38, 0, 0);
	add_func    (0X14000FFCC,0X14000FFD9);
	set_func_flags(0X14000FFCC,0x5400);
	SetType(0X14000FFCC, "void *__fastcall md5_stuff(MD5 *a1);");
	set_frame_size(0X14000FFCC, 0, 0, 0);
	add_func    (0X14000FFDC,0X14000FFEF);
	set_func_flags(0X14000FFDC,0x1400);
	SetType(0X14000FFDC, "BOOL __fastcall md5_dtor(void *);");
	add_func    (0X14000FFF0,0X140010026);
	set_func_flags(0X14000FFF0,0x5400);
	SetType(0X14000FFF0, "MD5 *__fastcall md5_ctor(__int64 a1, int a2);");
	set_frame_size(0X14000FFF0, 0X28, 0, 0);
	add_func    (0X140010028,0X140010071);
	set_func_flags(0X140010028,0x5400);
	SetType(0X140010028, "__int64 ctor_md5_VT();");
	set_frame_size(0X140010028, 0X28, 0, 0);
	add_func    (0X140010074,0X14001007D);
	set_func_flags(0X140010074,0x5400);
	SetType(0X140010074, "char __fastcall md5_Update(MD5 *, __int64, unsigned int);");
	set_frame_size(0X140010074, 0, 0, 0);
	add_func    (0X140010080,0X1400100C8);
	set_func_flags(0X140010080,0x5400);
	SetType(0X140010080, "__int64 __fastcall INLINED_sub_140010080(__int64, __int64, int);");
	set_frame_size(0X140010080, 0, 0, 0);
	add_func    (0X1400100C8,0X14001010D);
	set_func_flags(0X1400100C8,0x5400);
	SetType(0X1400100C8, "char __fastcall INLINED_sub_1400100C8(__int64, __int64, int);");
	set_frame_size(0X1400100C8, 0, 0, 0);
	add_func    (0X140010110,0X1400101EC);
	set_func_flags(0X140010110,0x5400);
	SetType(0X140010110, "void *__fastcall md5_stuff_(int64_t *PADDING, MD5Context *ctx);");
	set_frame_size(0X140010110, 0X28, 0, 0);
	add_func    (0X1400101EC,0X140010210);
	set_func_flags(0X1400101EC,0x5400);
	SetType(0X1400101EC, "void __fastcall md5_Init(MD5Context *ctx);");
	set_frame_size(0X1400101EC, 0, 0, 0);
	add_func    (0X140010210,0X140010A7A);
	set_func_flags(0X140010210,0x5410);
	SetType(0X140010210, "__int64 __fastcall md5_Step(MD5Context *abuffer, __int64 a2);");
	set_frame_size(0X140010210, 0X40, 56, 0);
	add_func    (0X140010A7C,0X140010B5D);
	set_func_flags(0X140010A7C,0x5400);
	SetType(0X140010A7C, "char __fastcall md5_Update_(MD5Context *a1, __int64 a2, unsigned int a3);");
	set_frame_size(0X140010A7C, 0X28, 0, 0);
	add_func    (0X140010B60,0X140010B79);
	set_func_flags(0X140010B60,0x5400);
	SetType(0X140010B60, "char __fastcall INLINDE_sub_140010B60(_BYTE *, __int64, __int64);");
	set_frame_size(0X140010B60, 0, 0, 0);
	add_func    (0X140010B7C,0X140010B92);
	set_func_flags(0X140010B7C,0x5400);
	SetType(0X140010B7C, "void *__fastcall INLINED_sub_140010B7C(void *, int, unsigned int);");
	set_frame_size(0X140010B7C, 0X28, 0, 0);
	add_func    (0X140010BA0,0X140010C70);
	set_func_flags(0X140010BA0,0x5000);
	SetType(0X140010BA0, "unsigned int __fastcall MD_stuff(const WCHAR *awStr, int aMDType, int aPos);");
	set_frame_size(0X140010BA0, 0X18, 0, 0);
	add_func    (0X140010C70,0X140010D86);
	set_func_flags(0X140010C70,0x5400);
	SetType(0X140010C70, "void __fastcall INLINED_sub_140010C70(WCHAR *, int, unsigned int, int, int);");
	set_frame_size(0X140010C70, 0X38, 0, 0);
	add_func    (0X140010D90,0X140010DA6);
	set_func_flags(0X140010D90,0x5400);
	SetType(0X140010D90, "unsigned int __fastcall md_Stuff3(__int64, unsigned int, int, int);");
	set_frame_size(0X140010D90, 0X38, 0, 0);
	add_func    (0X140010DB0,0X140010E38);
	set_func_flags(0X140010DB0,0x5400);
	SetType(0X140010DB0, "unsigned int __fastcall md_Stuff2(__int64, unsigned int, int, unsigned int, int);");
	set_frame_size(0X140010DB0, 0X28, 0, 0);
	add_func    (0X140010E40,0X140010E85);
	set_func_flags(0X140010E40,0x5400);
	SetType(0X140010E40, "_DWORD *__fastcall find_in_buf_0x28(int);");
	set_frame_size(0X140010E40, 0, 0, 0);
	add_func    (0X140010E90,0X140010EFE);
	set_func_flags(0X140010E90,0x5400);
	SetType(0X140010E90, "char *__fastcall put_in_buf_0x28(int);");
	set_frame_size(0X140010E90, 0, 0, 0);
	add_func    (0X140010F00,0X140010FA5);
	set_func_flags(0X140010F00,0x5400);
	SetType(0X140010F00, "char *__fastcall toHexStr(_DWORD *src, int apos);");
	set_frame_size(0X140010F00, 0X28, 0, 0);
	add_func    (0X140010FA8,0X140010FFA);
	set_func_flags(0X140010FA8,0x5400);
	SetType(0X140010FA8, "int __fastcall free_fn(char *lpMem);");
	set_frame_size(0X140010FA8, 0X28, 0, 0);
	add_func    (0X140010FFC,0X140011024);
	set_func_flags(0X140010FFC,0x5400);
	SetType(0X140010FFC, "BOOL free_g_TLS_8();");
	set_frame_size(0X140010FFC, 0X28, 0, 0);
	add_func    (0X140011024,0X140011043);
	set_func_flags(0X140011024,0x5400);
	SetType(0X140011024, "BOOL INLINED_sub_140011024();");
	set_frame_size(0X140011024, 0X28, 0, 0);
	add_func    (0X140011044,0X1400110D9);
	set_func_flags(0X140011044,0x5400);
	SetType(0X140011044, "char *__fastcall TLS_8_GetLast_or_Recall(__int64 aOfs);");
	set_frame_size(0X140011044, 0X28, 0, 0);
	add_func    (0X1400110DC,0X1400111DC);
	set_func_flags(0X1400110DC,0x5400);
	SetType(0X1400110DC, "char *__fastcall add_to_TLS_8(int aSize, void (__fastcall *aFN)(char *), QWORD);");
	set_frame_size(0X1400110DC, 0X28, 0, 0);
	add_func    (0X1400111DC,0X140011245);
	set_func_flags(0X1400111DC,0x1400);
	SetType(0X1400111DC, "void __fastcall stru60_zeroAt(stru_0x60 *a1, __int64 aAT);");
	set_frame_size(0X1400111DC, 0X28, 0, 0);
	add_func    (0X140011248,0X1400112A8);
	set_func_flags(0X140011248,0x5400);
	SetType(0X140011248, "__int64 __fastcall stru60_get_at(stru_0x60 *a1, __int64 aAT);");
	set_frame_size(0X140011248, 0X28, 0, 0);
	add_func    (0X1400112A8,0X14001136E);
	set_func_flags(0X1400112A8,0x5400);
	SetType(0X1400112A8, "HANDLE *__fastcall ResizeStru60(stru_0x60 *a1, __int64 numel);");
	set_frame_size(0X1400112A8, 0X28, 0, 0);
	add_func    (0X140011370,0X1400113F8);
	set_func_flags(0X140011370,0x5400);
	SetType(0X140011370, "stru_0x60 *__fastcall ctor_0x60_0(int aitemsize, int an, __int64 fn_free);");
	set_frame_size(0X140011370, 0X28, 0, 0);
	add_func    (0X1400113F8,0X14001147B);
	set_func_flags(0X1400113F8,0x5400);
	SetType(0X1400113F8, "_QWORD *__fastcall INLINED_sub_1400113F8(__int64, __int64);");
	set_frame_size(0X1400113F8, 0X28, 0, 0);
	add_func    (0X14001147C,0X14001162B);
	set_func_flags(0X14001147C,0x5400);
	SetType(0X14001147C, "QWORD *__fastcall fn_myv13(myV13_0x60 *myv13);");
	set_frame_size(0X14001147C, 0X28, 0, 0);
	add_func    (0X14001162C,0X140011667);
	set_func_flags(0X14001162C,0x5400);
	SetType(0X14001162C, "_QWORD *__fastcall INLINED_sub_14001162C(__int64);");
	set_frame_size(0X14001162C, 0X28, 0, 0);
	add_func    (0X140011668,0X1400116F3);
	set_func_flags(0X140011668,0x5400);
	SetType(0X140011668, "void __fastcall free_myV13_0x60(myV13_0x60 *aVal);");
	set_frame_size(0X140011668, 0X28, 0, 0);
	add_func    (0X1400116F4,0X1400117FC);
	set_func_flags(0X1400116F4,0x5400);
	SetType(0X1400116F4, "void __fastcall treeIter_dtor_todo(myV13_0x60 *atreeIter, QWORD *a2);");
	set_frame_size(0X1400116F4, 0X28, 0, 0);
	add_func    (0X1400117FC,0X140011968);
	set_func_flags(0X1400117FC,0x5400);
	SetType(0X1400117FC, "void *__fastcall TREE_iter(__int64 asize_plus_0x10, unsigned int asize, unsigned int aitems, int aFlags);");
	set_frame_size(0X1400117FC, 0X38, 0, 0);
	define_local_var(0X1400117FC, 0X140011968, "[bp+0X10]", "a2");
	define_local_var(0X1400117FC, 0X140011968, "[bp+0X18]", "a3");
	add_func    (0X140011968,0X140011A2E);
	set_func_flags(0X140011968,0x5400);
	SetType(0X140011968, "void __fastcall dtor_TREES(subs a1);");
	set_frame_size(0X140011968, 0X28, 0, 0);
	add_func    (0X140011A30,0X140011A4E);
	set_func_flags(0X140011A30,0x5400);
	SetType(0X140011A30, "void INIT_TREE_ROOT();");
	set_frame_size(0X140011A30, 0X28, 0, 0);
	add_func    (0X140011A50,0X140011A87);
	set_func_flags(0X140011A50,0x5400);
	SetType(0X140011A50, "void __fastcall free_stru60(stru_0x60 *a1);");
	set_frame_size(0X140011A50, 0X28, 0, 0);
	define_local_var(0X140011A50, 0X140011A87, "[bp+0X8]", "out");
	add_func    (0X140011A88,0X140011AA5);
	set_func_flags(0X140011A88,0x5400);
	SetType(0X140011A88, "__int64 __stdcall sub_140011A88(__int64, void (*)(void), _QWORD *);");
	set_frame_size(0X140011A88, 0X28, 0, 0);
	add_func    (0X140011AA8,0X140011AB6);
	set_func_flags(0X140011AA8,0x1400);
	SetType(0X140011AA8, "void INLINED2_sub_140011AA8();");
	add_func    (0X140011AB8,0X140011B62);
	set_func_flags(0X140011AB8,0x5400);
	SetType(0X140011AB8, "void __fastcall DOInitOnceExecuteOnce(void *a1, void (*a2)(void));");
	set_frame_size(0X140011AB8, 0X38, 0, 0);
	add_func    (0X140011B64,0X140011BDA);
	set_func_flags(0X140011B64,0x1400);
	SetType(0X140011B64, "void __fastcall INLINED_sub_140011B64(stru_0x60 **, int, int, __int64);");
	set_frame_size(0X140011B64, 0X28, 0, 0);
	add_func    (0X140011BDC,0X140011C45);
	set_func_flags(0X140011BDC,0x5400);
	SetType(0X140011BDC, "QWORD __fastcall stru60_getnotempty(stru_0x60 *a1, __int64 *aOUT);");
	set_frame_size(0X140011BDC, 0X28, 0, 0);
	add_func    (0X140011C48,0X140011C66);
	set_func_flags(0X140011C48,0x5400);
	SetType(0X140011C48, "void __fastcall EnterCriticalSection_stru60(stru_0x60 *a1);");
	set_frame_size(0X140011C48, 0X28, 0, 0);
	add_func    (0X140011C68,0X140011CB0);
	set_func_flags(0X140011C68,0x1400);
	SetType(0X140011C68, "BOOL __fastcall del_fr_tree(stru0x20 **a1, HANDLE *hObject);");
	add_func    (0X140011CB0,0X140011CF2);
	set_func_flags(0X140011CB0,0x5400);
	SetType(0X140011CB0, "HANDLE *__fastcall add_to_tree(stru0x20 *root, int size);");
	set_frame_size(0X140011CB0, 0X28, 0, 0);
	add_func    (0X140011CF4,0X140011D2D);
	set_func_flags(0X140011CF4,0x5400);
	SetType(0X140011CF4, "void __fastcall initMainVT();");
	set_frame_size(0X140011CF4, 0, 0, 0);
	add_func    (0X140011D30,0X140011E0C);
	set_func_flags(0X140011D30,0x5400);
	SetType(0X140011D30, "void *__fastcall fn_alloc_obj1(QWORD aElSize, QWORD aCnt, int a3, QWORD *aMask, void **aResult);");
	set_frame_size(0X140011D30, 0X48, 0, 0);
	define_local_var(0X140011D30, 0X140011E0C, "[bp+0X28]", "aResult");
	add_func    (0X140011E0C,0X140011EEA);
	set_func_flags(0X140011E0C,0x5400);
	SetType(0X140011E0C, "void *__fastcall fn_01_obj1(__int64 a1, QWORD aElSize, int a3, QWORD *aMask, void *aResult);");
	set_frame_size(0X140011E0C, 0X58, 0, 0);
	define_local_var(0X140011E0C, 0X140011EEA, "[bp-0X38]", "aResult");
	add_func    (0X140011EEC,0X140011EF1);
	set_func_flags(0X140011EEC,0x5480);
	SetType(0X140011EEC, "BOOL __fastcall fn_free_obj1(stru_602 *);");
	set_frame_size(0X140011EEC, 0, 0, 0);
	add_func    (0X140011EF4,0X140011F63);
	set_func_flags(0X140011EF4,0x5400);
	SetType(0X140011EF4, "BOOL __fastcall fn_free_obj1_(stru_602 *);");
	set_frame_size(0X140011EF4, 0X28, 0, 0);
	add_func    (0X140011F64,0X140012060);
	set_func_flags(0X140011F64,0x5400);
	SetType(0X140011F64, "__int64 __fastcall fn_02_obj1(QWORD *src, __int64 a2, int aAllocNew);");
	set_frame_size(0X140011F64, 0X38, 0, 0);
	add_func    (0X140012060,0X140012091);
	set_func_flags(0X140012060,0x5400);
	SetType(0X140012060, "void __stdcall create_and_alloc_STRtree();");
	set_frame_size(0X140012060, 0X28, 0, 0);
	add_func    (0X1400120A0,0X1400120C2);
	set_func_flags(0X1400120A0,0x5400);
	SetType(0X1400120A0, "BOOL MyHeapDestroy();");
	set_frame_size(0X1400120A0, 0X28, 0, 0);
	add_func    (0X1400120D0,0X1400121B5);
	set_func_flags(0X1400120D0,0x5400);
	SetType(0X1400120D0, "size_t __fastcall my_wstrcpy(LPVOID *, wchar_t *aSrc);");
	set_frame_size(0X1400120D0, 0X38, 0, 0);
	define_local_var(0X1400120D0, 0X1400121B5, "[bp-0X18]", "len");
	define_local_var(0X1400120D0, 0X1400121B5, "[bp+0X10]", "String");
	add_func    (0X1400121C0,0X140012201);
	set_func_flags(0X1400121C0,0x5400);
	SetType(0X1400121C0, "QWORD __stdcall GET_TLS_StrLen();");
	set_frame_size(0X1400121C0, 0X48, 0, 0);
	define_local_var(0X1400121C0, 0X140012201, "[bp-0X28]", "dwErrCode");
	add_func    (0X140012210,0X1400122E3);
	set_func_flags(0X140012210,0x5400);
	SetType(0X140012210, "__int64 __fastcall dup_from_STR_tree(LPVOID *, int);");
	set_frame_size(0X140012210, 0X38, 0, 0);
	add_func    (0X1400122F0,0X140012356);
	set_func_flags(0X1400122F0,0x5400);
	SetType(0X1400122F0, "void __fastcall wstrdup_10(LPVOID *out, wchar_t *src);");
	set_frame_size(0X1400122F0, 0X38, 0, 0);
	define_local_var(0X1400122F0, 0X140012356, "[bp-0X18]", "len");
	define_local_var(0X1400122F0, 0X140012356, "[bp+0X10]", "String");
	add_func    (0X140012360,0X14001238A);
	set_func_flags(0X140012360,0x5400);
	SetType(0X140012360, "BOOL __fastcall HeapFree__0(void *);");
	set_frame_size(0X140012360, 0X28, 0, 0);
	define_local_var(0X140012360, 0X14001238A, "[bp+0X8]", "lpMem");
	add_func    (0X140012390,0X1400123D3);
	set_func_flags(0X140012390,0x5400);
	SetType(0X140012390, "BOOL __fastcall unkfree_fn(LPVOID *);");
	set_frame_size(0X140012390, 0X38, 0, 0);
	define_local_var(0X140012390, 0X1400123D3, "[bp-0X18]", "lpMem");
	add_func    (0X1400123E0,0X140012445);
	set_func_flags(0X1400123E0,0x5400);
	SetType(0X1400123E0, "void __stdcall init_RSO();");
	set_frame_size(0X1400123E0, 0X28, 0, 0);
	add_func    (0X140012450,0X1400124BD);
	set_func_flags(0X140012450,0x5400);
	SetType(0X140012450, "void __fastcall add_to_STR_treeR(wchar_t *);");
	set_frame_size(0X140012450, 0X38, 0, 0);
	define_local_var(0X140012450, 0X1400124BD, "[bp+0X8]", "String");
	add_func    (0X1400124C0,0X140012519);
	set_func_flags(0X1400124C0,0x5400);
	SetType(0X1400124C0, "_BOOL8 __fastcall mywcscmp(wchar_t *, wchar_t *);");
	set_frame_size(0X1400124C0, 0X28, 0, 0);
	define_local_var(0X1400124C0, 0X140012519, "[bp+0X8]", "String1");
	define_local_var(0X1400124C0, 0X140012519, "[bp+0X10]", "String2");
	add_func    (0X140012520,0X140012550);
	set_func_flags(0X140012520,0x5400);
	SetType(0X140012520, "__int64 add2_to_StrTreeLen();");
	set_frame_size(0X140012520, 0X38, 0, 0);
	add_func    (0X140012550,0X140012597);
	set_func_flags(0X140012550,0x5400);
	SetType(0X140012550, "char *__fastcall STR_Tree_Last(int);");
	set_frame_size(0X140012550, 0X38, 0, 0);
	add_func    (0X1400125A0,0X1400125C2);
	set_func_flags(0X1400125A0,0x5400);
	SetType(0X1400125A0, "__int64 STR_tree_root_0();");
	set_frame_size(0X1400125A0, 0X38, 0, 0);
	add_func    (0X1400125D0,0X1400125F2);
	set_func_flags(0X1400125D0,0x5400);
	SetType(0X1400125D0, "strNode *__fastcall STR_tree_root();");
	set_frame_size(0X1400125D0, 0X38, 0, 0);
	add_func    (0X140012600,0X14001262B);
	set_func_flags(0X140012600,0x5400);
	SetType(0X140012600, "char *str_tree_end();");
	set_frame_size(0X140012600, 0X38, 0, 0);
	add_func    (0X140012630,0X140012692);
	set_func_flags(0X140012630,0x5400);
	SetType(0X140012630, "__int64 __fastcall GET_STR_IN_tree(wchar_t *a1);");
	set_frame_size(0X140012630, 0X38, 0, 0);
	add_func    (0X1400126A0,0X1400126CB);
	set_func_flags(0X1400126A0,0x5400);
	SetType(0X1400126A0, "__int64 __fastcall STR_TREE_AT(int);");
	set_frame_size(0X1400126A0, 0X38, 0, 0);
	add_func    (0X1400126D0,0X140012803);
	set_func_flags(0X1400126D0,0x5400);
	SetType(0X1400126D0, "char *__fastcall alloc_to_STR_tree(int len, int apos);");
	set_frame_size(0X1400126D0, 0X48, 0, 0);
	add_func    (0X140012810,0X14001284F);
	set_func_flags(0X140012810,0x5400);
	SetType(0X140012810, "__int64 __fastcall str_setz(int);");
	set_frame_size(0X140012810, 0X38, 0, 0);
	add_func    (0X140012850,0X140012880);
	set_func_flags(0X140012850,0x5400);
	SetType(0X140012850, "__int64 __fastcall GET_CHAR_AT_tree(int);");
	set_frame_size(0X140012850, 0X38, 0, 0);
	add_func    (0X140012880,0X1400128F3);
	set_func_flags(0X140012880,0x5400);
	SetType(0X140012880, "__int64 __fastcall wstrcpy(_DWORD *dst, _DWORD *src, int len);");
	set_frame_size(0X140012880, 0X18, 0, 0);
	define_local_var(0X140012880, 0X1400128F3, "[bp+0X8]", "dst_1");
	define_local_var(0X140012880, 0X1400128F3, "[bp+0X18]", "len_1");
	add_func    (0X140012900,0X14001293E);
	set_func_flags(0X140012900,0x5400);
	SetType(0X140012900, "__int64 __fastcall TLS_cutr_str(int);");
	set_frame_size(0X140012900, 0X38, 0, 0);
	add_func    (0X140012940,0X140012C42);
	set_func_flags(0X140012940,0x5400);
	SetType(0X140012940, "_BYTE *__fastcall calc_size(char *a1, __int64 aSize);");
	set_frame_size(0X140012940, 0X28, 0, 0);
	add_func    (0X140012C50,0X140012CBB);
	set_func_flags(0X140012C50,0x5400);
	SetType(0X140012C50, "void __stdcall alloc_strNode();");
	set_frame_size(0X140012C50, 0X38, 0, 0);
	define_local_var(0X140012C50, 0X140012CBB, "[bp-0X18]", "mem");
	add_func    (0X140012CD0,0X140012D15);
	set_func_flags(0X140012CD0,0x5400);
	SetType(0X140012CD0, "BOOL INLINED_sub_140012CD0();");
	set_frame_size(0X140012CD0, 0X38, 0, 0);
	define_local_var(0X140012CD0, 0X140012D15, "[bp-0X18]", "lpMem");
	add_func    (0X140012D20,0X140012D38);
	set_func_flags(0X140012D20,0x5400);
	SetType(0X140012D20, "z_err __fastcall inf(char *out, unsigned int *total_out, char *buf, int size_1);");
	set_frame_size(0X140012D20, 0X28, 0, 0);
	define_local_var(0X140012D20, 0X140012D38, "[bp+0X20]", "size");
	add_func    (0X140012D40,0X140012E93);
	set_func_flags(0X140012D40,0x5400);
	SetType(0X140012D40, "z_err __fastcall inf_(char *out, unsigned int *total_out, z_stream *buf, unsigned int *a4);");
	set_frame_size(0X140012D40, 0XB8, 0, 0);
	define_local_var(0X140012D40, 0X140012E93, "[bp-0X88]", "strm");
	add_func    (0X140012EA0,0X140012EC5);
	set_func_flags(0X140012EA0,0x5400);
	SetType(0X140012EA0, "void *__fastcall INLINED_sub_140012EA0(__int64);");
	set_frame_size(0X140012EA0, 0, 0, 0);
	add_func    (0X140012ED0,0X1400146C0);
	set_func_flags(0X140012ED0,0x5410);
	SetType(0X140012ED0, "__int64 __fastcall inflate(z_streamp *a1, int flush);");
	set_frame_size(0X140012ED0, 0X80, 24, 0);
	add_func    (0X1400146C0,0X140014912);
	set_func_flags(0X1400146C0,0x5400);
	SetType(0X1400146C0, "void __fastcall INLINED_sub_1400146C0(__int64, _QWORD *);");
	set_frame_size(0X1400146C0, 0X38, 0, 0);
	add_func    (0X140014920,0X14001498F);
	set_func_flags(0X140014920,0x5400);
	SetType(0X140014920, "z_err __fastcall inflateEnd(z_stream *strm);");
	set_frame_size(0X140014920, 0X28, 0, 0);
	add_func    (0X140014990,0X140014A3A);
	set_func_flags(0X140014990,0x5400);
	SetType(0X140014990, "__int64 __fastcall INLINED_sub_140014990(_QWORD *, char *, _DWORD *);");
	set_frame_size(0X140014990, 0X28, 0, 0);
	add_func    (0X140014A40,0X140014B30);
	set_func_flags(0X140014A40,0x5400);
	SetType(0X140014A40, "z_err __fastcall inflateInit2_(z_streamp strm, __int64 windowBits, _BYTE *version, int stream_size);");
	set_frame_size(0X140014A40, 0X28, 0, 0);
	add_func    (0X140014B30,0X140014B40);
	set_func_flags(0X140014B30,0x5400);
	SetType(0X140014B30, "z_err __fastcall inflateInit_(z_stream *strm, _BYTE *ver, int stream_size);");
	set_frame_size(0X140014B30, 0, 0, 0);
	add_func    (0X140014B40,0X140014C5C);
	set_func_flags(0X140014B40,0x5400);
	SetType(0X140014B40, "z_err __fastcall inflateReset2(z_streamp strm, int windowBits);");
	set_frame_size(0X140014B40, 0X28, 0, 0);
	add_func    (0X140014C60,0X140014D08);
	set_func_flags(0X140014C60,0x5400);
	SetType(0X140014C60, "z_err __fastcall inflateReset(z_streamp a1);");
	set_frame_size(0X140014C60, 0, 0, 0);
	add_func    (0X140014D10,0X140014DDE);
	set_func_flags(0X140014D10,0x5400);
	SetType(0X140014D10, "__int64 __fastcall INLINED_sub_140014D10(_QWORD *, __int64, unsigned int);");
	set_frame_size(0X140014D10, 0X28, 0, 0);
	add_func    (0X140014DE0,0X140014E17);
	set_func_flags(0X140014DE0,0x5400);
	SetType(0X140014DE0, "_BOOL8 __fastcall INLINED_sub_140014DE0(_QWORD *);");
	set_frame_size(0X140014DE0, 0, 0, 0);
	add_func    (0X140014E20,0X140014FE4);
	set_func_flags(0X140014E20,0x5400);
	SetType(0X140014E20, "__int64 __fastcall zlib_sub_140014E20(z_stream *);");
	set_frame_size(0X140014E20, 0X38, 0, 0);
	add_func    (0X140014FF0,0X140015058);
	set_func_flags(0X140014FF0,0x5400);
	SetType(0X140014FF0, "__int64 __fastcall zlib_sub_140014FF0(unsigned int *, unsigned __int8 *, unsigned int);");
	set_frame_size(0X140014FF0, 0, 0, 0);
	add_func    (0X140015060,0X14001515E);
	set_func_flags(0X140015060,0x5400);
	SetType(0X140015060, "__int64 __fastcall zlib_sub_140015060(__int64, __int64, unsigned int);");
	set_frame_size(0X140015060, 0X28, 0, 0);
	add_func    (0X140015160,0X140015170);
	set_func_flags(0X140015160,0x5400);
	SetType(0X140015160, "void __fastcall zlib_sub_140015160(int, char *, unsigned int);");
	set_frame_size(0X140015160, 0, 0, 0);
	add_func    (0X140015170,0X1400154EC);
	set_func_flags(0X140015170,0x5400);
	SetType(0X140015170, "void __fastcall zlib_sub_140015170(unsigned int, unsigned __int8 *, unsigned __int64);");
	set_frame_size(0X140015170, 0X8, 0, 0);
	add_func    (0X1400154F0,0X14001568B);
	set_func_flags(0X1400154F0,0x5400);
	SetType(0X1400154F0, "__int64 __fastcall INLINED_sub_1400154F0(unsigned int, int, __int64);");
	set_frame_size(0X1400154F0, 0X108, 0, 0);
	add_func    (0X140015690,0X140015995);
	set_func_flags(0X140015690,0x5400);
	SetType(0X140015690, "void __fastcall zlib_sub_140015690(int, char *, unsigned __int64);");
	set_frame_size(0X140015690, 0X8, 0, 0);
	add_func    (0X1400159A0,0X1400159DC);
	set_func_flags(0X1400159A0,0x5400);
	SetType(0X1400159A0, "__int64 __fastcall INLINED_sub_1400159A0(char *, char *);");
	set_frame_size(0X1400159A0, 0, 0, 0);
	add_func    (0X1400159E0,0X1400159F6);
	set_func_flags(0X1400159E0,0x5400);
	SetType(0X1400159E0, "__int64 __fastcall INLINED_sub_1400159E0(_DWORD *, unsigned int);");
	set_frame_size(0X1400159E0, 0, 0, 0);
	add_func    (0X140015A00,0X140015A08);
	set_func_flags(0X140015A00,0x1400);
	SetType(0X140015A00, "void zlib_sub_140015A00();");
	add_func    (0X140015A10,0X140015AD8);
	set_func_flags(0X140015A10,0x5400);
	SetType(0X140015A10, "__int64 __fastcall INLINED_sub_140015A10(unsigned int, unsigned int, __int64);");
	set_frame_size(0X140015A10, 0, 0, 0);
	add_func    (0X140015AE0,0X140015DC3);
	set_func_flags(0X140015AE0,0x5400);
	SetType(0X140015AE0, "__int64 __fastcall zlib_sub_140015AE0(unsigned int, unsigned __int8 *, unsigned __int64);");
	set_frame_size(0X140015AE0, 0, 0, 0);
	add_func    (0X140015DD0,0X14001620C);
	set_func_flags(0X140015DD0,0x5410);
	SetType(0X140015DD0, "__int64 __fastcall zlib_sub_140015DD0(int, unsigned __int16 *, __int64, _DWORD **, unsigned int *, _WORD *);");
	set_frame_size(0X140015DD0, 0X80, 56, 0);
	add_func    (0X140016210,0X1400166FF);
	set_func_flags(0X140016210,0x5400);
	SetType(0X140016210, "__int64 __fastcall zlib_sub_140016210(unsigned __int8 **, int);");
	set_frame_size(0X140016210, 0X78, 0, 0);
	add_func    (0X140016700,0X14001670D);
	set_func_flags(0X140016700,0x1400);
	SetType(0X140016700, "void *__fastcall m_zalloc(__int64, int, int);");
	add_func    (0X140016710,0X14001671A);
	set_func_flags(0X140016710,0x1400);
	SetType(0X140016710, "void __fastcall m_zfree(__int64, void *);");
	add_func    (0X14001671C,0X14001674A);
	set_func_flags(0X14001671C,0x5400);
	SetType(0X14001671C, "_WORD *__fastcall my_atoi2(_WORD *, __int64);");
	set_frame_size(0X14001671C, 0X28, 0, 0);
	add_func    (0X14001674C,0X1400167BE);
	set_func_flags(0X14001674C,0x5400);
	SetType(0X14001674C, "_WORD *__fastcall my_atoi3(_WORD *, unsigned __int64);");
	set_frame_size(0X14001674C, 0X48, 0, 0);
	add_func    (0X1400167C0,0X140016826);
	set_func_flags(0X1400167C0,0x5400);
	SetType(0X1400167C0, "__int64 __fastcall mask_walk(signed __int64 *aMASK);");
	set_frame_size(0X1400167C0, 0X28, 0, 0);
	add_func    (0X140016828,0X140016BB0);
	set_func_flags(0X140016828,0x5400);
	SetType(0X140016828, "void __fastcall stu602_cpy(stru_602 *a602, QWORD asize, signed __int64 aMask, stru_602 *b602);");
	set_frame_size(0X140016828, 0X98, 0, 0);
	define_local_var(0X140016828, 0X140016BB0, "[bp-0X68]", "Size");
	define_local_var(0X140016828, 0X140016BB0, "[bp+0X8]", "aa602");
	add_func    (0X140016BB0,0X140016CFA);
	set_func_flags(0X140016BB0,0x5400);
	SetType(0X140016BB0, "void __fastcall dtor_by_MASK(stru_602 *aRoot, __int64 aMASK);");
	set_frame_size(0X140016BB0, 0X48, 0, 0);
	add_func    (0X140016CFC,0X140016EB6);
	set_func_flags(0X140016CFC,0x5400);
	SetType(0X140016CFC, "__int64 __fastcall ctor_c602(stru_602 *a602, __int64 *aMask);");
	set_frame_size(0X140016CFC, 0X58, 0, 0);
	add_func    (0X140016EB8,0X140016F6C);
	set_func_flags(0X140016EB8,0x1400);
	SetType(0X140016EB8, "BOOL __fastcall rso_call_back(RegSingleObject *rso);");
	set_frame_size(0X140016EB8, 0X28, 0, 0);
	add_func    (0X140016F6C,0X140016FB4);
	set_func_flags(0X140016F6C,0x5400);
	SetType(0X140016F6C, "void INLINED_sub_140016F6C();");
	set_frame_size(0X140016F6C, 0X28, 0, 0);
	add_func    (0X140016FB4,0X14001711A);
	set_func_flags(0X140016FB4,0x5400);
	SetType(0X140016FB4, "void __fastcall add_to_rso(void *free_fn, unk001 *un001);");
	set_frame_size(0X140016FB4, 0X58, 0, 0);
	define_local_var(0X140016FB4, 0X14001711A, "[bp-0X38]", "dwDesiredAccess");
	define_local_var(0X140016FB4, 0X14001711A, "[bp-0X30]", "dwFlags");
	add_func    (0X14001711C,0X14001712E);
	set_func_flags(0X14001711C,0x5400);
	SetType(0X14001711C, "void __fastcall Callback(RegSingleObject *a1, char TimerOrWaitFired);");
	set_frame_size(0X14001711C, 0X28, 0, 0);
	add_func    (0X140017130,0X140017135);
	set_func_flags(0X140017130,0x5480);
	SetType(0X140017130, "void __cdecl j_free(void *Block);");
	set_frame_size(0X140017130, 0, 0, 0);
	add_func    (0X140017140,0X14001721A);
	set_func_flags(0X140017140,0x5400);
	SetType(0X140017140, "_BYTE *__fastcall myWideCharToMultiByte(LPCWCH lpWideCharStr);");
	set_frame_size(0X140017140, 0X48, 0, 0);
	define_local_var(0X140017140, 0X14001721A, "[bp-0X28]", "lpMultiByteStr");
	define_local_var(0X140017140, 0X14001721A, "[bp-0X20]", "cbMultiByte");
	define_local_var(0X140017140, 0X14001721A, "[bp-0X18]", "lpDefaultChar");
	define_local_var(0X140017140, 0X14001721A, "[bp-0X10]", "lpUsedDefaultChar");
	add_func    (0X140017220,0X1400172B9);
	set_func_flags(0X140017220,0x5400);
	SetType(0X140017220, "int __fastcall INLINED_sub_140017220(LPCCH lpMultiByteStr, int);");
	set_frame_size(0X140017220, 0X38, 0, 0);
	define_local_var(0X140017220, 0X1400172B9, "[bp-0X18]", "lpWideCharStr");
	define_local_var(0X140017220, 0X1400172B9, "[bp-0X10]", "cchWideChar");
	add_func    (0X1400172C0,0X14001735E);
	set_func_flags(0X1400172C0,0x5400);
	SetType(0X1400172C0, "WCHAR *__fastcall INLINED_sub_1400172C0(LPCCH lpMultiByteStr);");
	set_frame_size(0X1400172C0, 0X38, 0, 0);
	define_local_var(0X1400172C0, 0X14001735E, "[bp-0X18]", "lpWideCharStr");
	define_local_var(0X1400172C0, 0X14001735E, "[bp-0X10]", "cchWideChar");
	add_func    (0X140017360,0X140017410);
	set_func_flags(0X140017360,0x5400);
	SetType(0X140017360, "int __fastcall INLINED_sub_140017360(LPCCH lpMultiByteStr, int);");
	set_frame_size(0X140017360, 0X38, 0, 0);
	define_local_var(0X140017360, 0X140017410, "[bp-0X18]", "lpWideCharStr");
	define_local_var(0X140017360, 0X140017410, "[bp-0X10]", "cchWideChar");
	add_func    (0X140017410,0X1400174D0);
	set_func_flags(0X140017410,0x5400);
	SetType(0X140017410, "void __fastcall INLINED_sub_140017410(LPCCH lpMultiByteStr);");
	set_frame_size(0X140017410, 0X38, 0, 0);
	define_local_var(0X140017410, 0X1400174D0, "[bp-0X18]", "lpWideCharStr");
	define_local_var(0X140017410, 0X1400174D0, "[bp-0X10]", "cchWideChar");
	add_func    (0X1400174D0,0X1400174D5);
	set_func_flags(0X1400174D0,0x5480);
	SetType(0X1400174D0, "void __cdecl j_free_0(void *Block);");
	set_frame_size(0X1400174D0, 0, 0, 0);
	add_func    (0X1400174E0,0X1400175B5);
	set_func_flags(0X1400174E0,0x5400);
	SetType(0X1400174E0, "_BYTE *__fastcall INLINED_2sub_1400174E0(LPCWCH lpWideCharStr);");
	set_frame_size(0X1400174E0, 0X48, 0, 0);
	define_local_var(0X1400174E0, 0X1400175B5, "[bp-0X28]", "lpMultiByteStr");
	define_local_var(0X1400174E0, 0X1400175B5, "[bp-0X20]", "cbMultiByte");
	define_local_var(0X1400174E0, 0X1400175B5, "[bp-0X18]", "lpDefaultChar");
	define_local_var(0X1400174E0, 0X1400175B5, "[bp-0X10]", "lpUsedDefaultChar");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X140001000,"es",0,3);
	split_sreg_range(0X140007000,"es",0,3);
	split_sreg_range(0X140018000,"es",0,3);
	split_sreg_range(0X14001D000,"es",0,3);
	split_sreg_range(0X14001F000,"es",0,3);
	split_sreg_range(0X14001F6A8,"es",0,3);
	split_sreg_range(0X14001FAF0,"es",0,3);
	split_sreg_range(0X140001000,"ss",0,3);
	split_sreg_range(0X140007000,"ss",0,3);
	split_sreg_range(0X140018000,"ss",0,3);
	split_sreg_range(0X14001D000,"ss",0,3);
	split_sreg_range(0X14001F000,"ss",0,3);
	split_sreg_range(0X14001F6A8,"ss",0,3);
	split_sreg_range(0X14001FAF0,"ss",0,3);
	split_sreg_range(0X140001000,"ds",0X5,3);
	split_sreg_range(0X140007000,"ds",0X5,3);
	split_sreg_range(0X140018000,"ds",0X5,3);
	split_sreg_range(0X14001D000,"ds",0X5,3);
	split_sreg_range(0X14001F000,"ds",0X5,3);
	split_sreg_range(0X14001F6A8,"ds",0X5,3);
	split_sreg_range(0X14001FAF0,"ds",0X5,3);
	split_sreg_range(0X140001000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X140007000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X140018000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001D000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001F000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001F6A8,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001FAF0,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X140001000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X140007000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X140018000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001D000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001F000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001F6A8,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X14001FAF0,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
        end_type_updating(UTP_STRUCT);
}

// End of file.
